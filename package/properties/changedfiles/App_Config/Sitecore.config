version=2.0
xml=<?xml version="1.0" encoding="utf-8"?><changeFile><collisionbehavior></collisionbehavior><path>App_Config\Sitecore.config</path><id>App_Config\Sitecore.config</id><parent></parent><file></file><originalfile>﻿<?xml version="1.0" encoding="utf-8" ?>
<sitecore database="SqlServer" xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:security="http://www.sitecore.net/xmlconfig/security/">
    <sc.variable name="dataFolder" value="/data"/>
    <sc.variable name="mediaFolder" value="/upload"/>
    <sc.variable name="tempFolder" value="/temp"/>
    <sc.variable name="defaultDatabaseConnectionStringName" value="master"/>
    <sc.variable name="defaultDatabaseConnectionStringName" role:require="ContentDelivery or ContentManagement">
        <patch:attribute name="value">web</patch:attribute>
    </sc.variable>
    <sc.variable name="defaultContentDatabaseName" value="master"/>
    <sc.variable name="defaultContentDatabaseName" role:require="ContentDelivery">
        <patch:attribute name="value">web</patch:attribute>
    </sc.variable>
    <prototypes>
        <sc.include file="/App_Config/Prototypes.config"/>
    </prototypes>
    <!-- EVENT MAPS
      events.timingLevel =
        none   - No timing information is logged for any of the events (no matter what their local settings are)
        low    - Start/end timing is logged for events with handlers. Local settings override.
        medium - Start/end timing is logged for all events. Local settings override.
        high   - Start/end timing is logged for all events. Also, start/end for each handler is logged. Local settings override.
        custom - Only local settings apply. Events without settings are not logged.
      event.timingLevel =
       none    - No timing information is logged for the event.
       low     - The combined time of all handlers is logged for the event. If no handlers are specified, nothing is logged.
       medium  - The combined time of all handlers is logged for the event. Even if it does not have any handlers.
       high    - The combined and individual time of all handlers is logged for the event.
    -->
    <events timingLevel="custom">
        <event name="data:updated"/>
        <event name="item:added">
            <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAdded"/>
            <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCaches" resolve="true" />
        </event>
        <event name="item:added:remote">
            <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAddedRemote"/>
            <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCachesRemote" resolve="true" />
        </event>
        <event name="item:copied">
            <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemCopied" resolve="true"/>
            <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemCopied"/>
        </event>
        <event name="item:copied:remote"/>
        <event name="item:copying"/>
        <event name="item:created"/>
        <event name="item:created:remote"/>
        <event name="item:cloneAdded"/>
        <event name="item:cloneAdded:remote"/>
        <event name="item:creating"/>
        <event name="item:deleted">
            <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted" resolve="true"/>
            <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
            <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
            <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
            <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCaches" resolve="true" />
        </event>
        <event name="item:deleted:remote">
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote"/>
            <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote"/>
            <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote"/>
            <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCachesRemote" resolve="true" />
        </event>
        <event name="item:deleting"/>
        <event name="item:locked"/>
        <event name="item:moved">
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemMoved"/>
        </event>
        <event name="item:moved:remote">
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemMovedRemote"/>
        </event>
        <event name="item:moving"/>
        <event name="item:renamed"/>
        <event name="item:renamed:remote"/>
        <event name="item:saved">
            <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved" resolve="true"/>
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved"/>
            <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved"/>
            <handler type="Sitecore.Caching.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved" />
            <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCaches" resolve="true" />
        </event>
        <event name="item:saved:remote">
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote"/>
            <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote"/>
            <handler type="Sitecore.Caching.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote" />
            <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCachesRemote" resolve="true" />
        </event>
        <event name="item:saving">
            <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemSaving"/>
        </event>
        <event name="item:sortorderchanged"/>
        <event name="item:sortorderchanged:remote"/>
        <event name="item:templateChanged"/>
        <event name="item:transferred" />
        <event name="item:unlocked"/>
        <event name="item:versionAdded"/>
        <event name="item:versionAdded:remote"/>
        <event name="item:versionAdding"/>
        <event name="item:versionRemoved">
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved"/>
            <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved" resolve="true"/>
            <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved"/>
        </event>
        <event name="item:versionRemoved:remote">
            <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote"/>
            <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote"/>
        </event>
        <event name="item:versionRemoving"/>
        <event name="publish:begin"/>
        <!-- publish:complete
           Raised when publishing for all languages and targets (i.e. publish options) is complete. -->
        <event name="publish:complete" />
        <!-- publish:complete:remote
           Raised when publishing for all languages and targets (i.e. publish options) is complete on a remote Sitecore instance. -->
        <event name="publish:complete:remote" />
        <event name="publish:end">
            <handler type="Sitecore.Publishing.SmartHtmlCacheClearer, Sitecore.Kernel" method="ClearCache" resolve="true"/>
            <handler type="Sitecore.Publishing.RenderingParametersCacheClearer, Sitecore.Kernel" method="ClearCache"/>
        </event>
        <event name="publish:end:remote">
            <handler type="Sitecore.Publishing.SmartHtmlCacheClearer, Sitecore.Kernel" method="ClearCache" resolve="true"/>
            <handler type="Sitecore.Publishing.RenderingParametersCacheClearer, Sitecore.Kernel" method="ClearCache"/>
        </event>
        <event name="publish:fail"/>
        <event name="publish:itemProcessing" help="Receives an argument of type ItemProcessingEventArgs (namespace: Sitecore.Publishing.Pipelines.PublishItem)"/>
        <event name="publish:itemProcessed" help="Receives an argument of type ItemProcessedEventArgs (namespace: Sitecore.Publishing.Pipelines.PublishItem)"/>
        <event name="publish:startPublishing">
            <handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStartPublishing"/>
        </event>
        <event name="publish:statusUpdated">
            <handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStatusUpdated"/>
        </event>
        <event name="security:loggingIn"/>
        <event name="security:loggedIn"/>
        <event name="security:loggingOut"/>
        <event name="security:loggedOut">
            <handler type="Sitecore.Sites.SiteContext, Sitecore.Kernel" method="OnLoggedOut" static="true"/>
        </event>
        <event name="template:updated"/>
        <!-- user:created(System.Web.Security.MembershipUser user)
           Raised when a new membership user has been created. -->
        <event name="user:created"/>
        <!-- user:created:remote(UserCreatedRemoteEventArgs args)
           Raised when a new membership user has been created on a remote Sitecore instance. -->
        <event name="user:created:remote"/>
        <!-- user:deleted(string userName)
           Raised when a new membership user has been deleted. -->
        <event name="user:deleted"/>
        <!-- user:deleted:remote(UserDeletedRemoteEventArgs args)
           Raised when a new membership user has been deleted on a remote Sitecore instance. -->
        <event name="user:deleted:remote"/>
        <!-- user:runtimerolesupdated(string userName)
           Raised when runtime roles have been added or removed for a user, typically for a virtual user. -->
        <event name="user:runtimerolesupdated" />
        <!-- user:runtimerolesupdated:remote(UserUpdatedRemoteEventArgs args)
           Raised when runtime roles have been added or removed for a user on a remote Sitecore instance, typically for a virtual user. -->
        <event name="user:runtimerolesupdated:remote" />
        <!-- user:updated(System.Web.Security.MembershipUser user)
           Raised when a new membership user has been updated. -->
        <event name="user:updated"/>
        <!-- user:updated:remote(UserUpdatedRemoteEventArgs args)
           Raised when a new membership user has been updated on a remote Sitecore instance. -->
        <event name="user:updated:remote"/>
        <!-- role:created(string roleName)
           Raised when a new membership role has been created. -->
        <event name="role:created"/>
        <!-- role:created:remote(RoleCreatedRemoteEventArgs args)
           Raised when a new membership role has been created on a remote Sitecore instance. -->
        <event name="role:created:remote"/>
        <!-- role:deleted(string roleName)
           Raised when a new membership role has been deleted. -->
        <event name="role:deleted"/>
        <!-- role:deleted:remote(RoleDeletedRemoteEventArgs args)
           Raised when a new membership role has been deleted on a remote Sitecore instance. -->
        <event name="role:deleted:remote"/>
        <!-- roles:relationsRemoved(string roleName)
           Raised when all relations have been removed for a role. -->
        <event name="roles:relationsRemoved"/>
        <!-- roles:relationsRemoved:remote(RoleRelationsRemovedRemoteEventArgs args)
           Raised when all relations have been removed for a role on a remote Sitecore instance. -->
        <event name="roles:relationsRemoved:remote"/>
        <!-- roles:rolesAdded(IEnumerable<Role> memberRoles, IEnumerable<Role> targetRoles)
           Raised when roles have been added to one or more roles. -->
        <event name="roles:rolesAdded"/>
        <!-- roles:rolesAdded:remote(RolesAddedToRolesRemoteEventArgs args)
           Raised when roles have been added to one or more roles on a remote Sitecore instance. -->
        <event name="roles:rolesAdded:remote"/>
        <!-- roles:rolesRemoved(IEnumerable<Role> memberRoles, IEnumerable<Role> targetRoles)
           Raised when roles have been removed from one or more roles. -->
        <event name="roles:rolesRemoved"/>
        <!-- roles:rolesRemoved:remote(RolesRemovedFromRolesRemoteEventArgs args)
           Raised when roles have been removed from one or more roles on a remote Sitecore instance. -->
        <event name="roles:rolesRemoved:remote"/>
        <!-- roles:usersAdded(string[] userNames, string[] roleNames)
           Raised when users have been added to one or more roles. -->
        <event name="roles:usersAdded"/>
        <!-- roles:usersAdded:remote(UsersAddedToRolesRemoteEventArgs args)
           Raised when users have been added to one or more roles on a remote Sitecore instance. -->
        <event name="roles:usersAdded:remote"/>
        <!-- roles:usersRemoved(string[] userNames, string[] roleNames)
           Raised when users have been removed from one or more roles. -->
        <event name="roles:usersRemoved"/>
        <!-- roles:usersRemoved:remote(UsersRemovedFromRolesRemoteEventArgs args)
           Raised when users have been removed from one or more roles on a remote Sitecore instance. -->
        <event name="roles:usersRemoved:remote"/>
        <!-- database:propertychanged(string parameterName)
           Raised when database property was changed. Deprecated-->
        <event name="database:propertychanged"/>
        <!-- property:changed(string parameterName)
           Raised when property was changed. -->
        <event name="property:changed"/>
        <!-- property:deleted(string parameterName)
           Raised when property was removed. -->
        <event name="property:removed"/>
        <!-- idtable:added(string parameterName)
           Raised when property was added to idtable. -->
        <event name="idtable:added"/>
        <!-- idtable:removed(string parameterName)
           Raised when property was removed from idtable. -->
        <event name="idtable:removed"/>
        <!-- Example (note: method must be compatible with the EventHandler delegate)
      <event name="example">
        <handler type="Sitecore.Example, Sitecore.Kernel" method="OnExample"/>
      </event>
      -->

        <!-- sessionEnd:batch:starting
           Raised before the sessionEnd batch processing is executed. -->
        <event name="sessionEnd:batch:starting"/>
        <!-- sessionEnd:starting
           Raised before the sessionEnd pipeline is executed. -->
        <event name="sessionEnd:starting"/>
        <!-- sessionEnd:postSessionEnd:starting
           Raised before the postSessionEnd pipeline is executed. -->
        <event name="sessionEnd:postSessionEnd:starting"/>
        <!-- sessionEnd:batch:ended
           Raised after the sessionEnd batch processing is executed. -->
        <event name="sessionEnd:batch:ended"/>
        <!-- sessionEnd:ended
           Raised after the sessionEnd pipeline has been executed. -->
        <event name="sessionEnd:ended"/>

        <!-- job:starting
           Raised before a Job is placed into the ThreadPool -->
        <event name="job:starting"/>
        <!-- job:started
           Raised after a Job is placed into the ThreadPool and has been started-->
        <event name="job:started"/>
        <!-- job:ended
           Raised during the Job_Finished event-->
        <event name="job:ended"/>

        <event name="packageinstall:starting"/>
        <event name="packageinstall:starting:remote"/>
        <event name="packageinstall:items:starting"/>
        <event name="packageinstall:items:starting:remote"/>
        <event name="packageinstall:items:ended"/>
        <event name="packageinstall:items:ended:remote"/>
        <event name="packageinstall:files:starting"/>
        <event name="packageinstall:files:starting:remote"/>
        <event name="packageinstall:files:ended"/>
        <event name="packageinstall:files:ended:remote"/>
        <event name="packageinstall:poststep:starting"/>
        <event name="packageinstall:poststep:starting:remote"/>
        <event name="packageinstall:poststep:ended"/>
        <event name="packageinstall:poststep:ended:remote"/>
        <event name="packageinstall:ended"/>
        <event name="packageinstall:ended:remote"/>

    </events>

    <!-- EVENT SETTINGS
    Here is a list of settings for different event types.
    -->
    <eventSettings>
        <!-- SAVED ITEM REMOTE SETTINGS
      The settings that control the item:saved:remote event.
      -->
        <savedItemRemoteSettings type="Sitecore.Events.Settings.SavedItemRemoteSettings, Sitecore.Kernel">
            <!-- INCLUDE FIELDS
             This setting allows you to specify which fields should be serialized when the item:saved:remote event is triggered
             and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'false'.
      -->
            <!--<include hint="list:IncludeField">
          <Text>{A60ACD61-A6DB-4182-8329-C957982CEC74}</Text> 
      </include>-->

            <!-- INCLUDE FIELD'S TYPES
           This setting allows you to specify which field's types should be serialized when the item:saved:remote event is triggered
           and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'false'.
      -->
            <!--<include hint="list:IncludeType">
        <Text>Single-Line Text</Text>
        <Text>Multi-Line Text</Text>
        <Text>Droptree</Text>
        <Text>security</Text>
        <Text>Checkbox</Text>
        <Text>attachment</Text>
        <Text>datetime</Text>
      </include>-->

            <!-- INCLUDE TEMPLATES
             This setting allows you to serialize all the fields in a template when the item:saved:remote event is triggered
             and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'false'.
             The "includeBaseTemplates" attribute allows you to specify whether the fields in the parent templates should also be serialized.
        -->
            <!--<include hint="raw:IncludeTemplate">
          <Standard_Template id="{1930BBEB-7805-471A-A3BE-4858AC7CF696}" includeBaseTemplates="true" />
        </include>-->

            <!-- EXCLUDE FIELDS
             This setting allows you to specify which fields shouldn't be serialized when the item:saved:remote event is triggered
             and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'true'.
        -->
            <!--<exclude hint="list:ExcludeField">
          <Text>{A60ACD61-A6DB-4182-8329-C957982CEC74}</Text>
      </exclude>-->

            <!-- EXCLUDE FIELD'S TYPES
             This setting allows you to specify which types of fields shouldn't be serialized when the item:saved:remote event is triggered
             and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'true'.
      -->
            <exclude hint="list:ExcludeType">
                <Text>Rich Text</Text>
                <Text>Word Document</Text>
                <Text>html</Text>
            </exclude>

            <!-- EXCLUDE TEMPLATES
             This setting allows you to exclude all the fields in a template from being serialized when the item:saved:remote event is triggered
             and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'true'.
             The "includeBaseTemplates" attribute allows you to specify whether the fields in the parent templates should also be excluded.
        -->
            <!--<exclude hint="raw:ExcludeTemplate">
          <Sample_Item id="{76036F5E-CBCE-46D1-AF0A-4143F9B557AA}" includeBaseTemplates="false" />  
        </exclude>-->
        </savedItemRemoteSettings>
    </eventSettings>

    <!-- EVENTING -->
    <!-- Settings for strongly typed events. -->
    <eventing defaultProvider="sitecore">
        <!-- Settings related to queued events -->
        <eventQueueMonitor>
            <!-- Time between checking the queue for newly queued events. If new events are found they will be raised. -->
            <processingInterval>00:00:02</processingInterval>
        </eventQueueMonitor>
    </eventing>

    <customHandlers>
        <handler trigger="-/media/" handler="sitecore_media.ashx"/>
        <handler trigger="~/media/" handler="sitecore_media.ashx"/>
        <handler trigger="~/api/" handler="sitecore_api.ashx"/>
        <handler trigger="-/api/" handler="sitecore_api.ashx"/>
        <handler trigger="-/xaml/" handler="sitecore_xaml.ashx"/>
        <handler trigger="~/xaml/" handler="sitecore_xaml.ashx"/>
        <handler trigger="-/icon/" handler="sitecore_icon.ashx" />
        <handler trigger="~/icon/" handler="sitecore_icon.ashx"/>
        <handler trigger="-/temp/" handler="sitecore_temp.ashx"/>
        <handler trigger="~/temp/" handler="sitecore_temp.ashx"/>
        <handler trigger="~/feed/" handler="sitecore_feed.ashx"/>
        <handler trigger="-/feed/" handler="sitecore_feed.ashx"/>
    </customHandlers>
    <!-- LINK DATABASE -->
    <LinkDatabase type="Sitecore.Data.$(database).$(database)LinkDatabase, Sitecore.Kernel">
        <param ref="dataApis/dataApi[@name='$(database)']" param1="$(defaultLinkDatabaseConnectionStringName)" />
    </LinkDatabase>
    <!-- ID TABLE -->
    <IDTable type="Sitecore.Data.$(database).$(database)IDTable, Sitecore.Kernel" singleInstance="true">
        <param connectionStringName="$(defaultDatabaseConnectionStringName)" />
        <param desc="cacheSize">2500KB</param>
    </IDTable>
    <!-- PIPELINES -->
    <pipelines>
        <initialize>
            <processor type="Sitecore.Pipelines.Loader.ShowVersion, Sitecore.Kernel" resolve="true" >
                <assemblies hint="list:AddAssembly">
                    <assembly>/bin/Sitecore.Client.dll</assembly>
                    <assembly>/bin/Sitecore.Kernel.dll</assembly>
                    <assembly>/bin/Sitecore.Nexus.dll</assembly>
                </assemblies>
                <showVersionForAllAssemblies>true</showVersionForAllAssemblies>
                <showDatabases>true</showDatabases>
                <showDomains>true</showDomains>
                <showDebugWarning>true</showDebugWarning>
            </processor>
            <processor type="Sitecore.Pipelines.Loader.SetGlobals, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.LoadHooks, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.InitializeManagers, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.InitializeScheduler, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.InitializeHeartbeat, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.InitializeAgilityPack, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.EnsureAnonymousUsers, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.Loader.RegisterjQuery, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Loader.AcknowledgeInitialized, Sitecore.Kernel" />
        </initialize>
        <shutdown>
            <processor type="Sitecore.Pipelines.Shutdown.ShowReason, Sitecore.Kernel"/>
        </shutdown>
        <initializeManagers>
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeEvent, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeItemManager, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeLanguageManager, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializePublishManager, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeSerializationManager, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeNotificationManager, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeEventManager, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.InitializeManagers.InitializeScriptFactory, Sitecore.Kernel" />
        </initializeManagers>
        <getSessionIdManager>
        </getSessionIdManager>
        <preprocessRequest help="Processors should derive from Sitecore.Pipelines.PreprocessRequest.PreprocessRequestProcessor">
            <processor type="Sitecore.Pipelines.PreprocessRequest.NormalizeRawUrl, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.PreprocessRequest.IIS404Handler, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.PreprocessRequest.FilterUrlExtensions, Sitecore.Kernel">
                <param desc="Allowed extensions (comma separated)">aspx, ashx, asmx</param>
                <param desc="Blocked extensions (comma separated)">*</param>
                <param desc="Blocked extensions that stream files (comma separated)">*</param>
                <param desc="Blocked extensions that do not stream files (comma separated)"></param>
            </processor>
            <processor type="Sitecore.Pipelines.PreprocessRequest.StripLanguage, Sitecore.Kernel"/>
        </preprocessRequest>
        <!-- Checks if item has presentation assigned. Is used to define whether item can be opened in Preview or Edit mode. -->
        <hasPresentation>
            <processor type="Sitecore.Pipelines.HasPresentation.CheckLayout, Sitecore.Kernel"/>
        </hasPresentation>
        <!-- Executes before the ASP.NET Authenticate event. -->
        <preAuthenticateRequest>
            <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel">
                <prefixes hint="list"></prefixes>
            </processor>
            <processor type="Sitecore.Pipelines.PreAuthenticateRequest.SiteResolver, Sitecore.Kernel" resolve="true"/>
        </preAuthenticateRequest>
        <httpRequestBegin>
            <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.EnsureServerUrl, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.StartMeasurements, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel">
                <prefixes hint="list"></prefixes>
            </processor>
            <processor type="Sitecore.Pipelines.HttpRequest.SiteResolver, Sitecore.Kernel" resolve="true" />
            <processor type="Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.DatabaseResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.BeginDiagnostics, Sitecore.Kernel" role:require="Standalone or ContentManagement" />
            <processor type="Sitecore.Pipelines.HttpRequest.DeviceResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.LanguageResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.CustomHandlers, Sitecore.Kernel">
                <param type="Sitecore.Pipelines.HttpRequest.HandlerMapping.DirectHandlerMapper, Sitecore.Kernel" resolve="true" />
            </processor>
            <processor type="Sitecore.Pipelines.HttpRequest.QueryStringResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.DynamicLinkResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.AliasResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.DefaultResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.FileResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.HttpRequest.DeviceSimulatorResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.LayoutResolver, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.HttpRequest.ExecuteRequest, Sitecore.Kernel" resolve="true"/>
        </httpRequestBegin>
        <renderField>
            <processor type="Sitecore.Pipelines.RenderField.SetParameters, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetTextFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.ExpandLinks, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetImageFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetLinkFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetInternalLinkFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetMemoFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetDateFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetIntegerFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.GetNumberFieldValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.AddBeforeAndAfterValues, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.RenderWebEditing, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderField.SetAnchorsPositionInLinks, Sitecore.Kernel"/>
        </renderField>
        <httpRequestProcessed />
        <httpRequestEnd>
            <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.HttpRequest.EndDiagnostics, Sitecore.Kernel" role:require="Standalone or ContentManagement"/>
            <!--<processor type="Sitecore.Pipelines.HttpRequest.ResizePicture, Sitecore.Kernel"/>-->
            <processor type="Sitecore.Pipelines.HttpRequest.StopMeasurements, Sitecore.Kernel">
                <ShowThresholdWarnings>false</ShowThresholdWarnings>
                <TimingThreshold desc="Milliseconds">1000</TimingThreshold>
                <ItemThreshold desc="Item count">1000</ItemThreshold>
                <MemoryThreshold desc="KB">10000</MemoryThreshold>
            </processor>
        </httpRequestEnd>
        <!-- Determines the presentation components to include when rendering an item. -->
        <insertRenderings>
            <processor type="Sitecore.Pipelines.InsertRenderings.Processors.GetItem, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.InsertRenderings.Processors.AddPageDesignerRenderings, Sitecore.Kernel, Version=6, Culture=neutral"/>
            <processor type="Sitecore.Pipelines.InsertRenderings.Processors.AddRenderings, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.InsertRenderings.Processors.EvaluateConditions, Sitecore.Kernel"/>
        </insertRenderings>
        <job>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SignalStart"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetPriority"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetSecurity"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetContextUser"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="InitializeContext"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="RunMethod"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="ResetSecurity"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="RestoreContextUser"/>
            <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SignalEnd"/>
        </job>
        <publish help="Processors should derive from Sitecore.Publishing.Pipelines.Publish.PublishProcessor">
            <!-- This processor overrides the DisableDatabaseCaches and the MaxDegreeOfParallelism properties of the PublishContext class.

             The DisableDatabaseCaches property of the PublishContext is overridden and set to true if child items are being published,
             including when you perform a full site publish.
             If only a single item is being published, the property is set to false.
             If you disable this processor, the publish context uses the value of the Publishing.DisableDatabaseCaches setting for all the
             publishing operations.

             If only a single item is being published, the MaxDegreeOfParallelism property of the PublishContext is overridden to 1.
             This disables parallel publishing for single item publishing operations. -->
            <processor type="Sitecore.Publishing.Pipelines.Publish.OverridePublishContext, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.Publish.AddLanguagesToQueue, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.Publish.AddItemsToQueue, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.Publish.RaiseQueuedEvents, Sitecore.Kernel" resolve="true">
                <param resolve="true" type="Sitecore.Abstractions.BaseEventQueueProvider, Sitecore.Kernel" />
            </processor>
            <processor type="Sitecore.Publishing.Pipelines.Publish.ProcessQueue, Sitecore.Kernel"/>
        </publish>
        <publishItem help="Processors should derive from Sitecore.Publishing.Pipelines.PublishItem.PublishItemProcessor">
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.RaiseProcessingEvent, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.CheckVirtualItem, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.CheckSecurity, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.DetermineAction, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.MoveItems, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.PerformAction, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.AddItemReferences, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.RemoveUnknownChildren, Sitecore.Kernel"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.RaiseProcessedEvent, Sitecore.Kernel" runIfAborted="true"/>
            <processor type="Sitecore.Publishing.Pipelines.PublishItem.UpdateStatistics, Sitecore.Kernel" runIfAborted="true">
                <traceToLog>false</traceToLog>
            </processor>
        </publishItem>
        <publishVersion help="Processors should derive from Sitecore.Publishing.Pipelines.PublishItem.PublishVersionProcessor">
            <processor type="Sitecore.Publishing.Pipelines.PublishVersion.Processors.RemoveOtherVersions, Sitecore.Kernel"/>
        </publishVersion>
        <getItemReferences>
            <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemCloneReferences, Sitecore.Kernel" />
            <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddFileDropAreaMediaReferences, Sitecore.Kernel" />
            <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemLinkReferences, Sitecore.Kernel" />
            <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemAliasReferences, Sitecore.Kernel" />
            <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemTemplateReferences, Sitecore.Kernel" />
        </getItemReferences>
        <replaceItemReferences>
            <processor type="Sitecore.Pipelines.ReplaceItemReferences.StartJob, Sitecore.Kernel" />
        </replaceItemReferences>
        <renderLayout>
            <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.PageHandlers, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.SecurityCheck, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.InsertRenderings, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.PageExtenders, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.ExpandMasterPages, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.BuildTree, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.InsertSystemControls, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.InsertUnusedControls, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderLayout.BrowserCaching, Sitecore.Kernel"/>
        </renderLayout>
        <healthMonitor>
            <processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogMemoryStatus"/>
            <processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogCacheStatus"/>
            <processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogCounterStatus">
                <!-- 
          List of the system counters whose values should be written to the Sitecore log file by the Sitecore health monitor
          
          Supported attributes:
              category: The name of the performance counter category that this performance counter is associated with.
              name: The name of the performance counter that has an entry in the performance monitor.
              instanceType: The name of the performance counter category. 
              valueType: [raw|calculated]. This attribute is optional. If set to 'raw', the counter outputs the raw value from the performance counter. If set to 'calculated', the counter outputs the calculated value. If no attribute is set, the counter outputs the raw value from the performance counter.
        -->
                <counters hint="raw:AddCounter">
                    <counter category="Process" name="Private Bytes" instanceType="Windows"/>
                    <counter category="Process" name="Virtual Bytes" instanceType="Windows"/>
                    <counter category="Process" name="Page File Bytes" instanceType="Windows"/>
                    <counter category=".NET CLR Memory" name="# Bytes in all Heaps" instanceType="CLR"/>
                    <counter category=".NET CLR Memory" name="% Time in GC" instanceType="CLR"/>
                    <counter category=".NET CLR Memory" name="Large Object Heap size" instanceType="CLR"/>
                    <counter category=".NET CLR Loading" name="Bytes in Loader Heap" instanceType="CLR"/>
                    <counter category=".NET CLR Loading" name="Current Assemblies" instanceType="CLR"/>
                </counters>
            </processor>
        </healthMonitor>
        <sessionEnd>
        </sessionEnd>
        <postSessionEnd>
        </postSessionEnd>
        <getMediaStream>
            <processor type="Sitecore.Resources.Media.SaveColorProfileProcessor, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Resources.Media.ThumbnailProcessor, Sitecore.Kernel"/>
            <processor type="Sitecore.Resources.Media.ResizeProcessor, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Resources.Media.GrayscaleProcessor, Sitecore.Kernel"/>
            <processor type="Sitecore.Resources.Media.RestoreColorProfileProcessor, Sitecore.Kernel"/>
        </getMediaStream>
        <getResponseCacheHeaders>
            <processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.RequestTypeDetectionProcessor, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.MediaRequestArgsInitializerProcessor, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.PublishingProcessor, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.SecurityProcessor, Sitecore.Kernel"/>
        </getResponseCacheHeaders>
        <getMediaUrlOptions>
            <processor type="Sitecore.Pipelines.GetMediaUrlOptions.Processors.SiteModeProcessor, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetMediaUrlOptions.Processors.SecurityProcessor, Sitecore.Kernel"/>
        </getMediaUrlOptions>
        <!--  Obsolete: use the getChromeData pipeline instead. -->
        <setupEditFrame>
        </setupEditFrame>
        <expandInitialFieldValue help="Processors should derive from Sitecore.Pipelines.ExpandInitialFieldValue.ExpandInitialFieldValueProcessor">
            <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.SkipStandardValueItems, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.SkipFieldWithFallbackValue, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.CheckSharedField, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.ReplaceVariables, Sitecore.Kernel"/>
        </expandInitialFieldValue>
        <expandBranchItemName>
            <processor type="Sitecore.Pipelines.ExpandBranchItemName.ReplaceVariables, Sitecore.Kernel"/>
        </expandBranchItemName>
        <convertToDesignTimeHtml>
            <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.PrepareHtml, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.ConvertWebControls, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.FixBullets, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.FinalizeHtml, Sitecore.Kernel"/>
        </convertToDesignTimeHtml>
        <convertToRuntimeHtml>
            <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.PrepareHtml, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.ShortenLinks, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.SetImageSizes, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.ConvertWebControls, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.FixBullets, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.FinalizeHtml, Sitecore.Kernel"/>
        </convertToRuntimeHtml>
        <fixXHtml>
            <processor type="Sitecore.Pipelines.FixXHtml.PrepareHtml, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.FixXHtml.ConvertToXHtml, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.FixXHtml.CheckSchema, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.FixXHtml.RemoveEmptySpans, Sitecore.Kernel"/>
        </fixXHtml>
        <renderItemTile>
            <processor type="Sitecore.Pipelines.RenderItemTile.RenderFolderTile, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderItemTile.RenderTemplateTile, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderItemTile.RenderPlaceholderTile, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.RenderItemTile.RenderDefaultTile, Sitecore.Kernel"/>
        </renderItemTile>
        <getAboutInformation>
        </getAboutInformation>
        <getMediaCreatorOptions>
        </getMediaCreatorOptions>
        <getLookupSourceItems>
            <processor type="Sitecore.Pipelines.GetLookupSourceItems.ProcessQuerySource, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetLookupSourceItems.ProcessDefaultSource, Sitecore.Kernel"/>
        </getLookupSourceItems>
        <getRootSourceItems>
            <processor type="Sitecore.Pipelines.GetRootSourceItems.ProcessItemIdOrPathSource, Sitecore.Kernel"/>
        </getRootSourceItems>
        <getPagePreviewUrl>
            <processor type="Sitecore.Pipelines.GetPagePreviewUrl.GetDefaultUrlOptions, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.GetPagePreviewUrl.SetLanguage, Sitecore.Kernel" resolve="true" />
            <processor type="Sitecore.Pipelines.GetPagePreviewUrl.GetUrl, Sitecore.Kernel" />
        </getPagePreviewUrl>
        <getRenderingPreview>
            <processor type="Sitecore.Pipelines.GetRenderingPreview.GetXslRenderingPreview,Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingPreview.TryRenderControl,Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingPreview.GetRenderingPreviewField,Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingPreview.GetDefaultRenderingPreview,Sitecore.Kernel"/>
        </getRenderingPreview>
        <getContentEditorFields>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorFields.GetFields, Sitecore.Client"/>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorFields.GetExplicitFields, Sitecore.Client"/>
        </getContentEditorFields>
        <getContentEditorSkin>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorSkin.ShowStandardFields, Sitecore.Client"/>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorSkin.BuildSkin, Sitecore.Client"/>
        </getContentEditorSkin>
        <getContentEditorWarnings>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.ItemNotFound, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanReadLanguage, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.HasNoVersions, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWrite, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWriteWorkflow, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWriteLanguage, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.IsReadOnly, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.IsLocked, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.HasNoFields, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.NeverPublish, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.ItemPublishingRestricted, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.VersionPublishingRestricted, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.ShowingInputBoxes, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.FeedIsEmpty, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.RunRules, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetContentEditorWarnings.Notifications, Sitecore.Kernel"/>
        </getContentEditorWarnings>
        <!-- Allows to manipulate the way how an item field value is retrieved.
         Note: Extending the pipeline by unoptimized code might introduce huge performance penalty. -->
        <getFieldValue performanceCritical="true">
            <processor type="Sitecore.Pipelines.GetFieldValue.GetInheritedValue, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.GetFieldValue.GetStandardValue, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.GetFieldValue.GetDefaultValue, Sitecore.Kernel" />
        </getFieldValue>
        <getFieldLabel>
            <processor type="Sitecore.Pipelines.GetFieldLabel.ResolveFieldLabel, Sitecore.Kernel" resolve="true"/>
        </getFieldLabel>
        <getRenderedRuleElements>
            <processor type="Sitecore.Pipelines.Rules.Taxonomy.GetContextFolder, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Rules.Taxonomy.GetTags, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Rules.Taxonomy.GetElementFolders, Sitecore.Kernel"/>
        </getRenderedRuleElements>
        <!--  Controls which fields should be used as the source for the layout field value.
            Processors must accept a single argument of type GetLayoutSourceFieldsArgs (namespace: Sitecore.Pipelines.GetLayoutSourceFields). -->
        <getLayoutSourceFields>
            <processor type="Sitecore.Pipelines.GetLayoutSourceFields.GetFinalLayoutField, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.GetLayoutSourceFields.GetLayoutField, Sitecore.Kernel" />
        </getLayoutSourceFields>
        <!-- Supports the "Add Rendering" dialog by determining renderings allowed for a placeholder. -->
        <getPlaceholderRenderings>
            <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetAllowedRenderings, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetPredefinedRenderings, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.RemoveNonEditableRenderings, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetPlaceholderRenderingsDialogUrl, Sitecore.Kernel"/>
        </getPlaceholderRenderings>
        <!-- Allows to modify a placeholder key which is processed in the getPlaceholderRenderings pipeline
         Processors should inherit Sitecore.Pipelines.NormalizePlaceholderKey.NormalizePlaceholderKeyProcessor class
    -->
        <normalizePlaceholderKey>
        </normalizePlaceholderKey>
        <!--  Allows developers to programmatically disable or hide any button or panel in the Content Editor ribbons 
            without overriding the individual commands. 
            Processors must accept a single argument of type GetQueryStateArgs (namespace: Sitecore.Pipelines.GetQueryState)  -->
        <getQueryState>
        </getQueryState>
        <getSyndicationWarnings>
            <processor type="Sitecore.Pipelines.GetSyndicationWarnings.IsReadOnly, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetSyndicationWarnings.IsLocked, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetSyndicationWarnings.CantWrite, Sitecore.Kernel"/>
        </getSyndicationWarnings>
        <!--  Controls Page Editor features for placeholders, fields, edit frames, sublayouts and renderings. -->
        <getChromeData>
            <processor type="Sitecore.Pipelines.GetChromeData.Setup, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetChromeData.GetFieldChromeData, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetChromeData.GetRenderingChromeData, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetChromeData.GetEditFrameChromeData, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetChromeData.GetPlaceholderChromeData, Sitecore.Kernel" resolve="true"/>
        </getChromeData>
        <!--  Supports the "Select a Datasource" dialog used to configure the data source of a presentation component. -->
        <getRenderingDatasource>
            <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceLocation, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingDatasource.SetFallbackDatasourceLocations, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceTemplate, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetTemplatesForSelection, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingDatasource.CheckDialogState, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDialogUrl, Sitecore.Kernel"/>
        </getRenderingDatasource>
        <!--  Allows developers to override the default logic for resolving the data source for renderings. -->
        <resolveRenderingDatasource>
        </resolveRenderingDatasource>
        <!--  Is used by the Personalize the Component and Test the Component dialog boxes. The pipeline returns examples of the items that are returned by a datasource. -->
        <getDatasourceExamples>
            <processor type="Sitecore.Pipelines.GetDatasourceExamples.GetIDBasedDatasourceExample, Sitecore.Kernel"/>
        </getDatasourceExamples>
        <getWorkflowCommentsDisplay help="Processors must accept PipelineArgs of type Sitecore.Pipelines.GetWorkflowCommentsDisplay.GetWorkflowCommentsDisplayArgs">
            <processor type="Sitecore.Pipelines.GetWorkflowCommentsDisplay.ExtractFields, Sitecore.Kernel" singleInstance="false">
                <Fields hint="list:AddField">
                    <Comments>Comments</Comments>
                </Fields>
            </processor>
        </getWorkflowCommentsDisplay>
        <!-- Gets collection of Data Source items from string -->
        <parseDataSource>
            <processor type="Sitecore.Pipelines.ParseDataSource.GetDataSourceItemByIdOrPath, Sitecore.Kernel"/>
        </parseDataSource>
        <renderContentEditor>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderSkinedContentEditor, Sitecore.Client"/>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderStandardContentEditor, Sitecore.Client"/>
        </renderContentEditor>
        <renderContentEditorHeader>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddItemIcon, Sitecore.Client"/>
            <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddTitle, Sitecore.Client"/>
        </renderContentEditorHeader>
        <search>
            <processor type="Sitecore.Pipelines.Search.IDResolver, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Search.PathResolver, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Search.UrlResolver, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Search.SecurityResolver, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Search.DatabaseResolver, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Search.CategorizeResults, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.Search.AddInstantOptions, Sitecore.Kernel"/>
        </search>
        <!-- Item filtering. Used for publishing items on the fly when a web site runs in live mode. -->
        <filterItem>
            <processor type="Sitecore.Pipelines.FilterItem.CheckIfFilteringIsActive, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.FilterItem.DisableApprovedVersionFiltering, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.FilterItem.GetPublishedVersionOfItem, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.FilterItem.EnsureFilteredItem, Sitecore.Kernel"/>
        </filterItem>
        <!-- Transforms markup from rich text fields before the Rich Text Editor loads it. -->
        <loadRichTextContent>
        </loadRichTextContent>
        <!-- Transforms markup from the Rich Text Editor before saving it as a rich text field value. -->
        <saveRichTextContent>
            <processor type="Sitecore.Shell.Controls.RichTextEditor.Pipelines.SaveRichTextContent.ProtectExternalLink, Sitecore.Client" />
        </saveRichTextContent>
        <findVisitorEmailAddress>
            <processor type="Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel" method="FindEmailInUserProfile"/>
        </findVisitorEmailAddress>
        <!-- Performs dictionary lookups. The Sitecore.Globalization.Translate.Text() method invokes this pipeline. -->
        <getTranslation>
            <processor type="Sitecore.Pipelines.GetTranslation.ResolveContentDatabase, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromDomain, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromFallbackDomains, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromSiteDomain, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromContextDatabase, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromCoreDatabase, Sitecore.Kernel" role:require="!ContentDelivery"/>
        </getTranslation>
        <!-- Prepares a proposed list of renderings when copying one device presentation to another -->
        <proposeCopyDevice>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.CopyFromSource, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.PreserveMvTests, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.PreservePersonalizationTests, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.SourceMvTests, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.SourcePersonalizationTests, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.TargetMvTests, Sitecore.Kernel"/>
            <processor type="Sitecore.Pipelines.ProposeCopyDevice.TargetPersonalizationTests, Sitecore.Kernel"/>
        </proposeCopyDevice>
        <!-- Render the "afterAction" placeholder for the rules editor -->
        <renderRulePlaceholder.afterAction>
        </renderRulePlaceholder.afterAction>
        <!-- Render a rendering in the device editor -->
        <renderDeviceEditorRendering>
        </renderDeviceEditorRendering>
        <!-- Render a rendering on the layout grid -->
        <renderLayoutGridRendering>
        </renderLayoutGridRendering>
        <handlePageNotFound />
        <!-- Actions to run when general page errors are being handled, such as no layout and no access -->
        <handlePageError />
        <group name="itemProvider" groupName="itemProvider">
            <pipelines>
                <addFromTemplate help="Processors should derive from Sitecore.Pipelines.ItemProvider.AddFromTemplate.AddFromTemplateProcessor.">
                </addFromTemplate>
                <addVersion help="Processors should derive from Sitecore.Pipelines.ItemProvider.AddVersion.AddVersionProcessor.">
                </addVersion>
                <blobStreamExists help="Processors should derive from Sitecore.Pipelines.ItemProvider.BlobStreamExists.BlobStreamExistsProcessor.">
                </blobStreamExists>
                <copyItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.CopyItem.CopyItemProcessor.">
                </copyItem>
                <createItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.CreateItem.CreateItemProcessor.">
                </createItem>
                <deleteItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.DeleteItem.DeleteItemProcessor.">
                </deleteItem>
                <getBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetBlobStream.GetBlobStreamProcessor.">
                </getBlobStream>
                <getChildren help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetChildren.GetChildrenProcessor.">
                </getChildren>
                <getContentLanguages help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetContentLanguages.GetContentLanguagesProcessor.">
                </getContentLanguages>
                <getItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetItem.GetItemProcessor.">
                    <!-- Returns null if item does not have any version in requested language. -->
                    <processor type="Sitecore.Pipelines.ItemProvider.GetItem.EnforceVersionPresence, Sitecore.Kernel" />
                </getItem>
                <getParent help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetParent.GetParentProcessor.">
                </getParent>
                <getRootItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetRootItem.GetRootItemProcessor.">
                </getRootItem>
                <getVersions help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetVersions.GetVersionsProcessor.">
                </getVersions>
                <hasChildren help="Processors should derive from Sitecore.Pipelines.ItemProvider.HasChildren.HasChildrenProcessor.">
                </hasChildren>
                <moveItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.MoveItem.MoveItemProcessor.">
                </moveItem>
                <removeBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveBlobStream.RemoveBlobStreamProcessor.">
                </removeBlobStream>
                <removeData help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveData.RemoveDataProcessor.">
                </removeData>
                <removeVersion help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveVersion.RemoveVersionProcessor.">
                </removeVersion>
                <removeVersions help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveVersions.RemoveVersionsProcessor.">
                </removeVersions>
                <resolvePath help="Processors should derive from Sitecore.Pipelines.ItemProvider.ResolvePath.ResolvePathProcessor.">
                </resolvePath>
                <saveItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.SaveItem.SaveItemProcessor.">
                </saveItem>
                <setBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.SetBlobStream.SetBlobStreamProcessor.">
                </setBlobStream>
            </pipelines>
        </group>
        <getFileIcon>
            <processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetIconFromSystemFileAssociation, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetIconFromMediaTypeConfiguration, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetIconFromItem, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetDefaultIcon, Sitecore.Kernel"/>
        </getFileIcon>
        <!-- Retrieves data to generate sign-in links for a particular site. -->
        <getSignInUrlInfo help="Processors should derive from Sitecore.Pipelines.GetSignInUrlInfo.GetSignInUrlInfoProcessor.">
        </getSignInUrlInfo>
        <!-- Retrieves a url to redirect a user after successful log in. -->
        <getStartUrl help="Processors should derive from Sitecore.Pipelines.GetStartUrlGetStartUrlProcessor.">
            <processor type="Sitecore.Pipelines.GetStartUrl.GetStartUrlFromQueryString, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.GetStartUrl.GetStartUrlFromUserProfile, Sitecore.Kernel" />
            <processor type="Sitecore.Pipelines.GetStartUrl.GetStartUrlFromSite, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetStartUrl.ValidateStartUrl, Sitecore.Kernel" resolve="true"/>
            <processor type="Sitecore.Pipelines.GetStartUrl.AppendClientLanguageParameter, Sitecore.Kernel" resolve="true"/>
        </getStartUrl>
    </pipelines>

    <!-- RETRYER
         When enabled, the Retryer resends failed database requests a specified number of times.
         For example, this is useful if you configure a Sitecore instance to support hot failover for database calls.
         Default value: disabled="true"
         Example transient retryer:
         <retryer disabled="false" type="Sitecore.Data.DataProviders.TransientRetryer, Sitecore.Kernel">
          <param desc="Log each exception (should be used for debug only)">true</param>
        </retryer>
    -->
    <retryer disabled="true" type="Sitecore.Data.DataProviders.Retryer, Sitecore.Kernel">
        <param desc="Number of tries">6</param>
        <param desc="Interval between tries">00:00:00.500</param>
        <param desc="Log each exception (should be used for debug only)">true</param>
    </retryer>

    <!-- List of data api implementations enabling access to SQL based databases. -->
    <dataApis>
        <!-- Data api for accessing SQL Server databases. -->
        <dataApi name="SqlServer" type="Sitecore.Data.SqlServer.SqlServerDataApi, Sitecore.Kernel">
            <param connectionStringName="$(1)"/>
        </dataApi>
    </dataApis>

    <!-- DATA PROVIDERS -->
    <dataProviders>
        <main type="Sitecore.Data.$(database).$(database)DataProvider, Sitecore.Kernel">
            <param connectionStringName="$(1)"/>
            <Name>$(1)</Name>
        </main>
        <filesystem type="Sitecore.Data.DataProviders.FileSystemDataProvider, Sitecore.Kernel">
            <CacheOptions.DisableAll>true</CacheOptions.DisableAll>
        </filesystem>
        <templatefile type="Sitecore.Data.DataProviders.TemplateFileResolver, Sitecore.Kernel">
            <param desc="template file">$(1)</param>
            <abortChain>true</abortChain>
        </templatefile>
        <methodGroups>
            <copyMove>
                <CopyItem/>
                <MoveItem/>
            </copyMove>
            <create>
                <AddVersion/>
                <CreateItem/>
            </create>
            <delete>
                <DeleteItem/>
                <RemoveVersion/>
                <RemoveVersions/>
            </delete>
            <properties>
                <GetProperty/>
                <RemoveProperty/>
                <SetProperty/>
            </properties>
            <publishing>
                <AddToPublishQueue/>
                <CleanupPublishQueue/>
                <GetPublishQueue/>
            </publishing>
            <query>
                <SelectIDs/>
                <SelectSingleID/>
            </query>
            <read>
                <BlobStreamExists/>
                <GetItemDefinition/>
                <GetItemFields/>
                <GetItemVersions/>
            </read>
            <relations>
                <GetChildIDs/>
                <GetParentID/>
                <GetRootID/>
                <HasChildren/>
            </relations>
            <resolve>
                <ResolvePath/>
            </resolve>
            <templates>
                <ChangeTemplate/>
                <GetTemplateItemIds/>
                <GetTemplates/>
            </templates>
            <update>
                <SaveItem/>
            </update>
            <workflow>
                <GetItemsInWorkflowState/>
                <GetWorkflowInfo/>
                <SetWorkflowInfo/>
            </workflow>
        </methodGroups>
    </dataProviders>
    <!-- DATA PROVIDERS -->
    <workflowHistoryStores>
        <main type="Sitecore.Data.$(database).$(database)HistoryStore, Sitecore.Kernel">
            <param connectionStringName="$(1)"/>
        </main>
    </workflowHistoryStores>
    <!-- DATABASES -->
    <databases>
        <!-- master -->
        <database id="master" singleInstance="true" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel" role:require="Standalone or Reporting or Processing or ContentManagement">
            <param desc="name">$(id)</param>
            <icon>Images/database_master.png</icon>
            <dataProviders hint="list:AddDataProvider">
                <dataProvider ref="dataProviders/main" param1="$(id)">
                    <prefetch hint="raw:AddPrefetch">
                        <sc.include file="/App_Config/Prefetch/Common.config" />
                        <sc.include file="/App_Config/Prefetch/Master.config" />
                    </prefetch>
                </dataProvider>
            </dataProviders>
            <securityEnabled>true</securityEnabled>
            <publishVirtualItems>true</publishVirtualItems>
            <PropertyStore ref="PropertyStoreProvider/store[@name='$(id)']" />
            <remoteEvents.EventQueue>
                <obj ref="eventing/eventQueueProvider/eventQueue[@name='$(id)']" />
            </remoteEvents.EventQueue>
            <workflowProvider hint="defer" type="Sitecore.Workflows.Simple.WorkflowProvider, Sitecore.Kernel">
                <param desc="database">$(id)</param>
                <param desc="history store" ref="workflowHistoryStores/main" param1="$(id)" />
            </workflowProvider>
            <archives hint="raw:AddArchive">
                <archive name="archive" />
                <archive name="recyclebin" />
            </archives>
            <NotificationProvider type="Sitecore.Data.DataProviders.$(database).$(database)NotificationProvider, Sitecore.Kernel">
                <param connectionStringName="$(id)">
                </param>
                <param desc="databaseName">$(id)</param>
            </NotificationProvider>
            <cacheSizes hint="setting">
                <data>100MB</data>
                <items>50MB</items>
                <paths>2500KB</paths>
                <itempaths>50MB</itempaths>
                <standardValues>2500KB</standardValues>
            </cacheSizes>
            <BlobStorage hint="raw:AddBlobStorage">
                <providers default="classic">
                    <provider name="classic" type="Sitecore.Data.Blobs.ClassicSqlBlobProvider, Sitecore.Kernel">
                        <param desc="databaseName">$(id)</param>
                    </provider>
                </providers>
            </BlobStorage>
        </database>
        <!-- web -->
        <database id="web" singleInstance="true" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel" role:require="Standalone or ContentManagement or ContentDelivery">
            <param desc="name">$(id)</param>
            <icon>Images/database_web.png</icon>
            <securityEnabled>true</securityEnabled>
            <dataProviders hint="list:AddDataProvider">
                <dataProvider ref="dataProviders/main" param1="$(id)">
                    <disableGroup>publishing</disableGroup>
                    <prefetch hint="raw:AddPrefetch">
                        <sc.include file="/App_Config/Prefetch/Common.config" />
                        <sc.include file="/App_Config/Prefetch/Webdb.config" />
                    </prefetch>
                </dataProvider>
            </dataProviders>
            <PropertyStore ref="PropertyStoreProvider/store[@name='$(id)']" />
            <remoteEvents.EventQueue>
                <obj ref="eventing/eventQueueProvider/eventQueue[@name='$(id)']" />
            </remoteEvents.EventQueue>
            <archives hint="raw:AddArchive">
                <archive name="archive" />
                <archive name="recyclebin" />
            </archives>
            <cacheSizes hint="setting">
                <data>100MB</data>
                <items>50MB</items>
                <paths>2500KB</paths>
                <itempaths>50MB</itempaths>
                <standardValues>2500KB</standardValues>
            </cacheSizes>
            <BlobStorage hint="raw:AddBlobStorage">
                <providers default="classic">
                    <provider name="classic" type="Sitecore.Data.Blobs.ClassicSqlBlobProvider, Sitecore.Kernel">
                        <param desc="databaseName">$(id)</param>
                    </provider>
                </providers>
            </BlobStorage>
        </database>
        <!-- file system -->
        <database id="filesystem" singleInstance="true" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel">
            <param desc="name">$(id)</param>
            <dataProviders hint="list:AddDataProvider">
                <dataProvider ref="dataProviders/filesystem" param1="$(id)" />
            </dataProviders>
            <readonly>true</readonly>
            <securityEnabled>false</securityEnabled>
            <cacheSizes hint="setting">
                <data>0</data>
                <items>0</items>
                <paths>0</paths>
                <standardValues>0</standardValues>
            </cacheSizes>
        </database>
    </databases>
    <!-- ARCHIVES -->
    <!--
      Define archive providers for databases
      IMPORTANT: If you wish to support multiple provides, you must configure SwitchingArchiveManager (see SwitchingManagers.config.example)
        Supported attributes:
          name:       A unique provider name
          type:       The provider type
          database:   Connects the provider with a specified database.
                      If the database attribute is missing or the value of this attribute is equal to "*"
                      then the provider will be used for all databases.
                      If we have more than one provider which is connected to the same database an exception will be thrown.
                      Examples of usages:
                      <add name="<unique_name>" type="<type>" database="core"/>
                      <add name="<unique_name>" type="<type>" database="web|master"/>
                      <add name="<unique_name>" type="<type>" database="*"/>
    -->
  <archives defaultProvider="sql" enabled="true">
    <providers>
      <clear/>
      <add name="sql" type="Sitecore.Data.Archiving.SqlArchiveProvider, Sitecore.Kernel" database="*"/>
    </providers>
  </archives>
  <search>
    <analyzer type="Lucene.Net.Analysis.Standard.StandardAnalyzer, Lucene.Net">
      <param hint="version">Lucene_30</param>
    </analyzer>
    <categorizer type="Sitecore.Pipelines.Search.CategorizeResults+Categorizer, Sitecore.Kernel">
      <Categories hint="raw:AddCategory">
        <category path="/sitecore/content"/>
        <category displayName="Images">
          <templateID>{F1828A2C-7E5D-4BBD-98CA-320474871548}</templateID>
          <templateID>{DAF085E8-602E-43A6-8299-038FF171349F}</templateID>
          <templateID>{C97BA923-8009-4858-BDD5-D8BE5FCCECF7}</templateID>
          <templateID>{EB3FB96C-D56B-4AC9-97F8-F07B24BB9BF7}</templateID>
        </category>
        <category displayName="Documents">
          <templateID>{16692733-9A61-45E6-B0D4-4C0C06F8DD3C}</templateID>
          <templateID>{777F0C76-D712-46EA-9F40-371ACDA18A1C}</templateID>
          <templateID>{7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}</templateID>
          <templateID>{0603F166-35B8-469F-8123-E8D87BEDC171}</templateID>
          <templateID>{3DB3A3CA-A0A9-4228-994B-F70C8E99A1CE}</templateID>
          <templateID>{2A130D0C-A2A9-4443-B418-917F857BF6C9}</templateID>
          <templateID>{F57FB07D-332A-4934-AA67-0A629C5396E2}</templateID>
          <templateID>{CC80011D-8EAE-4BFC-84F1-67ECD0223E9E}</templateID>
        </category>
        <category path="/sitecore/media library"/>
        <category path="/sitecore/layout/devices"/>
        <category path="/sitecore/layout/layouts"/>
        <category path="/sitecore/layout/sublayouts"/>
        <category path="/sitecore/layout/renderings"/>
        <category path="/sitecore/layout"/>
        <category templateIDs="{455A3E98-A627-4B40-8035-E683A0331AC7}" displayName="Template Fields"/>
        <category templateIDs="{E269FBB5-3750-427A-9149-7AA950B49301}" displayName="Template Sections"/>
        <category path="/sitecore/templates/branches"/>
        <category path="/sitecore/templates/system" displayName="System Templates"/>
        <category path="/sitecore/templates"/>
        <category path="/sitecore/system/aliases"/>
        <category path="/sitecore/system/languages"/>
        <category path="/sitecore/system/workflows"/>
        <category path="/sitecore/system"/>
      </Categories>
    </categorizer>
    <xpathquerytranslator type="Sitecore.Search.Queries.QueryToSearchTranslator, Sitecore.Kernel" singleInstance="true" />    
  </search>
  <!-- PRESENTATION -->
  <presentationManager defaultProvider="item" enabled="true">
    <providers>
      <clear/>
      <add name="item" type="Sitecore.Presentation.PresentationProvider, Sitecore.Kernel"/>
    </providers>
  </presentationManager>
  <!-- CONTROL -->
  <controlManager defaultProvider="default" enabled="true">
    <providers>
      <clear/>
      <add name="default" type="Sitecore.Presentation.ControlProvider, Sitecore.Kernel"/>
    </providers>
  </controlManager>
  <!-- PUBLIHING -->
  <publishManager defaultProvider="default" enabled="true">
    <providers>
      <clear/>
      <add name="default" type="Sitecore.Publishing.PipelinePublishProvider, Sitecore.Kernel"/>
    </providers>
  </publishManager>
  <!-- PREVIEW -->
  <previewManager defaultProvider="default" enabled="true">
    <providers>
      <clear/>
      <add name="default" type="Sitecore.Publishing.PreviewProvider, Sitecore.Kernel"/>
    </providers>
  </previewManager>
  <!-- CONFIG STORES -->
  <configStores>
    <add name="domains" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel" factoryMethod="LoadFromFile" arg0="/App_Config/Security/Domains.config"/>
    <add name="globalRoles" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel" factoryMethod="LoadFromFile" arg0="/App_Config/Security/GlobalRoles.config"/>
  </configStores>
  <!-- DOMAINS -->
  <itemManager defaultProvider="default">
    <providers>
      <clear/>
      <add name="default" type="Sitecore.Data.Managers.ItemProvider, Sitecore.Kernel" resolve="true"/>
    </providers>
  </itemManager>
  <!-- TEMPLATES -->
  <templateManager defaultProvider="default">
    <providers>
      <clear />
      <add name="default" type="Sitecore.Data.Managers.TemplateProvider, Sitecore.Kernel"/>
    </providers>
  </templateManager>    
  <!-- DOMAINS -->
  <domainManager defaultProvider="file">
    <providers>
      <clear/>
      <add name="file" type="Sitecore.Security.Domains.ConfigStoreDomainProvider, Sitecore.Kernel" configStoreName="domains"/>
      <add name="config" type="Sitecore.SecurityModel.ConfigDomainProvider, Sitecore.Kernel" domainList="domainManager/domains" defaultDomain="default"/>
    </providers>
    <!-- Sample for use with config provider above -->
    <domains>
      <domain id="sitecore" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <ensureAnonymousUser>false</ensureAnonymousUser>
      </domain>
      <domain id="extranet" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <ensureAnonymousUser>true</ensureAnonymousUser>
      </domain>
      <domain id="default" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <ensureAnonymousUser>true</ensureAnonymousUser>
        <isDefault>true</isDefault>
      </domain>
    </domains>
  </domainManager>
  <!-- SWITCHING PROVIDERS -->
  <switchingProviders>
    <membership>
      <provider providerName="sql" storeFullNames="true" wildcard="%" domains="*"/>
    </membership>
    <roleManager>
      <provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" ignoredUserDomains="" allowedUserDomains="" />
    </roleManager>
    <profile>
      <provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" ignoredDomains=""/>
    </profile>
  </switchingProviders>
  <!-- MEDIA PATH -->
  <mediaPath defaultProvider="default">
    <providers>
      <clear/>
      <add name="default" type="Sitecore.Resources.Media.MediaPathProvider, Sitecore.Kernel"/>
    </providers>
  </mediaPath>
  <!-- SITES -->
  <siteManager defaultProvider="sitecore">
    <providers>
      <clear/>
      <add name="sitecore" type="Sitecore.Sites.SitecoreSiteProvider, Sitecore.Kernel" checkSecurity="false">
        <providers hint="raw:AddProviderReference">
          <reference name="config"/>
        </providers>
      </add>
      <add name="config" type="Sitecore.Sites.ConfigSiteProvider, Sitecore.Kernel" siteList="sites" checkSecurity="false"/>
    </providers>
  </siteManager>

    <SACauthorization defaultProvider="server">
        <providers>
            <clear/>
            <add name="server" type="Sitecore.ApplicationCenter.ServerAuthorizationProvider, Sitecore.Kernel" />
        </providers>
    </SACauthorization>

    <!-- LINKS -->
    <linkManager defaultProvider="sitecore">
        <providers>
            <clear/>
            <add name="sitecore" type="Sitecore.Links.LinkProvider, Sitecore.Kernel" resolve="true" />
        </providers>
    </linkManager>

    <!-- URL BUILDERS -->
    <links>
        <urlBuilder>
            <alwaysIncludeServerUrl>false</alwaysIncludeServerUrl>
            <languageEmbedding>asNeeded</languageEmbedding>
            <languageLocation>filePath</languageLocation>
            <lowercaseUrls>false</lowercaseUrls>
            <encodeNames>true</encodeNames>
            <useDisplayName>false</useDisplayName>
        </urlBuilder>
        <!-- ITEM URL BUILDER
             Defines the url builder used for building items url.
             
             alwaysIncludeServerUrl :       Controls whether to always add the current server URL to generated URLs (DEFAULT: false)     
             languageEmbedding :            Controls when to embed the language name in generated URLs 
                                                OPTIONS: asNeeded | always | never (DEFAULT: asNeeded)
             languageLocation :             Controls where to embed the language name in generated URLs (DEFAULT: filePath)
                                                OPTIONS: filePath | queryString (DEFAULT: filePath)
             lowercaseUrls :                Controls whether to lowercase the generated URL (DEFAULT: false)
             encodeNames :                  Controls whether to encode the names making the generated URL (DEFAULT: true)
             useDisplayName :               Controls whether to use item display name (DEFAULT: false)
             addAspxExtension :             Controls whether to add '.aspx' extension to the generated URL (DEFAULT: false)
             siteResolving :                Controls whether to resolve site information while rendering item URL (DEFAULT: true)
             shortenUrls :                  Controls whether to shorten generated URLs (DEFAULT: true)
        -->
        <itemUrlBuilder type="Sitecore.Links.UrlBuilders.ItemUrlBuilder, Sitecore.Kernel">
            <param desc="defaultOptions" type="Sitecore.Links.UrlBuilders.DefaultItemUrlBuilderOptions, Sitecore.Kernel">
                <alwaysIncludeServerUrl ref="links/urlBuilder/alwaysIncludeServerUrl" />
                <languageEmbedding ref="links/urlBuilder/languageEmbedding" />
                <languageLocation ref="links/urlBuilder/languageLocation" />
                <lowercaseUrls ref="links/urlBuilder/lowercaseUrls" />
                <encodeNames ref="links/urlBuilder/encodeNames" />
                <useDisplayName ref="links/urlBuilder/useDisplayName" />
                <addAspxExtension>false</addAspxExtension>
                <siteResolving>true</siteResolving>
                <shortenUrls>true</shortenUrls>
            </param>
        </itemUrlBuilder>
        <!-- MEDIA URL BUILDER
             Defines the url builder used for building media items url.
             
             alwaysIncludeServerUrl :       Controls whether to always add the current server URL to generated URLs (DEFAULT: false).     
             languageEmbedding :            Controls when to embed the language name in generated URLs (DEFAULT: asNeeded).
             languageLocation :             Controls where to embed the language name in generated URLs (DEFAULT: filePath).
             lowercaseUrls :                Controls whether to lowercase the generated URL (DEFAULT: false).
             encodeNames :                  Controls whether to encode the names making the generated URL (DEFAULT: true).
             useDisplayName :               Controls whether to use item display name (DEFAULT: false).
             absolutePath :                 Controls whether to render media links as absolute (DEFAULT: false).
             includeExtension :             Controls whether to include media extension in generated URL (DEFAULT: true).
        -->
        <mediaUrlBuilder type="Sitecore.Links.UrlBuilders.MediaUrlBuilder, Sitecore.Kernel">
            <param desc="defaultOptions" type="Sitecore.Links.UrlBuilders.DefaultMediaUrlBuilderOptions, Sitecore.Kernel">
                <alwaysIncludeServerUrl ref="links/urlBuilder/alwaysIncludeServerUrl" />
                <languageEmbedding ref="links/urlBuilder/languageEmbedding" />
                <languageLocation ref="links/urlBuilder/languageLocation" />
                <lowercaseUrls ref="links/urlBuilder/lowercaseUrls" />
                <encodeNames ref="links/urlBuilder/encodeNames" />
                <useDisplayName ref="links/urlBuilder/useDisplayName" />
                <absolutePath>true</absolutePath>
                <includeExtension>true</includeExtension>
            </param>
            <param desc="mediaLinkPrefix">$(1)</param>
        </mediaUrlBuilder>
    </links>
    <!-- STANDARD VALUES -->
    <standardValues defaultProvider="sitecore">
        <providers>
            <clear/>
            <add name="sitecore" type="Sitecore.Data.StandardValuesProvider, Sitecore.Kernel" resolve="true"/>
        </providers>
    </standardValues>
    <!-- FIELD TYPES -->
    <!-- Defines the releation between a field type name, e.g. "lookup", and an implementation class -->
    <fieldTypes>
        <sc.include file="/App_Config/FieldTypes.config"/>
    </fieldTypes>
    <!-- HOOKS -->
    <hooks>
        <hook type="Sitecore.Diagnostics.HealthMonitorHook, Sitecore.Kernel"/>
        <hook type="Sitecore.Diagnostics.MemoryMonitorHook, Sitecore.Kernel">
            <param desc="Threshold">2GB</param>
            <param desc="Check interval">00:00:05</param>
            <param desc="Minimum time between log entries">00:01:00</param>
            <ClearCaches>false</ClearCaches>
            <GarbageCollect>false</GarbageCollect>
            <AdjustLoadFactor>false</AdjustLoadFactor>
        </hook>
    </hooks>
    <!-- SCHEDULING -->
    <scheduling>
        <!-- Time between checking for scheduled tasks waiting to execute -->
        <frequency>00:00:05</frequency>
        <!-- Agent to retrieve a URL -->
        <agent type="Sitecore.Tasks.UrlAgent" method="Run" interval="00:15:00">
            <param desc="url">/sitecore/service/keepalive.aspx</param>
            <LogActivity>true</LogActivity>
        </agent>
        <!-- Agent to process tasks from the task database (TaskDatabase) -->
        <agent type="Sitecore.Tasks.TaskDatabaseAgent" method="Run" interval="00:10:00" />
        <!-- Agent to clean up client data -->
        <agent type="Sitecore.Tasks.CompactClientDataAgent" method="Run" interval="04:00:00" />
        <!-- Agent to clean up publishing queue -->
        <agent type="Sitecore.Tasks.CleanupPublishQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
            <DaysToKeep>30</DaysToKeep>
        </agent>
        <!-- Agent that cleans up the event queue.
          The length of time that the EventQueue information should be kept.
          If both options are specified, IntervalToKeep is used.
          Supported options:
          DaysToKeep = The number of days that the EventQueue information should be kept. Example:<DaysToKeep>1</DaysToKeep>
          IntervalToKeep = The time in hh:mm:ss that the EventQueue information should be kept. Example: <IntervalToKeep>04:00:00</IntervalToKeep>
        -->
        <agent type="Sitecore.Tasks.CleanupEventQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
            <DaysToKeep>1</DaysToKeep>
        </agent>
        <!-- Agent to clear the HTML cache periodically -->
        <agent type="Sitecore.Tasks.HtmlCacheClearAgent" method="Run" interval="00:00:00" />
        <agent type="Sitecore.Tasks.HtmlCacheClearAgent" role:require="ContentManagement">
            <patch:attribute name="interval">00:05:00</patch:attribute>
        </agent>
        <!-- Agent to remove expired Client authentication tickets  -->
        <agent type="Sitecore.Tasks.CleanupAuthenticationTicketsAgent" method="Run" interval="04:00:00" role:require="Standalone or ContentManagement or ContentDelivery" />
        <!-- Agent to publish database periodically -->
        <agent type="Sitecore.Tasks.PublishAgent" method="Run" interval="00:00:00" role:require="Standalone or Reporting or ContentManagement">
            <param desc="source database">master</param>
            <param desc="target database">web</param>
            <param desc="mode (full or smart or incremental)">incremental</param>
            <param desc="languages">en, da</param>
        </agent>
        <!-- Agent to clean up work files -->
        <agent type="Sitecore.Tasks.CleanupAgent" method="Run" interval="06:00:00">
            <!-- Specifies files to be cleaned up.
              If rolling="true", [minCount] and [maxCount] will be ignored.
              [minAge] and [maxAge] must be specified as [days.]hh:mm:ss. The default value
              of [minAge] is 30 minutes.
              [strategy]: number of files within hour, day, week, month, year
              [recursive=true|false]: descend folders?
          -->
            <files hint="raw:AddCommand">
                <remove folder="$(dataFolder)/logs" pattern="*log.*.txt" maxAge="30.00:00:00" />
                <remove folder="$(dataFolder)/diagnostics" pattern="*.*" maxAge="30.00:00:00" recursive="true" />
                <remove folder="$(dataFolder)/viewstate" pattern="*.txt" maxAge="2.00:00:00" recursive="true" />
                <remove folder="$(tempFolder)/diagnostics" pattern="*.*" maxAge="00:10:00" recursive="true" />
                <remove folder="/App_Data/MediaCache" pattern="*.*" maxAge="90.00:00:00" recursive="true" />
            </files>
        </agent>
        <!-- Agent to dump performance counter data -->
        <agent type="Sitecore.Tasks.CounterDumpAgent" method="Run" interval="01:00:00">
            <DumpFile>$(dataFolder)/diagnostics/counters/counters.{date}.{time}.{processid}.txt</DumpFile>
        </agent>
        <agent type="Sitecore.Tasks.CloneNotificationsCleanupAgent" method="Run" interval="1.00:00:00">
            <LogActivity>true</LogActivity>
        </agent>
    </scheduling>
    <!-- PROCESSORS
         Classes must have parameterless constructor.
         Supported attributes:
           mode=[on|off]
           type=name of class (case-sensitive).
           namespace=namespace containing class. If no namespace is included, it is assumed that the namespace is the same as the assembly name.
           assembly=name of dll containing the class (case-sensitive)
    -->
    <processors>
        <dispatch>
            <!-- This pipeline has been deprecated - try using the CommandManager object instead -->
        </dispatch>
        <attachFile argsType="Sitecore.Pipelines.Attach.AttachArgs">
            <processor mode="on" type="Sitecore.Pipelines.Attach.CheckSize,Sitecore.Kernel" resolve="true"/>
            <processor mode="on" type="Sitecore.Pipelines.Attach.UpdatePath,Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Attach.Save,Sitecore.Kernel"/>
        </attachFile>
        <uiAddFromTemplate>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.AddFromTemplate,Sitecore.Kernel" method="GetTemplate"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.AddFromTemplate,Sitecore.Kernel" method="Execute"/>
        </uiAddFromTemplate>
        <uiArchiveItems>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="Confirm"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckTemplateLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckCloneLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckLanguage"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="UncloneItems"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="Execute"/>
        </uiArchiveItems>
        <closeWizard>
            <processor mode="on" type="Sitecore.Web.UI.Pages.WizardForm, Sitecore.Kernel" method="Confirmation"/>
        </closeWizard>
        <uiCopyItems>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="GetDestination"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="CheckDestination"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="CheckLanguage"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="Execute"/>
        </uiCopyItems>
        <uiCloneItems>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="GetDestination"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="CheckDestination"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="CheckLanguage"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="Execute"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="RelinkClonedSubtree"/>
        </uiCloneItems>
        <uiDeleteFiles>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteFiles,Sitecore.Kernel" method="Confirm"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteFiles,Sitecore.Kernel" method="Execute"/>
        </uiDeleteFiles>
        <uiDeleteItems>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="Confirm"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckTemplateLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckCloneLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckLanguage"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="UncloneItems"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="Execute"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="PostAction"/>
        </uiDeleteItems>
        <uiRemoveLanguage>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RemoveLanguage,Sitecore.Kernel" method="Confirm"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RemoveLanguage,Sitecore.Kernel" method="CheckCloneItems"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RemoveLanguage,Sitecore.Kernel" method="Execute"/>
        </uiRemoveLanguage>
        <deleteVersionsUI>
            <processor mode="on" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="Confirmation"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="CheckReferrers"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="DeleteVersions"/>
        </deleteVersionsUI>
        <uiDragItemTo>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="Confirm"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckLanguage"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="Execute"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="RepairLinks"/>
        </uiDragItemTo>
        <uiDuplicateItem>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="GetName"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="Execute"/>
        </uiDuplicateItem>
        <uiLaunchSearchResult argsType="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult.LaunchSearchResultArgs">
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="ShowModalDialog"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="SetLocation"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="SendMessage"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="OpenItem"/>
        </uiLaunchSearchResult>
        <uiMoveItems>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="GetDestination"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="Execute"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="RepairLinks"/>
        </uiMoveItems>
        <uiNewFolderItem>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="GetName"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="Execute"/>
        </uiNewFolderItem>
        <uiNewFileFolder>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFileFolder,Sitecore.Kernel" method="GetName"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFileFolder,Sitecore.Kernel" method="Execute"/>
        </uiNewFileFolder>
        <uiRenameItem>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="GetNewName"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="Execute"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="RepairLinks"/>
        </uiRenameItem>
        <uiRenamePage>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckPermissions"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="GetNewName"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckLinks"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="Execute"/>
            <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="RepairLinks"/>
        </uiRenamePage>
        <deleteVersions>
            <processor mode="on" type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="CheckFirstVersion"/>
            <processor mode="on" type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="Confirmation"/>
            <processor mode="on" type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="DeleteVersions"/>
        </deleteVersions>
        <getItemCommands>
            <processor mode="on" type="Sitecore.Pipelines.GetItemCommands.StaticCommands, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.GetItemCommands.ShellCommands, Sitecore.Kernel"/>
        </getItemCommands>
        <uiGetMasters argsType="Sitecore.Pipelines.GetMasters.GetMastersArgs">
            <processor mode="on" type="Sitecore.Pipelines.GetMasters.GetItemMasters,Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.GetMasters.GetInsertRules, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.GetMasters.RunRules, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.GetMasters.CheckSecurity, Sitecore.Kernel"/>
        </uiGetMasters>
        <!-- Obsolete: use loadRichTextContent-->
        <uiLoadHtml argsType="Sitecore.Pipelines.LoadHtml.LoadHtmlArgs">
        </uiLoadHtml>
        <uiLoadLayout argsType="Sitecore.Pipelines.LoadLayout.LoadLayoutArgs">
            <processor mode="on" type="Sitecore.Pipelines.LoadLayout.Load, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.LoadLayout.Parse, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.LoadLayout.ConvertToDesignTime, Sitecore.Kernel"/>
        </uiLoadLayout>
        <!-- Obsolete - use LoggedIn or LoggingIn pipelines -->
        <login argsType="Sitecore.Pipelines.Login.LoginArgs">
        </login>
        <loggedin argsType="Sitecore.Pipelines.LoggedIn.LoggedInArgs">
            <processor mode="on" type="Sitecore.Pipelines.LoggedIn.Ticket, Sitecore.Kernel" resolve="true" />
            <processor mode="on" type="Sitecore.Pipelines.LoggedIn.CleanupUserProfile, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.LoggedIn.SetPreferedClientLanguage, Sitecore.Kernel" resolve="true"/>
        </loggedin>
        <loggingin argsType="Sitecore.Pipelines.LoggingIn.LoggingInArgs">
            <processor mode="on" type="Sitecore.Pipelines.LoggingIn.ClearCache, Sitecore.Kernel" resolve="true"/>
            <processor mode="on" type="Sitecore.Pipelines.LoggingIn.CheckClientUser, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.LoggingIn.CheckStartUrl, Sitecore.Kernel" resolve="true"/>
        </loggingin>
        <logout argsType="Sitecore.Pipelines.Logout.LogoutArgs">
            <processor mode="on" type="Sitecore.Pipelines.Logout.ClearCache, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Logout.CheckModified, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Logout.ClearSession, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Logout.RemoveTicket, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Logout.GotoLogin, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Logout.ClearDisplayMode, Sitecore.Kernel" resolve="true"/>
        </logout>
        <passwordRecovery argsType="Sitecore.Pipelines.PasswordRecovery.PasswordRecoveryArgs">
            <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.VerifyUsername, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.GeneratePassword, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.PopulateMail, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.SendPasswordRecoveryMail, Sitecore.Kernel"/>
        </passwordRecovery>
        <saveUI>
            <processor mode="on" type="Sitecore.Pipelines.Save.BeforeSaveEvent, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.ParseXml, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckItemLock, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckCloneSource, Sitecore.Kernel" resolve="true"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckRevision, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.Validators, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.ValidateFields, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.HasWritePermission, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.NewVersion, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.TightenRelativeImageLinks, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckLock, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.Lock, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckBaseTemplateFieldChange, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckTemplateFieldChange, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.ConvertLayoutField, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.CheckLinks, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.Save, Sitecore.Kernel" resolve="true"/>
            <processor mode="off" type="Sitecore.Pipelines.Save.RenderingHack, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.Unlock, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.WorkflowSaveCommand, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Save.PostAction, Sitecore.Kernel"/>
        </saveUI>
        <!-- Obsolete: use saveRichTextContent-->
        <uiSaveHtml>
        </uiSaveHtml>
        <uiSaveLayout>
            <processor mode="on" type="Sitecore.Pipelines.SaveLayout.NewFile, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.SaveLayout.Overwrite, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.SaveLayout.ConvertToRuntime, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.SaveLayout.ConvertToXHtml, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.SaveLayout.Save, Sitecore.Kernel"/>
        </uiSaveLayout>
        <uiReturnFieldEditorValues>
            <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.Validate"/>
            <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.RegexValidate"/>
            <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.SetValues"/>
            <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.ReturnAndClose"/>
        </uiReturnFieldEditorValues>
        <uiUpload>
            <processor mode="on" type="Sitecore.Pipelines.Upload.CheckPermissions, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Upload.CheckSize, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Upload.ResolveFolder, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Upload.Save, Sitecore.Kernel"/>
            <processor mode="on" type="Sitecore.Pipelines.Upload.Done, Sitecore.Kernel"/>
        </uiUpload>
    </processors>
    <!-- Factory classes must implement public CreateControl() method that returns a Control -->
    <renderingControls>
        <control template="method rendering" type="Sitecore.Web.UI.WebControls.Method, Sitecore.Kernel" propertyMap="AssemblyName=assembly, ClassName=class, MethodName=method"/>
        <control template="sublayout" type="Sitecore.Web.UI.SublayoutRenderingType, Sitecore.Kernel" propertyMap="Path=path"/>
        <control template="url rendering" type="Sitecore.Web.UI.WebControls.WebPage, Sitecore.Kernel" propertyMap="Url=url"/>
        <control template="xsl rendering" type="Sitecore.Web.UI.XslControlRenderingType, Sitecore.Kernel" propertyMap="Path=path"/>
        <control template="webcontrol" type="Sitecore.Web.UI.WebControlRenderingType, Sitecore.Kernel" propertyMap="assembly=assembly, namespace=namespace, class=tag, properties=parameters"/>
        <control template="xmlcontrol" type="Sitecore.Web.UI.XmlControlRenderingType, Sitecore.Kernel" propertyMap="controlName=control name, properties=parameters"/>
    </renderingControls>
    <dataviews>
        <dataview name="Master" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.MasterDataView" Parameters=""/>
        <dataview name="RecycleBin" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.RecycleBinDataView" Parameters=""/>
        <dataview name="FileSystem" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.FileSystemDataView" Parameters=""/>
        <dataview name="Domain" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.DomainDataView" Parameters=""/>
        <dataview name="FilterDataView" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.FilterDataView" Parameters=""/>
    </dataviews>
    <!-- PAGE EXTENDERS
      Page Extenders allows additional controls to be added to every page. The Debugger, Preview and WebEdit
      are examples of this.
    -->
    <pageextenders>
    </pageextenders>
    <!-- XSL EXTENSION OBJECTS
         Classes must have parameterless constructor. If initialization is needed,
         the class may implement the interface IXslExtension.
         Supported attributes:

             mode=[on|off]
             type=full namespace of class (case-sensitive)
             namespace=unique namespace used when mapping the object into the xsl

         All other attributes will be passed to the object during initialization (assuming
         that the class implements IXslExtension)
    -->
    <xslExtensions>
        <extension mode="on" type="Sitecore.Xml.Xsl.XslHelper, Sitecore.Kernel" namespace="http://www.sitecore.net/sc" singleInstance="true"/>
        <extension mode="on" type="Sitecore.MainUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/util" singleInstance="true"/>
        <extension mode="on" type="Sitecore.DateUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/dateutil" singleInstance="true"/>
        <extension mode="on" type="Sitecore.Xml.Xsl.SqlHelper, Sitecore.Kernel" namespace="http://www.sitecore.net/sql" singleInstance="true"/>
        <extension mode="on" type="Sitecore.StringUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/stringutil" singleInstance="true"/>
    </xslExtensions>
    <!-- XSL CONTROLS
         Classes must implement the interface IXslControl.
         Supported attributes:

             mode=[on|off]
             tag=control tag (ex. 'sc:text'). Can be '*' which matches all unhandled tags. Case sensitive.
             tagPrefix=unique control tag prefix (ex. 'sc'). Only used if 'tag' is not set. Case sensitive.
             type=full namespace of class. Case-sensitive.
             assembly=name of dll containing the class. Case-sensitive.

         All other attributes will be passed to the object during initialization
    -->
    <xslControls>
        <control mode="on" tag="sc:date" type="Sitecore.Web.UI.XslControls.Date" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:dot" type="Sitecore.Web.UI.XslControls.ContentDot" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:html" type="Sitecore.Web.UI.XslControls.Html" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:image" type="Sitecore.Web.UI.XslControls.Image" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:link" type="Sitecore.Web.UI.XslControls.Link" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:memo" type="Sitecore.Web.UI.XslControls.Memo" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:sec" type="Sitecore.Web.UI.XslControls.Security" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:text" type="Sitecore.Web.UI.XslControls.Text" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:wordstyle" type="Sitecore.Web.UI.XslControls.WordStyle" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:enableSecurity" type="Sitecore.Web.UI.XslControls.EnableSecurity" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:disableSecurity" type="Sitecore.Web.UI.XslControls.DisableSecurity" assembly="Sitecore.Kernel"/>
        <control mode="on" tag="sc:editFrame" type="Sitecore.Web.UI.XslControls.EditFrame" assembly="Sitecore.Kernel"/>
    </xslControls>
    <!-- CONTROL SOURCES
         Supported attributes:

             mode=[on|off]

             Assembly based controls:
             assembly=name of dll containing the controls.
             namespace=namespace of controls
             prefix=prefix used when specifying controls from the assembly

             Xml controls:
             folder=name of folder containing xml control files
             prefix=prefix used when specifying controls from the folder

         All other attributes will be passed to the control factory during initialization
    -->
    <controlSources>
        <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore/shell/override" deep="true"/>
        <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/layouts" deep="false"/>
        <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore/shell/controls" deep="true"/>
        <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore/shell/applications" deep="true"/>
        <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore modules" deep="true"/>
        <source mode="on" namespace="Sitecore.Web.UI.HtmlControls" assembly="Sitecore.Kernel"/>
        <source mode="on" namespace="Sitecore.Web.UI.WebControls" assembly="Sitecore.Kernel"/>
        <source mode="on" namespace="Sitecore.Shell.Web.UI.WebControls" assembly="Sitecore.Kernel" prefix="shell"/>
        <source mode="on" namespace="Sitecore.Shell.Applications.ContentEditor" assembly="Sitecore.Kernel" prefix="content"/>
        <source mode="on" namespace="Sitecore.Shell.Web.Applications.ContentEditor" assembly="Sitecore.Kernel" prefix="shell"/>
        <source mode="on" namespace="Sitecore.WebControls" assembly="Sitecore.Kernel"/>
        <source mode="on" namespace="System.Web.UI.WebControls" assembly="System.Web" prefix="asp"/>
        <source mode="on" namespace="System.Web.UI.HtmlControls" assembly="System.Web" prefix="html"/>
        <source mode="on" namespace="Sitecore.Web.UI.Portal" assembly="Sitecore.Kernel"/>
        <source mode="on" namespace="ComponentArt.Web.UI" assembly="ComponentArt.Web.UI" prefix="ca"/>
    </controlSources>
    <!-- UI -->
    <ui>
        <usings>
            <using>System</using>
            <using>System.Collections</using>
            <using>System.Reflection</using>
            <using>System.Runtime.CompilerServices</using>
            <using>System.Web.UI</using>
            <using>System.Web.UI.HtmlControls</using>
            <using>System.Web.UI.WebControls</using>
            <using>Sitecore</using>
            <using>Sitecore.Configuration</using>
            <using>Sitecore.Data</using>
            <using>Sitecore.Data.Fields</using>
            <using>Sitecore.Data.Items</using>
            <using>Sitecore.Diagnostics</using>
            <using>Sitecore.Reflection</using>
            <using>Sitecore.Globalization</using>
            <using>Sitecore.Sites</using>
            <using>Sitecore.Web.UI</using>
            <using>Sitecore.Web.UI.HtmlControls</using>
            <using>Sitecore.Shell.Web.UI.WebControls</using>
            <using>Sitecore.Web.UI.WebControls</using>
            <using>Sitecore.Xml</using>
        </usings>
        <references>
            <reference>System.dll</reference>
            <reference>System.Data.dll</reference>
            <reference>System.Web.dll</reference>
            <reference>System.Web.Services.dll</reference>
            <reference>System.Xml.dll</reference>
            <reference>/bin/Sitecore.Kernel.dll</reference>
            <reference>/bin/Sitecore.Client.dll</reference>
        </references>
        <forms>
            <controls assembly="Sitecore.Kernel"/>
        </forms>
    </ui>
    <!-- XamlSharp -->
    <xamlsharp>
        <sc.include file="/App_Config/XamlSharp.config"/>
    </xamlsharp>
    <!-- Language Definitions -->
    <languageDefinitions>
        <sc.include file="/App_Config/LanguageDefinitions.config"/>
    </languageDefinitions>
    <!-- CLIENT SCRIPTS
           These script files are included in the client, e.g. '<script src="/myscript.js" language="JavaScript"/>'
    -->
    <clientscripts>
        <everypage/>
        <htmleditor/>
    </clientscripts>
    <!-- REPLACEMENTS
         Specifies text replacements
         The special replacement with id="publish" is used automatically when publishing
         If mode="off" the replacer will be ignored
    -->
    <replacers>
        <replacer mode="off" id="publish" type="Sitecore.Text.Replacer, Sitecore.Kernel" singleInstance="true">
            <param desc="name">$(id)</param>
            <replacements hint="raw:AddReplacement">
                <regex find="Test[12]" replaceWith="Test" simpleTest="Test" ignoreCase="true" forPublish="true"/>
                <simple find="Text" replaceWith="NewText" ignoreCase="false" forPublish="true"/>
            </replacements>
        </replacer>
    </replacers>
    <!-- ENCODE NAME REPLACEMENTS
           Specifies text replacements to use when encoding special chars in friendly urls
    -->
    <encodeNameReplacements>
        <replace mode="on" find="&amp;" replaceWith=",-a-,"/>
        <replace mode="on" find="?" replaceWith=",-q-,"/>
        <replace mode="on" find="/" replaceWith=",-s-,"/>
        <replace mode="on" find="*" replaceWith=",-w-,"/>
        <replace mode="on" find="." replaceWith=",-d-,"/>
        <replace mode="on" find=":" replaceWith=",-c-,"/>
        <replace mode="on" find=" " replaceWith="-" />
    </encodeNameReplacements>
    <!--  SITES
          Enable different web sites for different domains in the same Sitecore structure
          Supported attributes:

              mode: [on|off]. If set to 'off', the site will be disabled. Default value: 'on'.

              name: Name of the site.

              hostName: The host name of the incoming url. May include wildcards (ex. www.site.net, *.site.net, *.net, pda.*, print.*.net)
                        It's possible to set more than one mask by using '|' symbol as a separator (ex. pda.*|print.*.net)

              targetHostName: The host name to use when generating URLs to items within this site from the context of another site.
                              If the targetHostName attribute is absent, Sitecore uses the value of the hostName attribute instead.
                              Used only when the value of the Rendering.SiteResolving setting is true.

              port: The port number of the incoming url. Default value: 80
              
              externalPort: The port number that is used to generate links that can access the site from outside the network when the site is behind NAT.

              virtualFolder: The prefix to match for incoming URL's.
                             This value will be removed from the URL and the remainder will be treated as the item path.

              physicalFolder: The physical location of files for the site.
                              If the site is based on physical files, this is the path to the folder holding the files.
                              For non-physical sites, this is the place where Sitecore looks for a default.aspx file (to start the pipelines).

              rootPath: The path to the root item of the site.
                        The item path specified in the URL will be appended to this value to find the item.

              startItem: The path to the start item of the site.
                         This is used as the default item path if no path is specified in the URL.
                         It will be combined with rootPath to find the default item of the site.

              language: Default language for the site.

              database: Database containing items to be used for rendering the site.
              content: Database containing items to be edited.
              contentLanguage: The default editing language in the client.
              contentStartItem: The path to the start item when using the client.

              masterDatabase: The database containing the data to be shown in preview and web edit modes.

              device: The name of the device to use for the site. If not specified, the device resolver will find a 'best match device'.

              filterItems: If true, the site will always show the current version of an item (without publishing)
              filteredItemsCacheSize: The size of the cache used to store filtered items. Specify the value in bytes or append the value with KB, MB or GB

              cacheHtml: If true, HTML caching will be enabled. If false, no HTML will be cached for any rendering. Default value: false.
              htmlCacheSize: The size of the html cache. Specify the value in bytes or append the value with KB, MB or GB

              cacheMedia: If true, media caching will be enabled. If false, no media will be cached. Default value: true.
              mediaCachePath: The path to the folder where media data will be cached. Default value: {temp folder}/{site name}/mediacache.

              cacheRenderingParameters: Specifies whether the RenderingItem Parameters cache should be enabled.
                                       If false, caching is disabled and the value of the Parameters property of the RenderingItem object is recalculated every time it is accessed.
                                       To improve the performance of page rendering on content delivery servers, you should enable caching of the Parameters value.
                                       We recommend that you disable RenderingItem Parameters caching on content management servers.
                                       Default value: false
              renderingParametersCacheSize: The size of the RenderingItem Parameters cache. Specify the value in bytes or append the value with KB, MB or GB.

              domain: The security domain of the site.
              requireLogin: If true, login will be required to enter the site.
              loginPage: The path to the login page to use. Must point to a physical file or a page in a site that does NOT require login.

              enableDebugger: Indicates if the debugger is enabled on the site. Typically this is only the website.
              enablePreview: Indicates if preview is enabled on the site. Typically this is only the website.
              enableWebEdit: Indicates if WebEdit is enabled on the site. Typically this is only the website.
              enableWorkflow: Must be true to enable workflows for the site.
              enableTracking: Determines whether website tracking is enabled or not. 

              enforceVersionPresence: If set to true, '404 Not Found' error page will be shown if a context item does not have a requested version.
                                      Default value: false.

              allowDebug: Must be true to be able to debug the site.

              browserTitle: The title of the browser window when browsing the site.

              disableBrowserCaching: If set to true, browser caching is disabled for the site. If set to false, browser caching is enabled for the site. If absent,
                                     the value of the DisableBrowserCaching setting in the <settings> section determines browser caching for the site.

              disableClientData: If set to true, the use of ClientDataStore will be disabled for the site.

              disableXmlControls: If set to true, loading Xml Controls as pages will be disabled.

              defaultDevice: The device to use if no specific device matches the request. This setting takes precedence over the default
              device as it is set by Default checkbox for Device item.
              
              dictionaryDomain: The default domain to use when looking up dictionary phrases for the website. If a phrase does not exist in
                                this dictionary domain, Sitecore attempts to locate that phrase in the default dictionary domain - 
                                /sitecore/system/Dictionary in the current database. If the phrase cannot be found in the default dictionary
                                domain, Sitecore attempts to locate that phrase in the default dictionary domain in the Core database, if that
                                database exists.
                                You can override the site-specific dictionary domain by passing parameters to the Translate.Text() method.

              inherits: Indicates that the attributes should be inherited from another site. To enable inheritance, you must specify the name of the source site.
                        Attributes that are explicitly specified overwrite the attributes that are inherited from the source site.
                        
              analyticsDefinitions: The database where the Analytics definition items for this site are stored. To use the content database for the site, specify "content". 
                                    If this attribute is not specified, the current context database is used. If the context database is not set, for example, for code 
                                    that runs in a background job, the value of the DefaultDefinitionDatabase setting in the Sitecore.Analytics.config file is used. 
             previewUnpublishableItems: Allows users to preview items that cannot be published yet. Default value: false.
             disableTrailingWildcard: Disables the use of trailing wildcards when resolving the name of a website.
                                      For example, when set to true, 'test.com' is not be matched to '*test.c'. Default value: false.
    -->
    <sites>
        <site name="admin" virtualFolder="/sitecore/admin" physicalFolder="/sitecore/admin" enableTracking="false" enableWorkflow="true" domain="sitecore" loginPage="/sitecore/admin/login.aspx" />
        <site name="service" enableTracking="true" virtualFolder="/sitecore/service" physicalFolder="/sitecore/service" />
        <site name="modules_website" virtualFolder="/sitecore modules/web" physicalFolder="/sitecore modules/web" rootPath="/sitecore/content" startItem="/home" language="en" database="web" domain="extranet" allowDebug="true" cacheHtml="true" role:require="Standalone or ContentManagement or ContentDelivery" />
        <site name="website" enableTracking="true" virtualFolder="/" physicalFolder="/" rootPath="/sitecore/content" startItem="/home" language="en" database="web" domain="extranet" allowDebug="true" cacheHtml="true" htmlCacheSize="50MB" registryCacheSize="0" viewStateCacheSize="0" xslCacheSize="25MB" filteredItemsCacheSize="10MB" enablePreview="true" enableWebEdit="true" enableDebugger="true" disableClientData="false" cacheRenderingParameters="true" renderingParametersCacheSize="10MB" enableItemLanguageFallback="false" enableFieldLanguageFallback="false" role:require="Standalone or ContentManagement or ContentDelivery" />
        <site name="scheduler" enableTracking="false" domain="sitecore" />
        <site name="system" enableTracking="false" domain="sitecore" />
        <site name="publisher" domain="sitecore" enableTracking="false" enableWorkflow="true" />
    </sites>
    <!-- CACHE SIZES -->
    <cacheSizes>
        <sites>
            <website>
                <html>50MB</html>
                <registry>0</registry>
                <viewState>0</viewState>
                <xsl>25MB</xsl>
            </website>
        </sites>
    </cacheSizes>
    <!-- MEDIA -->
    <mediaLibrary>
        <!-- MEDIA PROVIDER
         The media provider used to generate URLs, create media items, control media caching, parse media requests, and other
         media related functionality.      
      -->
        <mediaProvider type="Sitecore.Resources.Media.MediaProvider, Sitecore.Kernel" />
        <!-- MEDIA REQUEST PREFIXES
           Allows you to configure additional media prefixes (in addition to the prefix defined by the Media.MediaLinkPrefix setting)
           The prefixes are used by Sitecore to recognize media URLs.
           Notice: For each custom media prefix, you must also add a corresponding entry to the <customHandlers> section
      -->
        <mediaPrefixes>
            <prefix value="~/media"/>
        </mediaPrefixes>
        <requestParser type="Sitecore.Resources.Media.MediaRequest, Sitecore.Kernel"/>
        <mediaTypes>
            <mediaType name="Any" extensions="*">
                <mimeType>application/octet-stream</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/file</sharedTemplate>
                <versionedTemplate>system/media/versioned/file</versionedTemplate>
                <metaDataFormatter type="Sitecore.Resources.Media.MediaMetaDataFormatter"/>
                <mediaValidator type="Sitecore.Resources.Media.MediaValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.MediaThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                        <filePath>/sitecore/shell/themes/Standard/Applications/32x32/Document.png</filePath>
                    </generator>
                    <width>150</width>
                    <height>150</height>
                    <backgroundColor>#FFFFFF</backgroundColor>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.Media, Sitecore.Kernel"/>
                    <mediaData type="Sitecore.Resources.Media.MediaData, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="AVI video" extensions="avi">
                <mimeType>video/x-msvideo</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
                <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
            </mediaType>
            <mediaType name="Windows Bitmap image" extensions="bmp, dib">
                <mimeType>image/bmp</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/image</sharedTemplate>
                <versionedTemplate>system/media/versioned/image</versionedTemplate>
                <mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                    </generator>
                    <width>150</width>
                    <height>150</height>
                    <backgroundColor>#FFFFFF</backgroundColor>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="Flash" extensions="swf">
                <mimeType>application/x-shockwave-flash</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Flash</sharedTemplate>
                <versionedTemplate>system/media/versioned/Flash</versionedTemplate>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.MediaThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                    </generator>
                    <staticFile>/sitecore/shell/Themes/standard/images/flash.png</staticFile>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.SwfMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="Flash video" extensions="flv">
                <mimeType>video/x-flv</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
                <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
            </mediaType>
            <mediaType name="GIF image" extensions="gif">
                <mimeType>image/gif</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/image</sharedTemplate>
                <versionedTemplate>system/media/versioned/image</versionedTemplate>
                <mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                    </generator>
                    <width>150</width>
                    <height>150</height>
                    <backgroundColor>#FFFFFF</backgroundColor>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="HTML" extensions="htm,html,stm">
                <mimeType>text/html</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/file</sharedTemplate>
                <versionedTemplate>system/media/versioned/file</versionedTemplate>
                <defaultThumbnailFile>WordProcessing/32x32/imp_exp_html.png</defaultThumbnailFile>
            </mediaType>
            <mediaType name="JPEG image" extensions="jpg, jpeg, jpe, jfif">
                <mimeType>image/jpeg</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/jpeg</sharedTemplate>
                <versionedTemplate>system/media/versioned/jpeg</versionedTemplate>
                <mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                    </generator>
                    <width>150</width>
                    <height>150</height>
                    <backgroundColor>#FFFFFF</backgroundColor>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.JpegMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="MP3" extensions="mp3">
                <mimeType>audio/mp3</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/mp3</sharedTemplate>
                <versionedTemplate>system/media/versioned/mp3</versionedTemplate>
                <prototypes>
                    <media type="Sitecore.Resources.Media.Mp3Media, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="MP4 video" extensions="mp4">
                <mimeType>video/mp4</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
                <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
            </mediaType>
            <mediaType name="PDF file" extensions="pdf">
                <mimeType>application/pdf</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/pdf</sharedTemplate>
                <versionedTemplate>system/media/versioned/pdf</versionedTemplate>
            </mediaType>
            <mediaType name="PNG image" extensions="png">
                <mimeType>image/png</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/image</sharedTemplate>
                <versionedTemplate>system/media/versioned/image</versionedTemplate>
                <mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                    </generator>
                    <width>150</width>
                    <height>150</height>
                    <backgroundColor>#FFFFFF</backgroundColor>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="SVG image" extensions="svg">
                <mimeType>image/svg+xml</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/image</sharedTemplate>
                <versionedTemplate>system/media/versioned/image</versionedTemplate>
                <mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.SvgThumbnailGenerator, Sitecore.Kernel" />
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.SvgMedia, Sitecore.Kernel" />
                </prototypes>
            </mediaType>
            <mediaType name="QuickTime movie" extensions="mov, qt">
                <mimeType>video/quicktime</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
                <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
            </mediaType>
            <mediaType name="TIFF image" extensions="tiff, tif">
                <mimeType>image/tiff</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/image</sharedTemplate>
                <versionedTemplate>system/media/versioned/image</versionedTemplate>
                <mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
                <thumbnails>
                    <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
                        <extension>png</extension>
                    </generator>
                    <width>150</width>
                    <height>150</height>
                    <backgroundColor>#FFFFFF</backgroundColor>
                </thumbnails>
                <prototypes>
                    <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="Zip file" extensions="zip">
                <mimeType>application/x-zip-compressed</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/zip</sharedTemplate>
                <versionedTemplate>system/media/versioned/zip</versionedTemplate>
                <metaDataFormatter type="Sitecore.Resources.Media.ZipMetaDataFormatter"/>
                <prototypes>
                    <media type="Sitecore.Resources.Media.ZipMedia, Sitecore.Kernel"/>
                </prototypes>
            </mediaType>
            <mediaType name="Video for Adobe Flash Player" extensions="f4v">
                <mimeType>video/x-f4v</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
                <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
            </mediaType>
            <mediaType name="Windows Media video" extensions="WMV">
                <mimeType>video/x-ms-wmv</mimeType>
                <forceDownload>false</forceDownload>
                <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
                <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
            </mediaType>
            <mediaType name="Word document" extensions="doc">
                <mimeType>application/msword</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/doc</sharedTemplate>
                <versionedTemplate>system/media/versioned/doc</versionedTemplate>
            </mediaType>
            <mediaType name="Word 2007 document" extensions="docx">
                <mimeType>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/docx</sharedTemplate>
                <versionedTemplate>system/media/versioned/docx</versionedTemplate>
            </mediaType>
            <mediaType name="PPTX File" extensions="pptx">
                <mimeType>application/vnd.openxmlformats-officedocument.presentationml.presentation</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/file</sharedTemplate>
                <versionedTemplate>system/media/versioned/file</versionedTemplate>
                <defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
            </mediaType>
            <mediaType name="PPT File" extensions="ppt">
                <mimeType>application/vnd.ms-powerpoint</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/file</sharedTemplate>
                <versionedTemplate>system/media/versioned/file</versionedTemplate>
                <defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
            </mediaType>
            <mediaType name="XLSX File" extensions="xlsx">
                <mimeType>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/file</sharedTemplate>
                <versionedTemplate>system/media/versioned/file</versionedTemplate>
                <defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
            </mediaType>
            <mediaType name="XLS File" extensions="xls">
                <mimeType>application/vnd.ms-excel</mimeType>
                <forceDownload>true</forceDownload>
                <sharedTemplate>system/media/unversioned/file</sharedTemplate>
                <versionedTemplate>system/media/versioned/file</versionedTemplate>
                <defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
            </mediaType>
            <sc.include file="/App_Config/MimeTypes.config"/>
        </mediaTypes>
        <watcher>
            <ignoreList>
                <ignore contains="icon16x16"/>
                <ignore contains="icon32x32"/>
                <ignore contains="icon48x48"/>
                <ignore contains="_thumb"/>
                <ignorepath contains=".svn"/>
            </ignoreList>
        </watcher>
    </mediaLibrary>
    <!-- RENDERING -->
    <rendering>
        <typesThatShouldNotBeExpanded>
            <type>System.Web.UI.WebControls.Repeater</type>
            <type>System.Web.UI.WebControls.DataList</type>
            <type>System.Web.UI.WebControls.GridView</type>
            <type>System.Web.UI.WebControls.ListView</type>
            <type>System.Web.UI.WebControls.FormView</type>
            <type>Microsoft.Reporting.WebForms.ReportViewer</type>
            <type>Telerik.Web.UI.RadGrid</type>
        </typesThatShouldNotBeExpanded>
    </rendering>
    <!-- ICONS -->
    <icons>
        <sc.include file="/App_Config/Icons.config"/>
    </icons>
    <!-- PORTRAITS -->
    <portraits>
        <sc.include file="/App_Config/Portraits.config"/>
    </portraits>
    <!-- PUBLISHING -->
    <publishing>
        <smartPublishTriggers>
            <trigger templateId="{AB86861A-6030-46C5-B394-E8F99E8B87DB}" note="template"/>
            <trigger templateId="{455A3E98-A627-4B40-8035-E683A0331AC7}" note="template field"/>
        </smartPublishTriggers>
    </publishing>
    <!-- FILE WATCHERS
      Define configuration of the FileWatchers.
      Allowed nodes for child nodes:
        folder:     defines configuration of folder to watch. You can define the folder either as a value of the node
                    or as a reference to some other element inside sitecore element.
                    The folder node is required.
                    Only 1 element is allowed.
        filter:     defines file filter configuration. You can define the folder either as a value of the node
                    or as a reference to some other element inside sitecore element.
                    The filter node is required.
                    More than 1 element is allowed.
        ignore:     defines file or folder ingore filter. For example it could be  equal  to ".svn|.cvs"  in order to filter files that related to a versioning system.
                    This node is optional.
                    More than 1 element is allowed.
    -->
    <watchers>
        <media>
            <folder ref="settings/setting[@name='MediaFolder']/@value"></folder>
            <filter>*</filter>
        </media>
        <xsl>
            <folder>/xsl</folder>
            <filter>*.xslt</filter>
        </xsl>
        <layout>
            <folder ref="settings/setting[@name='LayoutFolder']/@value"/>
            <filter>*</filter>
        </layout>
        <config>
            <folder>/App_Config</folder>
            <filter>*.config</filter>
        </config>
    </watchers>
    <log4net>
        <!-- LOGGING SETTINGS
         The file element defines the location of the log files. This location must
         be the same as the setting in LogFolder. The file element is a relative or
         absolute path that always uses slashes (/) as separators. A valid file
         element for a relative path would be:

           <file value="/data/logs/log.{date}.{processid}.txt"/>

         A valid element for an absolute path would be:

           <file value="C:/inetpub/wwwroot/data/logs/log.{date}.{processid}.txt"/>

         The macros supported are:

           {date}: Replaced with the current date (in the format yyyyMMdd)
           {time}: Replaced with the current time (in the format HHmmss)
           {processid}: Replaced with the current Windows process id

         For further information refer to the Log4Net documentation.
    -->
        <appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender, Sitecore.Logging">
            <file value="$(dataFolder)/logs/log.{date}.{time}.txt"/>
            <appendToFile value="true"/>
            <rollingStyle value="Size" />
            <maxSizeRollBackups value="-1" />
            <maximumFileSize value="10MB" />
            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
            </layout>
            <encoding value="utf-8" />
        </appender>
        <appender name="PublishingLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
            <file value="$(dataFolder)/logs/Publishing.log.{date}.{time}.txt"/>
            <appendToFile value="true"/>
            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
            </layout>
            <encoding value="utf-8"/>
        </appender>
        <root>
            <priority value="INFO"/>
            <appender-ref ref="LogFileAppender"/>
        </root>
        <logger name="Sitecore.Diagnostics.Publishing" additivity="false">
            <level value="INFO"/>
            <appender-ref ref="PublishingLogFileAppender"/>
        </logger>
    </log4net>
    <!-- SIMPLE SETTINGS -->
    <settings>
        <!--  ALIASES
            Turn the following setting on to use aliases
      -->
        <setting name="AliasesActive" value="true"/>
        <!--  ALLOW LOGOUT OF ALL USERS
            Indicates if the logout screen presents all users or
            just users with the same name
      -->
        <setting name="AllowLogoutOfAllUsers" value="false"/>
        <!--  ALLOW DUPLICATE ITEM NAMES ON THE SAME LEVEL
          Specifies whether the duplicate item names are allowed on the same level in the content tree.
          Default value: false
    -->
        <setting name="AllowDuplicateItemNamesOnSameLevel" value="false" />
        <!--  ALLOW PREVIEW OF RULES EXECUTION RESULTS
            Indicates if preview of rules execution results is allowed.
            Default value: true
      -->
        <setting name="AllowPreviewOfRulesExecutionResults" value="true"/>
        <!--  QUERY STRINGS IN URL RENDERINGS
            If this setting is true, all the query strings of the main page is passed
            to all url renderings
      -->
        <setting name="AppendQSToUrlRendering" value="true"/>
        <!--  AUTHENTICATION CLIENT SESSION TIMEOUT
            Specifies the number of minutes before Sitecore considers user authentication session tickets as expired.
            This setting is only relevant for users logging in to Sitecore Client and when the Sitecore license has a limited number
            of concurrent editors. 
            All expired sessions will automatically be removed when a new user tries to log in and the maximum
            number of concurrent editors has been reached. 
            The default is 60 minutes (1 hour).
      -->
        <setting name="Authentication.ClientSessionTimeout" value="60" />
        <!--  PHYSICAL MEMBERSHIP WILDCARD
            Specifies the default membership wildcard used by the providers.
            Default: %
      -->
        <setting name="Authentication.DefaultMembershipProviderWildcard" value="%"/>
        <!--  SAVE RAW URL ON LOGIN
            Specifies whether the original request URL is passed to the login page
            (saved in 'url' query string parameter).
            Default: false
      -->
        <setting name="Authentication.SaveRawUrl" value="false"/>
        <!--  VIRTUAL MEMBERSHIP WILDCARD
            Specifies the membership wildcard to use in high level code.
            Default: *
      -->
        <setting name="Authentication.VirtualMembershipWildcard" value="*"/>
        <!--  CLIENT PERSISTENT LOGIN DURATION
            Specifies the number of days before client "remember me" information
            expires. The default is 180 days.
      -->
        <setting name="Authentication.ClientPersistentLoginDuration" value="180"/>
        <!--  AUTOMATIC DATA BIND
            Indicates if the data bind function is run automatically
      -->
        <setting name="AutomaticDataBind" value="false"/>
        <!--  AUTOMATIC LOCK ON SAVE
            If true, the a lock is automatically taken on an item
            when a user saves the item.
      -->
        <setting name="AutomaticLockOnSave" value="false"/>
        <!--  AUTOMATIC UNLOCK ON SAVED
            If true, the a saved item is automatically unlocked after
            saving.
      -->
        <setting name="AutomaticUnlockOnSaved" value="false"/>
        <!--  BEGIN REQUEST ON POST AUTHENTICATE
            If true, then httpRequestBegin pipeline is executed on PostAuthenticateRequest event.
            If false, then httpRequestBegin pipeline is executed on BeginRequest event.
            Default: true.
      -->
        <setting name="BeginRequestOnPostAuthenticate" value="true"/>
        <!--  ACCESS RESULT CACHE SIZE
            Determines the size of the access result cache.
            Specify the value in bytes or append the value with KB, MB or GB
            A value of 0 (zero) disables the cache.
      -->
        <setting name="Caching.AccessResultCacheSize" value="40MB"/>
        <!--  AVERAGE ITEM SIZE
            The average size of an item in bytes (used when caching items).
            Default: 5000
      -->
        <setting name="Caching.AverageItemSize" value="5000"/>
        <!--  CACHE VIEWSTATE
            Indicates if ViewState is cached.
            Set this to false to ease memory pressure. See also Caching.DefaultViewStateCacheSize.
      -->
        <setting name="Caching.CacheViewState" value="true"/>
        <!--  CLIENT DATA CACHE SIZE
            Determines the default size of the client data cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultClientDataCacheSize" value="25MB"/>
        <!--  DATA CACHE SIZE
            Determines the default size of the data cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultDataCacheSize" value="50MB"/>
        <!--  FILTERED ITEMS CACHE SIZE
            Determines the default size of the filtered items cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
            A value of 0 (zero) disables the cache by default.
            Default value: 10MB
      -->
        <setting name="Caching.DefaultFilteredItemsCacheSize" value="10MB"/>
        <!--  HTML CACHE SIZE
            Determines the default size of the html cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultHtmlCacheSize" value="25MB"/>
        <!--  ITEM PATHS CACHE SIZE
            Determines the default size of the item paths cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultItemPathsCacheSize" value="50MB"/>
        <!--  PATH CACHE SIZE
            Determines the default size of the path cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultPathCacheSize" value="500KB"/>
        <!--  REGISTRY CACHE SIZE
            Determines the default size of the registry cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultRegistryCacheSize" value="25MB"/>
        <!--  VIEWSTATE CACHE SIZE
            Determines the default size of the viewstate cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultViewStateCacheSize" value="25MB"/>
        <!--  XSL CACHE SIZE
            Determines the default size of the xsl cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.DefaultXslCacheSize" value="50MB"/>
        <!--  CACHING - DISABLE CACHE SIZE LIMITS
            If true, Sitecore does not limit cache size growth and ignores any maximum cache sizes 
            specified in the web.config file.            
            Enabling this setting can improve the application's performance in 64-bit environments 
            by allowing Sitecore to take full advantage of the available memory.
            After setting this value to true, monitor the system at regular intervals, as this 
            configuration can cause Sitecore to consume too much memory and cause Out Of Memory errors.
            It is only recommended to set the setting to true in 64-bit environments.
            Default value: false
      -->
        <setting name="Caching.DisableCacheSizeLimits" value="false" />
        <!--  CACHING ENABLED
            Determines if caching should be enabled at all
            Specify 'true' to enable caching and 'false' to disable all caching
      -->
        <setting name="Caching.Enabled" value="true"/>
        <!--  FAST MEDIA CACHE MAP SIZE
            Determines the size of the fast media cache map cache.
            Specify the value in bytes or append the value with KB, MB or GB
      -->
        <setting name="Caching.FastMediaCacheMapSize" value="1MB"/>
        <!--  HTML LIFETIME
            The lifetime of HTML fragments added to the cache.
            Default value: 00:00:00 (ie. eternal life)
      -->
        <setting name="Caching.HtmlLifetime" value="00:00:00"/>
        <!--  ISUSERINROLE CACHE SIZE
            Determines the size of the IsInRole cache, which improves the
            performance of security providers by caching user/role relationships.
            Specify the value in bytes or append the value with KB, MB or GB
            Default value: 5MB.
      -->
        <setting name="Caching.IsUserInRoleCacheSize" value="5MB"/>
        <!--  CACHING - CACHE KEY INDEXING ENABLED - ACCESS RESULT CACHE
            Determines whether or not the system uses extended indexed storage for the cache keys of the AccessResultCache.
            
            Using indexed storage for cache keys can in certain scenarios significantly reduce the time it takes to perform partial cache
            clearing of the AccessResultCache. This setting is useful on large solutions where the size of this cache is very large and
            where partial cache clearing causes a measurable overhead.
            However, enabling this setting on content management servers with many editors and many content items can degrade performance.
            Default value: false
      -->
        <setting name="Caching.CacheKeyIndexingEnabled.AccessResultCache" value="false"/>
        <!--  CACHING - CACHE KEY INDEXING ENABLED - ITEM CACHE
            Determines whether or not the system uses extended indexed storage for the cache keys of the ItemCache.
            
            Using indexed storage for cache keys can in certain scenarios significantly reduce the time it takes to perform partial cache
            clearing of the ItemCache. This setting is useful on large solutions where the size of this cache is very large and where
            partial cache clearing causes a measurable overhead.
            However, enabling this setting on content management servers with many editors, many languages, and/or many versions can degrade
            performance.
            Default value: false
      -->
        <setting name="Caching.CacheKeyIndexingEnabled.ItemCache" value="false"/>
        <!--  CACHING - CACHE KEY INDEXING ENABLED - ITEM PATHS CACHE
            Determines whether or not the system uses extended indexed storage for the cache keys of the ItemPathsCache.
            
            Using indexed storage for cache keys can in certain scenarios significantly reduce the time it takes to perform partial cache
            clearing of the ItemPathsCache. This setting is useful on large solutions where the size of this cache is very large and where
            partial cache clearing causes a measurable overhead.
            However, enabling this setting on content management servers with many editors, many languages, and/or many content items can
            degrade performance.
            Default value: false
      -->
        <setting name="Caching.CacheKeyIndexingEnabled.ItemPathsCache" value="false"/>
        <!--  CACHING - CACHE KEY INDEXING ENABLED - PATH CACHE
            Determines whether or not the system uses extended indexed storage for cache keys of the PathCache.
            
            Using indexed storage for PathCache keys insignificantly slows adding item paths to the PathCache. However, it can drastically reduce
            the time it takes to perform partial cache clearing of the PathCache. This setting is useful on large solutions where items are frequently
            renamed, moved, copied and deleted.
            Default value: false
      -->
        <setting name="Caching.CacheKeyIndexingEnabled.PathCache" value="false"/>
        <!--  ITEM CACHING ENABLED
            Determines if caching of items should be enabled
            Specify 'true' to enable caching and 'false' to disable
      -->
        <setting name="Caching.ItemCachingEnabled" value="true"/>
        <!--  LOAD FACTOR
            The default load factor to use for cached values.
            The size of all cached values are multiplied with this value before being added to the cache.
      -->
        <setting name="Caching.LoadFactor" value="1.0"/>
        <!--  MAXIMUM LOAD FACTOR
            The maximum load factor to use for cached values.
            The load factor might be increased up to this value during heavy memory load.
      -->
        <setting name="Caching.MaxLoadFactor" value="3.0"/>
        <!--  SCAVENGE INTERVAL
            Determines how often scavengable caches are scavenged.
            Default value: 3 minutes.
      -->
        <setting name="Caching.ScavengeInterval" value="00:03:00"/>
        <!--  SECURITY CACHE EXPIRATION
            Sets the absolute expiration on the cached security data.
            A value of 00:00:00 disables automatic expiration of security caches.

            Default value: 00:00:00
      -->
        <setting name="Caching.SecurityCacheExpiration" value="00:00:00"/>
        <!--  STANDARD VALUES SIZE
            The average size of a standard values.
            Default value: 100.
      -->
        <setting name="Caching.StandardValues.AverageValueSize" value="100"/>
        <!--  STANDARD VALUES CACHE SIZE
            The default size of the standard value cache.
            Default value: 5MB.
      -->
        <setting name="Caching.StandardValues.DefaultCacheSize" value="5MB"/>
        <!--  USER PROFILE CACHE SIZE
            Determines the size of the user profile cache size, which improves the
            performance of security providers by caching profile properties.
            Specify the value in bytes or append the value with KB, MB or GB
            Default value: 5MB.
      -->
        <setting name="Caching.UserProfileCacheSize" value="5MB"/>
        <!--  ENABLE OR DISABLE CLIENT FEEDS
            Disable client feeds to remove all links to the feeds from the Sitecore Client and turn off client feed generation.
            Default value: true, client feeds are enabled.
      -->
        <setting name="ClientFeeds.Enabled" value="true"/>
        <!--  CLIENT FEEDS ITEM EXPIRATION
            Items that are older than the specified time interval (in days) will not be included in the client feed.
            Default value: 0, expiration is disabled.
      -->
        <setting name="ClientFeeds.ItemExpiration" value="0"/>
        <!--  MAXIMUM NUMBER OF ITEMS IN FEED
            The maximum number of items to include in the client feed.
            Default value: 50
      -->
        <setting name="ClientFeeds.MaximumItemsInFeed" value="50"/>
        <!--  CONTENT EDITOR CHECK SECURITY ON TREE NODES
            Determines if the content editor checks the security settings on subitems
            when rendering the tree. Setting this to false may increase performance.
            Default value: true.
      -->
        <setting name="ContentEditor.CheckSecurityOnTreeNodes" value="true"/>
        <!--  CONTENT EDITOR CHECK HASCHILDREN ON TREE NODES
            Determines if the content editor uses the HasChildren method when rendering
            a tree node. Setting this to false may increase performance.
            Default value: true.
      -->
        <setting name="ContentEditor.CheckHasChildrenOnTreeNodes" value="true"/>
        <!--  CONTENT EDITOR SHOW FIELD SHARING LABELS
            Determines whether or not the Content Editor displays field sharing labels ([shared] and [unversioned]) to users 
            that are not Sitecore administrators.
            Default value: false
      -->
        <setting name="ContentEditor.ShowFieldSharingLabels" value="false"/>
        <!--  CHECK SECURITY ON LANGUAGES
            Indicates if the security settings on languages are applied to the
            Content Editor.
      -->
        <setting name="CheckSecurityOnLanguages" value="true"/>
        <!--  CLIENT LANGUAGE
            Specifies the default language of the Sitecore client if no language
            could be determined in any other way.
      -->
        <setting name="ClientLanguage" value="en"/>
        <!--  CONTENT EDITOR CLASSIC FRAME EVENT PROPAGATION
            Indicates whether the Content Editor uses classic frame event propagation.
            In classic propagation all item events are sent to all frames in the content editor.
            This may hurt server and client performance.
            If classic mode is not used, only events relating to items that are either selected
            in the content editor or subitems thereof, are propagated.
            Default value: false
      -->
        <setting name="ContentEditor.ClassicFrameEventPropagation" value="false"/>
        <!--  CONTENT EDITOR - RENDER ITEM HELP AS HTML
          Specifies whether help information defined in the Item Help section should be treated as an HTML markup.
          If set to false, then the item help information will be encoded before it is rendered.
          If set to true, then the item help information will be cleared of JavaScript code and then rendered as is.
          Default value: false.
          Please note: setting this value to true is unsafe, because it will then be possible to inject any HTML tags (like iframe) and CSS into Sitecore.
    -->
        <setting name="ContentEditor.RenderItemHelpAsHtml" value="false"/>
        <!--  CONTENT EDITOR SHOW GUTTER
            Indicates whether the Content Editor show the gutter panel to the left of the
            treeview as default.
            Default value: true
      -->
        <setting name="ContentEditor.ShowGutter" value="true"/>
        <!--  CONTENT EDITOR SHOW SEARCH PANEL
            Indicates whether the Content Editor show the search panel above the treeview as default
            Default value: true
      -->
        <setting name="ContentEditor.ShowSearchPanel" value="true"/>
        <!--  CONTENT EDITOR SHOW VALIDATOR BAR
            Indicates whether the Content Editor show the validator bar to the right of the
            content as default.
            Default value: true
      -->
        <setting name="ContentEditor.ShowValidatorBar" value="true"/>
        <!--  CONTENT EDITOR SORT LANGUAGES
          Indicates whether the Content Editor show languages in the language selection dropdown
          in the same order as /sitecore/system/Languages child items.
          Default value: false
    -->
        <setting name="ContentEditor.SortLanguages" value="false"/>
        <!--  ENABLE COUNTERS
            Indicates if performance counters are enabled.
            Default value: true
      -->
        <setting name="Counters.Enabled" value="true"/>
        <!--  COUNTERS INSTANCE NAME
            Instance name for performance counters.
            Default value: (value of InstanceName setting)
      -->
        <setting name="Counters.InstanceName" value=""/>
        <!--  RESET COUNTERS
            Indicates if performance counters will be reset on Sitecore startup.
            Default value: true
      -->
        <setting name="Counters.ResetOnStartup" value="true"/>
        <!--  DATA FOLDER
            Path to data folder
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      -->
        <setting name="DataFolder" value="$(dataFolder)"/>
        <!--  DEBUG BORDERS
            Control html tag used for debug borders (usually span or div)
            and color
      -->
        <setting name="DebugBorderColor" value="red"/>
        <setting name="DebugBorderTag" value="span"/>
        <!--  DEBUG FOLDER
            Path to debug folder
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      -->
        <setting name="DebugFolder" value="$(dataFolder)/debug"/>
        <!--  DEFAULT BASE TEMPLATE
            The guid of the default base templates. Set the value to the empty string ("")
            to disable automatic base templates.
            To create a template that will not use this value, set the templates
            base template to: {00000000-0000-0000-0000-000000000000}
            Default value: the id of the Standard template
      -->
        <setting name="DefaultBaseTemplate" value="{1930BBEB-7805-471A-A3BE-4858AC7CF696}"/>
        <!--  DEFAULT ICON
            Default icon for items in the Sitecore client
      -->
        <setting name="DefaultIcon" value="/sitecore/shell/themes/Standard/Applications/32x32/Document.png"/>
        <!--  START DOCUMENT
            The document that will be shown first when entering the Sitecore client.
            Path is rooted in /sitecore/content and must start with /.
      -->
        <setting name="DefaultItem" value="/home"/>
        <!--  LANGUAGE
            The default language for the web site.
      -->
        <setting name="DefaultLanguage" value="en"/>
        <!--  LAYOUT FILE
            The path to the layout file to use for items that do not specify a layout file themselves.
            Default value: ""
      -->
        <setting name="DefaultLayoutFile" value=""/>
        <!--  ISO CODE
            The culture iso code for users who do not have the Regional ISO Code set in their profile.
      -->
        <setting name="DefaultRegionalIsoCode" value=""/>
        <!--  LAYOUT PAGE EVENT
            The name of page event where the layout pipeline will be run.
            Presently, there are three valid values: 'preInit', 'init' or 'load'.
            Default value is: 'preInit'.
      -->
        <setting name="LayoutPageEvent" value="preInit"/>
        <!--  DEFAULT PUBLISHING TARGETS
            Pipe separated list of default publishing targets.
            Targets in this list will be preselected in the Publish dialog.
      -->
        <setting name="DefaultPublishingTargets" value=""/>
        <!--  DEFAULT SQL TIMEOUT
            The default timeout for all SQL commands issued by the Sitecore APIs, such as
            the SqlServerDataProvider, the OracleDataProvider or the SqlUtil classes.
            Default value: 00:05:00 (5 minutes)
      -->
        <setting name="DefaultSQLTimeout" value="00:05:00"/>
        <!--  Sort order is used for displaying items in the
            Sitecore client and for API functions that returns sorted
            sets.
      -->
        <setting name="DefaultSortOrderValue" value="100"/>
        <!--  THEME
            The default theme to use in the Sitecore client
      -->
        <setting name="DefaultTheme" value="standard"/>
        <!--  DISABLE BROWSER CACHING
            If true, all pages will have:
              Cache-Control: no-cache, no-store
              Pragma: no-cache
            in the http header
      -->
        <setting name="DisableBrowserCaching" value="true"/>
        <!--  ENABLE EVENT QUEUES
            If enabled, Sitecore sends local events to the event queue available to remote instances,
            and handles events in the queue from remote instances.
            Default value: true
      -->
        <setting name="EnableEventQueues" value="true"/>
        <!--  ENABLE SITE.CONFIG FILES
            If true, the SiteResolver pipeline processor checks for the existence of a "site.config"
            file in the physical subdirectory corresponding to the requested URL. If a "site.config"
            file exists, Sitecore uses that file to determine the context site (Sitecore.Context.Site)
            for the current request. 
            For example, when processing a request for the URL http://site.com/parent/child.aspx, 
            Sitecore first checks for the existence of <webroot>/parent/site.config. 
            Syntax: The site.config files should contain the following XML markup:
              <site reference="[name of the site definition from the web.config]" />
            Default value: false
      -->
        <setting name="EnableSiteConfigFiles" value="false" />
        <!--  ENABLE XSLT document()
            Determine whether XSLT document() support should be enabled.
            If this is not enabled, it will be an error if the XSLT file contains 'document()' references.
            Document support can be set for individual XSLT files by using the XslFile.EnableDocument property.
            Default value: true.
      -->
        <setting name="EnableXslDocumentFunction" value="true"/>
        <!--  ENABLE XSLT SCRIPTS
            Determine whether XSLT script support should be enabled.
            If script support is not enabled, it will be an error if the XSLT file contains script blocks.
            Default value: false.
      -->
        <setting name="EnableXslScripts" value="false"/>
        <!--  ERROR HANDLER
            Url of page handling generic errors
      -->
        <setting name="ErrorPage" value="/sitecore/service/error.aspx"/>
        <!--  EVENT QUEUE PERSIST STAMP INTERVAL
            The minimum interval between saving the event queue's last processed event stamp.
            Default value: 00:00:10 (10 seconds)
      -->
        <setting name="EventQueue.PersistStampInterval" value="00:00:10" />
        <!--  EVENT QUEUE PERSIST STAMP MAX AGE
            The maximum age of remote events to be replayed at application startup. 
            When Sitecore starts, it will check this setting. Remote events that are older than this age will not be replayed. 
            Default value: 00:10:00 (10 minutes)
      -->
        <setting name="EventQueue.PersistStampMaxAge" value="00:10:00" />
        <!-- EVENT QUEUE SAVED ITEM REMOTE SERIALIZE ALL FIELDS
           This setting allows you to specify which fields should be serialized when the item:saved:remote event is triggered.
           There are two options:               
           1) Set this setting to 'true' and place all the fields or types that you would not like to serialize in the 'ExcludeField' and/or 'ExcludeType' lists.
           2) Set this setting to 'false' and place all the fields and types that you would like to serialize in the 'IncludeField' and/or 'IncludeType' lists.
           Default value: true.
      -->
        <setting name="EventQueue.SavedItemRemote.SerializeAllFields" value="true" />
        <!-- FAST QUERY DESCENDANTS DISABLED
           Determines whether ability to select items through Ancestors/Descendants axes should be disabled in fast query.
           Default value: false
      -->
        <setting name="FastQueryDescendantsDisabled" value="false"/>
        <!--  GRID PAGE SIZE
            Defines the number of rows in a UI grid.
            Default:15
      -->
        <setting name="GridPageSize" value="15"/>
        <!--  FEEDS ITEM EXPIRATION
            Items that are older than the specified time interval (in days) will not be included in the feed.
            Default value: 0, expiration is disabled.
      -->
        <setting name="Feeds.ItemExpiration" value="0"/>
        <!--  MAXIMUM NUMBER OF ITEMS IN FEED
            The maximum number of items to include in the feed.
            Default value: 50
      -->
        <setting name="Feeds.MaximumItemsInFeed" value="50"/>
        <!--  IGNORE URLS
            Set IgnoreUrlPrefixes to a '|' separated list of url prefixes that should not be
            regarded and processed as friendly urls (ie. forms etc.)
      -->
        <setting name="IgnoreUrlPrefixes" value="/sitecore/default.aspx|/trace.axd|/webresource.axd|/sitecore/shell/Controls/Rich Text Editor/Telerik.Web.UI.DialogHandler.aspx|/sitecore/shell/applications/content manager/telerik.web.ui.dialoghandler.aspx|/sitecore/shell/Controls/Rich Text Editor/Telerik.Web.UI.SpellCheckHandler.axd|/Telerik.Web.UI.WebResource.axd|/sitecore/admin/upgrade/|/layouts/testing|/sitecore/service/xdb/disabled.aspx"/>
        <!--  ITEM CLONING ENABLED
            Specifies whether the Item Cloning feature is enabled.
            Default value on CM and Standalone servers: true.
            Default value on CD, Processing and Reporting servers: false.
    -->
        <setting name="ItemCloning.Enabled" value="false"/>
        <setting name="ItemCloning.Enabled" role:require="ContentManagement or Standalone">
            <patch:attribute name="value">true</patch:attribute>
        </setting>
        <!--  ITEM CLONING NON INHERITED FIELDS
            Specifies a pipe-separated list of field names or field IDs which should be not be inherited by clones from their source item,
            in addition to the following fields from the standard template that are never be inherited: 
              Updated, Updated by, Revision, Created, Created by, Source, Workflow, Workflow State, Lock
            Example: "__Renderings" (or "{F1A1FE9E-A60C-4DDB-A3A0-BB5B29FE732E}") will exclude the __Renderings field (also known as the 
            Layout field) so that clones do not inherit presentation details from their source items.
            Default value: ""
      -->
        <setting name="ItemCloning.NonInheritedFields" value=""/>
        <!--  ITEM CLONING - INHERIT WORKFLOW DATA
            Specify whether you want the workflow and workflow state fields to be inherited by clones from their source item.
            Note: When you change the setting value, clones move in or out the workflow, which may affect their behavior, for example, on publishing.
            Default value: false
      -->
        <setting name="ItemCloning.InheritWorkflowData" value="false"/>
        <!--  ITEM CLONING - FORCE UPDATE
            Specify whether clones should be updated automatically when:
              - a new version is added to the original item.
              - a new language is added to the original item.
              - a new sub-item is added to the original item.
              Note: If true, all the clones of the original item are updated automatically.
            Default value: false
      -->
        <setting name="ItemCloning.ForceUpdate" value="false"/>
        <!--  ITEM CLONING - DELETE CLONES WITH ORIGINAL ITEM
          Specifies whether item clones should be deleted when the original item is deleted.
          If true, when the original item is deleted all its clones are deleted and not just uncloned.
          Default value: false
    -->
        <setting name="ItemCloning.DeleteClonesWithOriginalItem" value="false"/>
        <!--  ITEM CLONING - FORCE UPDATE - CHANGE TEMPLATE
          Specify whether clones should be updated automatically when a different template is selected for the original item.
          Note: If true, all the clones of the original item are updated automatically.
          Default value: false
    -->
        <setting name="ItemCloning.ForceUpdate.ChangeTemplate" value="false"/>
        <!--  ITEM CLONING - RELINK CLONED SUBTREE
          Indicates that after cloning an item tree structure, all the internal links inside the cloned structure should be re-linked to point to the items in the cloned sub-tree. 
          When the setting value is false, the links in the cloned structure will still link to the items in the original structure.
          Default value: false
    -->
        <setting name="ItemCloning.RelinkClonedSubtree" value="false" />
        <!--  HEALTH MONITOR INTERVAL
            Specifies the interval between running the healthMonitor pipeline.
            Default value: 00:10:00 (10 minutes)
      -->
        <setting name="HealthMonitorInterval" value="00:10:00"/>
        <!--  HEARTBEAT INTERVAL
            Specifies the interval between heartbeats.
            Default value: 00:00:02 (2 seconds)
      -->
        <setting name="HeartbeatInterval" value="00:00:02"/>
        <!--  SITECORE - SERVICES - HEARTBEAT - EXCLUDE CONNECTION
          Specify the connection strings of the databases to exclude from the heartbeat check.
          A '|' separated list of the database connection strings that should be excluded from the heartbeat check.
          Default value: LocalSqlServer
    -->
        <setting name="Sitecore.Services.Heartbeat.ExcludeConnection" value="LocalSqlServer" />

        <!--  HTML EDITOR DEFAULT CONFIGURATION TYPE
            Specifies the type responsible for setting up the rich text editor. Can be overriden at profile level. Must inherit from Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client.
            Default value: Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client
      -->
        <setting name="HtmlEditor.DefaultConfigurationType" value="Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client"/>
        <!--  HTML EDITOR DEFAULT PROFILE
            Path to the default html editor profile.
            Default value: /sitecore/system/Settings/Html Editor Profiles/Rich Text Default
      -->
        <setting name="HtmlEditor.DefaultProfile" value="/sitecore/system/Settings/Html Editor Profiles/Rich Text Default"/>
        <!--  HTML EDITOR LINE BREAK
            Specifies the tag that the HTML editor inserts on Enter. Values can be
            "br", "div" and "p".
      -->
        <setting name="HtmlEditor.LineBreak" value="p"/>

        <!--  HTML EDITOR REMOVE SCRIPTS
            If true, the rich text editor removes script tags and inline scripts from RTE field values before saving. Setting the value to true reduces the potential for cross-site scripting and other script-related issues.
            Default value: true
      -->
        <setting name="HtmlEditor.RemoveScripts" value="true" />
        <!--  HTML EDITOR SUPPORT WEB CONTROLS
            Indicates if the Html Editor supports web controls. If true, Web Controls are shown as yellow boxes.
            Default value: true
      -->
        <setting name="HtmlEditor.SupportWebControls" value="true"/>
        <!--  HTML EDITOR VALIDATOR SERVICE URL
            Specifies the url that validates XHtml.
      -->
        <setting name="HtmlEditor.ValidatorServiceUrl" value="http://validator.w3.org/check"/>
        <!--  IMAGES
            List of file extensions to regard as images when uploading (separated by |).
            Must begin and end with a pipe character (|)
      -->
        <setting name="ImageTypes" value="|gif|jpg|png|"/>
        <!--  KEEP LOCK AFTER SAVE FOR ADMIN USERS
            Set this value to true if you want to Administrator users to keep the lock on an item after saving
            it in the Page Editor.
            Notice: For regular users, the "Keep Lock After Save" item in the core database will determine whether
            to keep the lock or not.
            Default value: false
      -->
        <setting name="KeepLockAfterSaveForAdminUsers" value="false"/>
        <!--  PROFILING RENDER FIELD THRESHOLD
            Defines the threshold value (in milliseconds) for logging long field render operations.
            Default value: 100
      -->
        <setting name="Profiling.RenderFieldThreshold" value="100"/>
        <!--  PROFILING SHEER UI
            Determines if debug information about Sheer UI request are displayed
            in the client.
      -->
        <setting name="Profiling.SheerUI" value="true"/>
        <!--  PROFILING SHEER UI WARNING THRESHOLD
            Defines the number of milliseconds before logging a long Sheer UI request.
            Requires that Profiling.SheerUI = "true"
      -->
        <setting name="Profiling.SheerUIWarningThreshold" value="800"/>
        <!--  ICONS CACHE FOLDER
            A relative path to the folder used for caching icons (only used when using icons stored in zip files).
            Default value: $(tempFolder)/IconCache
      -->
        <setting name="Icons.CacheFolder" value="$(tempFolder)/IconCache"/>
        <!--  USE ZIPPED ICONS
            Indicates whether to use icons stored in zip files. If you set this to false, all icons
            must be available as physical files stored in folders below /sitecore/shell/Themes/Standard.
            Default value: true
      -->
        <setting name="Icons.UseZippedIcons" value="true"/>
        <!--  INDEX FOLDER
            The path to the folder where the Lucene.Net search indexes are stored.
            Default value: $(dataFolder)/indexes
      -->
        <setting name="IndexFolder" value="$(dataFolder)/indexes"/>
        <!--  INSTANCE NAME
            Unique name for Sitecore instance.
            Default value: (machine name and IIS site name)
      -->
        <setting name="InstanceName" value=""/>
        <!--  INVALID CHARS
            Characters that are invalid in an item name
      -->
        <setting name="InvalidItemNameChars" value="\/:?&quot;&lt;&gt;|[]"/>
        <!--  ITEM NAME VALIDATION
            Regular expression for validating item names
      -->
        <setting name="ItemNameValidation" value="^[\w\*\$][\w\s\-\$]*(\(\d{1,}\)){0,1}$"/>
        <!--  ITEM NAME ALLOW MIXING REPLACEMENT CHARACTERS
          Specifies whether you can create items with names that contain the values defined in the 'find' and 'replaceWith' properties in the 
         'encodeNameReplacements' section.
          Default value: true.
    -->
        <setting name="ItemNameAllowMixingReplacementCharacters" value="true"/>
        <!--  ITEM NOT FOUND HANDLER
            Url of page handling 'Item not found' errors
      -->
        <setting name="ItemNotFoundUrl" value="/sitecore/service/notfound.aspx"/>
        <!--  ITEM RESOLVING - FIND BEST MATCH
          Specifies the mode in which item resolving tries to find items with names that contain the values defined in the 'find' and 'replaceWith'
          properties in the 'encodeNameReplacements' section, for example, spaces and dashes.
          The setting can have the following values:
            - Disabled - item resolving will not try to match such items. No performance improvement.
            - Enabled - item resolving will try to find a matching item on each nesting level separately. 
              This value might have a small negative impact on performance.
            - DeepScan - item resolving will try to match an item by scanning the whole content tree.
              This value can have a noticeable impact on performance if you have many items with names on the same level with names
              whose only difference is that they contain characters that are defined in the 'encodeNameReplacement' section.
          Default value: DeepScan.
    -->
        <setting name="ItemResolving.FindBestMatch" value="DeepScan"/>
        <!--  JOBS - EXECUTE IN MANAGED THREAD POOL
            This setting specifies whether jobs should be executed in Sitecore's managed thread pool.
            If true, jobs are queued to the managed thread pool.
            If false, Sitecore creates a new thread for each job that is started.
            Default value: true
      -->
        <setting name="Jobs.ExecuteInManagedThreadPool" value="true" />
        <!--  JOB QUEUE INTERVAL
            Gets the interval between the JobManager checking its queue for pending actions.
            Default value: "00:00:02" (2 seconds)
      -->
        <setting name="Jobs.QueueProcessingInterval" value="00:00:02"/>
        <!--  LANGUAGES ALWAYS STRIP LANGUAGE
            This setting specifies if the StripLanguage processor in the <preprocessRequest> pipeline will parse and remove languages from
            the URL, even when the languageEmbedding attribute of the linkProvider is set to "never". You should only change this setting 
            to "false" if the default behavior causes problems in your solution.
            Default value: true 
      -->
        <setting name="Languages.AlwaysStripLanguage" value="true"/>
        <!--  LANGUAGES AUTO REMOVE ITEM DATA
            Indicates if item data is automatically removed from a database when a language is deleted.
            Default value: true
      -->
        <setting name="Languages.AutoRemoveItemData" value="true"/>
        <!--  LANGUAGES AUTO RENAME ITEM DATA
            Indicates if item data languages are automatically renamed when a language is renamed.
            Default value: true
      -->
        <setting name="Languages.AutoRenameItemData" value="true"/>
        <!--  LAYOUT FOLDER
            The default path to the layout file root folder.
            The layout folder is the place where layout files (.aspx) and
            user controls (.ascx) are stored by default. The system will
            watch this folder for file changes and reload caches etc. as
            necessary.
            The value can be a virtual or physical path.
            Default value: /layouts
      -->
        <setting name="LayoutFolder" value="/layouts"/>
        <!--  LAYOUT NOT FOUND HANDLER
            Url of page handling 'Layout not found' errors
      -->
        <setting name="LayoutNotFoundUrl" value="/sitecore/service/nolayout.aspx"/>
        <!--  REMEMBER LAST LOGGED IN USER NAME
            Specifies whether Sitecore will remember the last logged in user name on the login page (stored encrypted in a cookie).
            If you set this to true, the system sets last logged in user name on the login page.
            Default: false
      -->
        <setting name="Login.RememberLastLoggedInUserName" value="false"/>
        <!--  LICENSE
            This value define the physical location of the license file.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      -->
        <setting name="LicenseFile" value="$(dataFolder)/license.xml"/>
        <!--  LINK DATABASE - MAXIMUM BATCH SIZE
            This setting specifies the maximum number of records that Compact method can process in a single iteration.
            If you set this value too low, it can cause excessive amounts of network traffic and may have a significant impact 
            on system throughput.
            If you set this value too high, it may affect tasks that require communication with SQL Server. For example, it may affect the size of transactions
            sent to SQL Server and this might require you to set higher 'lock timeout' values as it takes longer to process large batches.
            Default: 1000
      -->
        <setting name="LinkDatabase.MaximumBatchSize" value="1000"/>
        <!--  LINK DATABASE - UPDATE DURING PUBLISH
            If true, the system performs incremental updates to the link database during publishing operations.
            If false, the system does not perform updates to the link database for item operations that occur in the context of
            a publishing operation.
            Default: true
      -->
        <setting name="LinkDatabase.UpdateDuringPublish" value="true"/>
        <!--  LINK ITEM NOT FOUND HANDLER
            Url of page handling 'Link item not found' errors
      -->
        <setting name="LinkItemNotFoundUrl" value="/sitecore/service/notfound.aspx"/>
        <!--  LOG FOLDER
            Path to log folder. This must be the same location as the
            settings in the log4net section below.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      -->
        <setting name="LogFolder" value="$(dataFolder)/logs"/>


        <!--  LOGIN BACKGROUND IMAGE URL
            Sets the background image used on the login page /sitecore/shell/default.aspx
            Default value: "//"
      -->
        <setting name="Login.BackgroundImageUrl" value="/sitecore/login/drop_wallpaper.jpg" />

        <!--  LOGIN DISABLE AUTOCOMPLETE
            If false, browsers suggest autocomplete for used editor names on shared/public computers,
            as an autocomplete="off" attribute is not added on the Sitecore login forms on the
             /sitecore/login/default.aspx and /sitecore/admin/login.aspx pages. 
            Default value: true
      -->
        <setting name="Login.DisableAutoComplete" value="true" />

        <!--  LOGIN DISABLE PASSWORD RECOVERY
            If true, Sitecore hides the "Forgot Your Password?" link on the login page.  
            Default: false
      -->
        <setting name="Login.DisablePasswordRecovery" value="false" />
        <!--  LOGIN DISABLE REMEMBER ME
            If true, Sitecore disables the "Remember me" checkbox on the login page.
            Default: false
      -->
        <setting name="Login.DisableRememberMe" value="false" />
        <!--  LOGIN DISABLE LICENSE INFROMATION
            If true, Sitecore hides the "License Information" link on the login page.
            Default: true
      -->
        <setting name="Login.DisableLicenseInfo" value="true" />
        <!--  LOGIN SITECORE URL
            Specifies the Url of the Sitecore pane on the login startpage.
      -->
        <setting name="Login.SitecoreUrl" value="https://sdn.sitecore.net/startpage.aspx"/>
        <!--  MAIL SERVER
            SMTP server used for sending mails by the Sitecore server
            Is used by MainUtil.SendMail()
            Default value: ""
      -->
        <setting name="MailServer" value=""/>
        <!--  MAIL SERVER USER
            If the SMTP server requires login, enter the user name in this setting
      -->
        <setting name="MailServerUserName" value=""/>
        <!--  MAIL SERVER PASSWORD
            If the SMTP server requires login, enter the password in this setting
      -->
        <setting name="MailServerPassword" value=""/>
        <!--  MAIL SERVER PORT
            If the SMTP server requires a custom port number, enter the value in this setting.
            The default value is: 25
      -->
        <setting name="MailServerPort" value="25"/>
        <!--  MAIL SERVER SSL
            If the SMTP server requires SSL, set the value to true.
            The default value is: false
    -->
        <setting name="MailServerUseSsl" value="false" />
        <!--  MASTER VARIABLES REPLACER
            Specifies that class that will replace variables when creating
            a new master, e.g. "$id" and "$parentid"
      -->
        <setting name="MasterVariablesReplacer" value="Sitecore.Data.MasterVariablesReplacer,Sitecore.Kernel.dll"/>
        <!--  MAX TREE DEPTH
            Specifies the maximum allowed depth of an item tree.
            Default value: 20
      -->
        <setting name="MaxTreeDepth" value="20"/>
        <!--  MAX ITEM NAME
            Specifies the maximum length of an item name.
            Default value: 100
      -->
        <setting name="MaxItemNameLength" value="100"/>
        <!--  MEDIA FOLDER
            Root folder of upload folder being watched for new media library files
            Files copied to this folder (or below) will be automatically added to the media library.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
            It should be different from Media.FileFolder setting
      -->
        <setting name="MediaFolder" value="$(mediaFolder)"/>
        <!--  MEDIA ALWAYS INCLUDE SERVER URL
            If true, Sitecore will generate absolute URLs when it uses the MediaProvider API and/or the link provider to render media URLs.
            If blank, Sitecore will use the same value as the alwaysIncludeServerUrl attribute from the link provider.
            Default value: "" (use the value from the link provider)
      -->
        <setting name="Media.AlwaysIncludeServerUrl" value=""/>
        <!--  MEDIA ALWAYS APPEND REVISION
            If true, Sitecore will append media item revision when it uses the MediaProvider API and/or the link provider to render media URLs.
            Default value: false (do not append media item revision)
      -->
        <setting name="Media.AlwaysAppendRevision" value="false"/>
        <!--  MEDIA - AUTO SET ALT
            Indicates if the Alt field on the Image template is set automatically to the file
            path when the image is uploaded. If false, the Alt field is blank.
      -->
        <setting name="Media.AutoSetAlt" value="false"/>
        <!--  MEDIA - CACHE FILE MEDIA BY MODIFIED DATE
            If true, in addition to varying by the standard media request parameters such as height and width, 
            Sitecore varies media cache entries for file-based media by both file path and the last modification 
            date of the media file.
            If false, Sitecore varies file media cache entries only by file path and standard media request 
            parameters and does not account for the last modification date of the file. A false value decreases 
            the number of file system I/O operations performed for each media request, but could cause Sitecore 
            to serve stale data for file media items if a process other than the Sitecore CMS user interfaces 
            initiated that change.
            Default value: true
      -->
        <setting name="Media.CacheFileMediaByModifiedDate" value="true" />
        <!--  MEDIA - CACHE FOLDER
            The folder under which media files are cached by the system.
            Default value: /App_Data/MediaCache
      -->
        <setting name="Media.CacheFolder" value="/App_Data/MediaCache"/>
        <!--  MEDIA - CACHING ENABLED
            Indicates if caching of media files is enabled.
            Default value: true
      -->
        <setting name="Media.CachingEnabled" value="true"/>
        <!--  MEDIA - DEFAULT IMAGE BACKGROUND COLOR
            The default background color for dynamically resizing images to different aspect ratios than the originals. 
            Sitecore applies this background color only for image types that do not support transparency (image/jpeg, image/gif and image/bmp).
            When resizing any other image types (including image/png), Sitecore always applies a transparent background.
            You can specify a color name (such as Black or Red) or a hex color code (such as #CE55E2).
            If you specify no value, Sitecore applies a black background color when resizing such images. 
            Default value: "" 
      -->
        <setting name="Media.DefaultImageBackgroundColor" value=""/>
        <!--  MEDIA - IMAGE FORMAT
            The default ImageFormat to use when it's not possible to deduce this from an extension.
            The value must be parsable to a valid System.Drawing.Imaging.ImageFormat value.
            If the value is not set, the Sitecore.Resources.Media.MediaConfig.GetImageFormat() method may
            return null causing image functions to fail.
      -->
        <setting name="Media.DefaultImageFormat" value="Jpeg"/>
        <!--  MEDIA - ENABLE RANGE RETRIEVAL REQUEST
            Enables or disables range retrieval requests (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2)
      -->
        <setting name="Media.EnableRangeRetrievalRequest" value="true"/>
        <!--  MEDIA - FILE FOLDER
            The folder under which media files are stored by the system.
            Default value: /App_Data/MediaFiles
            It should be different from MediaFolder setting
      -->
        <setting name="Media.FileFolder" value="/App_Data/MediaFiles"/>
        <!--  MEDIA - FILE SYSTEM WATCHER - BUFFER SIZE
            The size (in bytes) of the internal buffer used by the file system watchers that monitor the file system change 
            notifications and raise events when a directory, or file in a directory, changes.
            If you get log entries about internal buffer overflow, increasing the value of this setting may solve this problem. 
            The minimum size is 4096 (4 KB).
            The maximum size is 65536 (64 KB).
            Be aware that increasing this value could hurt performance. See http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.internalbuffersize%28v=vs.110%29.aspx.
            Default value: 8192
      -->
        <setting name="Media.FileSystemWatcher.BufferSize" value="8192" />
        <!--  MEDIA - USE FILE EXTENSION IN ITEM NAMES
            Indicating whether to include a file extension when generating an item name from a file name.
            Default value: "false"
      -->
        <setting name="Media.IncludeExtensionsInItemNames" value="false"/>
        <!--  MEDIA - INTERPOLATION
            The interpolation mode to use when resizing images.
            See also the System.Drawing.Drawing2D.InterpolationMode enum.
            Valid values:  Bicubic
                           Bilinear
                           Default
                           High
                           HighQualityBicubic
                           HighQualityBilinear
                           Low
                           NearestNeighbor
            Default value: High
      -->
        <setting name="Media.InterpolationMode" value="High"/>

        <!--  MEDIA LOWER CASE URLs
            If true, Sitecore will generate lower case URLs when it uses the MediaProvider API and/or the link provider to render media URLs.
            If blank, Sitecore will use the same value as the lowercaseUrls attribute from the link provider.
            Default value: "" (use the value from the link provider)
      -->
        <setting name="Media.LowercaseUrls" value=""/>

        <!--  MEDIA - MAX IMAGE WIDTH
            Gets the max width of the image in a Rich Text field.
            Default value: 0
      -->
        <setting name="Media.MaxImageWidth" value="0"/>
        <!--  MEDIA - MAX SIZE IN DATABASE
            The maximum allowed size of media intended to be stored in a database (binary blob).
            This value must be less than the ASP.NET httpRuntime.maxRequestLength setting.
            Default value: 500MB
      -->
        <setting name="Media.MaxSizeInDatabase" value="500MB"/>
        <!--  MEDIA - MAX SIZE IN MEMORY
            The maximum size of media to load into memory for processing (resizing etc.).
            Default value: 40MB
      -->
        <setting name="Media.MaxSizeInMemory" value="40MB"/>
        <!--  MEDIA - MEDIA LINK PREFIX
            The prefix to use when Sitecore generates media links. The setting is used in the front-end as well as the back-end.
            Notice: If you specify a custom media link prefix, you must also add a corresponding entry to the <customHandlers> section.

            If the value is not set, the default media request prefix will be used (which by default is "-/media")
            Default value: ""
      -->
        <setting name="Media.MediaLinkPrefix" value=""/>
        <!--  MEDIA - MEDIA LINK SERVER URL
            The server URL to use when Sitecore generates media links and when Media.AlwaysIncludeServerUrl is set to true. This is typically
            used when all media is served from one or more dedicated instances or when your solution is configured to store Sitecore media on
            a content delivery network. 
            The URL must use this format: <protocol>://<hostname>, for example http://example.com 
            If the value is not set, the URL of the current server will be used.
            Default value: ""
      -->
        <setting name="Media.MediaLinkServerUrl" value=""/>
        <!--  MEDIA - OPEN CONTENT EDITOR AFTER UPLOAD
            Determines if the content editor must be opened after a file has been uploaded.
            This ensures that users will supply meta data for the new media item.
            Default value: true
      -->
        <setting name="Media.OpenContentEditorAfterUpload" value="true"/>
        <!--  MEDIA - RESIZING MAX HEIGHT 
            Maximum height for dynamically resized images. 
            If the requested height exceeds this value, Sitecore resizes the image to this height.
            A value of 0 disables this height limit.
            Default value: 1024
      -->
        <setting name="Media.Resizing.MaxHeight" value="1024"/>
        <!--  MEDIA - RESIZING MAX WIDTH
            Maximum width for dynamically resized images. 
            If the requested width exceeds this value, Sitecore resizes the image to this width.
            A value of 0 disables this width limit.
            Default value: 1280
      -->
        <setting name="Media.Resizing.MaxWidth" value="1280"/>
        <!--  MEDIA - RESIZING - QUALITY
            Specifies the level of compression to use when resizing images. 
            See also the System.Drawing.Imaging.Encoder.Quality field.
            The range of values is 0 (lowest quality) to 100 (highest quality).
            Default value: 95
      -->
        <setting name="Media.Resizing.Quality" value="95"/>
        <!--  MEDIA - RESIZING - COMPOSITING MODE
            Specifies how the source colors are combined with the background colors when resizing images.
            See also the System.Drawing.Drawing2D.CompositingMode enum.
            Valid values:  SourceOver  (the source color is blended with the background color, as determined by the alpha component of the source color)
                           SourceCopy  (the source color overwrites the background color)
            Default value: SourceCopy
      -->
        <setting name="Media.Resizing.CompositingMode" value="SourceCopy"/>
        <!--  MEDIA - RESIZING - PIXEL OFFSET MODE
            Specifies how pixels are offset when resizing images. 
            See also the System.Drawing.Drawing2D.PixelOffsetMode enum.
            Valid values:  Default     (default)
                           HighSpeed   (high speed, low quality)
                           HighQuality (high quality, low speed)
                           None        (no pixel offset)
                           Half        (pixels are offset by -.5 units, for high speed antialiasing)
            Default value: Half
      -->
        <setting name="Media.Resizing.PixelOffsetMode" value="Half"/>
        <!--  MEDIA - REQUEST EXTENSION
            The extension to use in media request URLs.
            If the value is not set, the Extension field of the individual media items will be used (ie. JPG, GIF, etc.)
            Default value: "ashx"
      -->
        <setting name="Media.RequestExtension" value="ashx"/>
        <!--  STREAM BUFFER
            Block size used when writing media to the response stream.
            Default: 100000
      -->
        <setting name="Media.StreamBufferSize" value="100000"/>
        <!--  UPLOAD AS FILES
            Controls whether Sitecore stores media as files or as database records by default.
            This setting is ignored if the Media.DisableFileMedia setting is true.
            Default: false
      -->
        <setting name="Media.UploadAsFiles" value="false"/>
        <!--  MEDIA - UPLOAD AS VERSIONABLE AS DEFAULT
            This setting controls if uploaded media is versionable by default or not.
      -->
        <setting name="Media.UploadAsVersionableByDefault" value="false"/>
        <!--  MEDIA - USE ITEM PATHS FOR URLS
            This setting controls if item paths are used for constructing media URLs.
            If false, short ids will be used.
            Default value: true
      -->
        <setting name="Media.UseItemPaths" value="true"/>
        <!--  MEDIA - USE LEGACY RESIZING
            This setting controls whether to use legacy resizing (ie. bypass the Sitecore.ImageLib library).
            Default value: false
      -->
        <setting name="Media.UseLegacyResizing" value="false"/>
        <!--  MEDIA - STREAM PARTIALLY CACHED FILES
            Indicates whether to start streaming files before they have been fully written to the cache.
            Default value: true.
      -->
        <setting name="Media.StreamPartiallyCachedFiles" value="true"/>
        <!--  MEDIA - WHITESPACE REPLACEMENT
            The character to use when replacing whitespace in the names of uploaded media.
            Default value: A single space character.
      -->
        <setting name="Media.WhitespaceReplacement" value=" "/>
        <!--  REMOVE UNUSED BLOBS ON SAVE
            Specifies whether unused blobs should be deleted from an item when it is saved. This setting only checks items that contain blob fields.
            To improve performance during a bulk upload of media files, set this setting to "false".
            When this setting is set to "false", you must run the CleanupDatabase task periodically.
            Default value: true.
      -->
        <setting name="RemoveUnusedBlobsOnSave" value="true"/>
        <!--  MEDIA RESPONSE - CACHEABILITY
            The <see cref="HttpCacheability">cacheability</see> to use in media response headers.
            Possible values: NoCache, Private, Public, Server, ServerAndNoCache, ServerAndPrivate
            Default value: private
      -->
        <setting name="MediaResponse.Cacheability" value="private"/>
        <!--  MEDIA RESPONSE - CacheExtensions
            The <see cref="HttpCachePolicy.AppendCacheExtension">cache extension(s)</see> to use in media response headers.
            Default value: ""
      -->
        <setting name="MediaResponse.CacheExtensions" value=""/>
        <!--  MEDIA RESPONSE - MAX AGE
            The <see cref="HttpCachePolicy.SetMaxAge">max age</see> to use in media response headers.
            Set it to "00:00:00" to omit this header.
            Default value: 7.00:00:00 (seven days)
      -->
        <setting name="MediaResponse.MaxAge" value="7.00:00:00"/>
        <!--  MEDIA RESPONSE - SLIDING EXPIRATION
            The <see cref="HttpCachePolicy.SetSlidingExpiration">sliding expiration</see> to use in media response headers.
            Set it to "" to omit this header. To include it, use "true" or "false".
            Default value: ""
      -->
        <setting name="MediaResponse.SlidingExpiration" value=""/>
        <!--  MEDIA RESPONSE - VARY HEADER
            Specifies the value for the Vary HTTP header to use in media response headers.
            Set it to "" to omit this header.
            Default value: ""
      -->
        <setting name="MediaResponse.VaryHeader" value=""/>
        <!--  ACCESS DENIED HANDLER
            Url of page handling 'Acess denied' errors
      -->
        <setting name="NoAccessUrl" value="/sitecore/service/noaccess.aspx"/>
        <!--  NO LICENSE FOUND HANDLER
            Url of page handling missing license errors
      -->
        <setting name="NoLicenseUrl" value="/sitecore/service/nolicense.aspx"/>
        <!--  PACKAGE PATH
            Specifies the path where packages are located.
      -->
        <setting name="PackagePath" value="$(dataFolder)/packages"/>
        <!--  PAGE STATE STORE
            Specifies the type responsible for storing SheerUI page state. Must implement the IPageStateStore interface. 
            Possible values are "DatabasePageStateStore" or "FilePageStateStore".
            Default value: Sitecore.Web.UI.FilePageStateStore, Sitecore.Kernel
      -->
        <setting name="PageStateStore" value="Sitecore.Web.UI.FilePageStateStore, Sitecore.Kernel" />
        <!--  PAGE PREVIEW SITE NAME 
            Specifies the name of the site that is used to generate page previews, for example "website".
            If blank, Sitecore uses the value in the Preview.DefaultSite setting.
            Default value: "" (use the value of the Preview.DefaultSite setting)
       -->
        <setting name="PagePreview.SiteName" value="" />
        <!--  PAGE PREVIEW SESSION EXPIRATION PERIOD
            Specifies the period of time during which page previews are valid.
            Default value: 365.00:00:00 (1 year)
      -->
        <setting name="PagePreview.SessionExpirationPeriod" value="365.00:00:00" />
        <!--  PAGE PREVIEW MAX PREVIEW SESSIONS COUNT
            Specifies the maximum number of preview sessions that are stored for a language version of an item.
            Default value: 32
      -->
        <setting name="PagePreview.MaxSessionsCount" value="32" />
        <!--  PORTAL PRINCIPAL RESOLVER
            Returns an IPortalPrincipalResolver interface that resolves the current
            portal user.
      -->
        <setting name="PortalPrincipalResolver" value="Sitecore.Web.UI.Portal.PortalPrincipalResolver,Sitecore.Kernel"/>
        <!--  PORTAL Storage
            Returns an IPortalStorage which fetches data for the current portal user.
      -->
        <setting name="PortalStorage" value="Sitecore.Web.UI.Portal.PortalCookieStorage,Sitecore.Kernel"/>
        <!--  PREVIEW - RESOLVE SITE
            If false, the Preview.DefaultSite setting specifies the context site to use when a user previews an item.
            If true, when a user previews an item, Sitecore tries to resolve the root item and the context site based on the current content language
            and the path to the item. If Sitecore cannot resolve the context site, it uses the site that is specified in the Preview.DefaultSite setting.
            Default value: true
      -->
        <setting name="Preview.ResolveSite" value="true" />
        <!--  PROCESS HISTORY
            The number of process histories to show in the log file at startup.
            Set to 0 (zero) to disable
      -->
        <setting name="ProcessHistoryCount" value="1"/>
        <!--  PROCESSING - MAX DEGREE OF PARALLELISM
            This setting defines the maximum number of locks that can be stored in the LockSet collection that controls parallel execution.
            The classes that use the LockSet collection and are affected by the setting: DataEngine, SQLDataProvider,
            SQLServerClientDataStore, SQLServerDataProvider, SQLLinkDatabase, Pipeline, SqlRolesInRolesProvider.
            
            The optimal value for this setting depends on your solution and on the CPU capacity of the server.
            We highly recommend that you perform tests with the expected load before you change this setting in a production environment.
            
            Default value: 256
      -->
        <setting name="Processing.MaxDegreeOfParallelism" value="256"/>
        <!--  AUTO SMART PUBLISHING
            Automatically schedule a smart publish when proxy definitions etc. change?
      -->
        <setting name="Publishing.AutoScheduleSmartPublish" value="true"/>
        <!--  PUBLISHING SECURITY
            Check security rights when publishing?
            When CheckSecurity=true, Read rights are required for all source items. When it is
            determined that an item should be updated or created in the target database,
            Write right is required on the source item. If it is determined that the item
            should be deleted from target database, Delete right is required on the target item.
            In summary, only the Read, Write and Delete rights are used. All other rights are ignored.
            Default value: false
      -->
        <setting name="Publishing.CheckSecurity" value="false"/>
        <!--  PUBLISHING REVISIONS
            Compare revisions while publishing?
      -->
        <setting name="Publishing.CompareRevisions" value="true"/>
        <!--  PUBLISHING - DISABLE DATABASE CACHES
            Provides a default value for the PublishContext class that indicates whether to populate the database caches with the data that
            is retrieved during publishing.
            The value you specify is used for incremental publishing operations. For other publishing operations, the default value
            specified in this setting is overridden by the OverridePublishContext processor in the publish pipeline to match the type of
            publishing operation.
            If true, Sitecore publishes the items as usual, but does not populate the database caches with the item data that is retrieved
            during the publishing operation. This can significantly reduce the amount of memory used by the ASP.NET worker process,
            especially in solutions with a large number of items, versions, and languages.
            If false, the item data is cached during publishing as usual.
            Default value: false
      -->
        <setting name="Publishing.DisableDatabaseCaches" value="false"/>
        <!-- PUBLISHING - EXECUTE IN MANAGED THREAD POOL
           This setting specifies whether publishing jobs should be executed in Sitecore's managed thread pool.
           If true, publishing jobs are queued to the managed thread pool.
           If false, Sitecore creates a new thread for each publishing job.
           Default value: false
      -->
        <setting name="Publishing.ExecuteInManagedThreadPool" value="false" />
        <!--  PUBLISHING LOG INTERVAL
            Interval between logging published item info to the log.
            Set to 0 (zero) to disable.
      -->
        <setting name="Publishing.LogInterval" value="0"/>
        <!--  PUBLISHING - MAX DEGREE OF PARALLELISM
            This setting allows you to limit the number of concurrent publishing operations.
            You must enable the /App_Config/Include/Sitecore.Publishing.Parallel.config file for this setting to take effect.

            Important: changing the value of this setting to anything other than the default value '1' and enabling the 
            Sitecore.Publishing.Parallel.config file will increase the load on the database server.

            If the value is set to -1, there is no limit on the number of concurrently running operations.
            Default value: 1
      -->
        <setting name="Publishing.MaxDegreeOfParallelism" value="1" />
        <!--  PUBLISHING PUBLISH DIALOG POLLING INTERVAL
            Defines the interval in ms with which the Publish Dialog requests the
            server for the publishing status.
      -->
        <setting name="Publishing.PublishDialogPollingInterval" value="500"/>
        <!-- PUBLISHING PUBLISH EMPTY ITEMS
           Specifies whether empty items (i.e. items without publishable versions) should be published.
           Default value: false
      -->
        <setting name="Publishing.PublishEmptyItems" value="false"/>
        <!--  PUBLISHING INSTANCE
            Assigns the instance name of dedicated Sitecore installation for publishing operations.
            When empty, all publishing operations are performed on the local installation of Sitecore.
            Default vaue: (empty)
      -->
        <setting name="Publishing.PublishingInstance" value=""/>

        <!--  PUBLISHING DEEP SCAN RELATED ITEM
            This setting specifies that all the subitems of the item being published are 
            scanned recursively for changes and that all the changed items are published.
            Default vaue: true
      -->
        <setting name="Publishing.DeepScanRelatedItems" value="true"/>

        <!--  PUBLISHING - RECOVERY - ENABLED
            Determines whether the system should restart interrupted publishing operations after a system failure, such as server restart.
            To activate this feature, you must enable the /App_Config/Include/Sitecore.Publishing.Recovery.config file which overrides this
            setting and provides additional configuration.
            Default value: false
      -->
        <setting name="Publishing.Recovery.Enabled" value="false"/>
        <!--  PUBLISHING SECURITY
            Check delete rights on target item when publishing?
            Default value: true
      -->
        <setting name="Publishing.RequireTargetDeleteRightWhenCheckingSecurity" value="true"/>
        <!--  PUBLISHING STATUS UPDATE INTERVAL
            The time between updating the status cache for running publishing jobs.
            Default value: 00:00:02
      -->
        <setting name="Publishing.StatusUpdateInterval" value="00:00:02"/>
        <!--  PUBLISHING PRIORITY
            The thread priority of publishing jobs.
            Valid values: Lowest, BelowNormal, Normal, AboveNormal, Highest
            Default value: BelowNormal
      -->
        <setting name="Publishing.ThreadPriority" value="BelowNormal"/>
        <!--  TIME BEFORE PUBLISHING STATUS EXPIRES
            The time before a cached status registration expires.
            Default value: 02:00:00
      -->
        <setting name="Publishing.TimeBeforeStatusExpires" value="02:00:00"/>
        <!--  Query.MaxItems
            Specifies the max number of items in a query result set.
            If the number is 0, all items are returned. This may affect system performance, if a
            large query result is returned.
            This also controls the number of items in Lookup, Multilist and Valuelookup fields.
            Default value: 100
      -->
        <setting name="Query.MaxItems" value="100"/>
        <!--  RECYCLE BIN
            If true, when deleting items in the client, they will
            be moved to the recycle bin rather than being deleted
            Default value: true
      -->
        <setting name="RecycleBinActive" value="true"/>
        <!--  RENDERING - HTML ENCODED FIELD TYPES
            Specifies a pipe-separated list of field types that should be HTML encoded when rendered by the <renderField> pipeline.
            Default value: text|single-line text
      -->
        <setting name="Rendering.HtmlEncodedFieldTypes" value="text|single-line text" />
        <!--  IMAGES AS XHTML
            Indicate whether to render images as XHTML.
            Default value: true
      -->
        <setting name="Rendering.ImagesAsXhtml" value="true"/>
        <!--  DUPLICATE PLACEHOLDERS
            Indicate whether to process duplicate placeholders
            Default value: false
      -->
        <setting name="Rendering.ProcessDuplicatePlaceholders" value="false"/>
        <!--  SITE RESOLVING
            While rendering item links, some items may belong to different site. Setting this to true
            make LinkManager try to resolve target site in order to use the right host name.
            Default value: true
      -->
        <setting name="Rendering.SiteResolving" value="true"/>
        <!--  RENDERING - SITE RESOLVING MATCH CURRENT LANGUAGE
            Affects how cross-site links are rendered when Rendering.SiteResolving is enabled.
            If true, the link provider will take the language attribute of the site definitions into consideration when resolving
            which site/hostname to use when rendering a cross-site link.
            Default value: true
      -->
        <setting name="Rendering.SiteResolvingMatchCurrentLanguage" value="true"/>
        <!--  RENDERING - SITE RESOLVING MATCH CURRENT SITE
            Affects how cross-site links are rendered when Rendering.SiteResolving is enabled.
            If true, the link provider will check if the target item is located under the start item for the current site before it
            tries to find a match in the full list of site definitions. This ensures that when the target item can be resolved using
            the current site, the target link will not change to a different site/hostname.
            Default value: true
      -->
        <setting name="Rendering.SiteResolvingMatchCurrentSite" value="true"/>
        <!--  USE SERVER-SIDE REDIRECT FOR REQUEST ERRORS
            If true, Sitecore will use Server.Transfer instead of Response.Redirect to redirect request to service pages
            when an error occurs (item not found, access denied etc).
            Default value: false
      -->
        <setting name="RequestErrors.UseServerSideRedirect" value="false"/>
        <!--  REQUIRE LOCK BEFORE EDITING
            If true, the user must have a lock on a document before
            he can edit it, otherwise it is always ready for editing
      -->
        <setting name="RequireLockBeforeEditing" value="true"/>
        <!--  SEARCH CLASSIC SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using the Search application (classic search) to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 15
      -->
        <setting name="Search.ClassicSearch.MaxResults" value="15"/>
        <!--  SEARCH CONTENT TREE SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using the search panel above the content tree to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 25
      -->
        <setting name="Search.ContentTreeSearch.MaxResults" value="25"/>
        <!--  SEARCH INSTANT SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using
            the instant search panel (on the status bar in the Sitecore Desktop) to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 15
      -->
        <setting name="Search.InstantSearch.MaxResults" value="15"/>
        <!--  SESSION EXPIRATION THREAD COUNT
            Specifies the number of threads that should run simultaneously to
            process the work items in the queue when a session expires.
            If the value is not set, or the setting is omitted altogether,
            the Environment.ProcessorCount value is used.
            Default value: <empty>
      -->
        <setting name="SessionExpirationThreadCount" value="" />
        <!--  SESSION PROCESSING INTERVAL
            The time in seconds between processing batches of expired sessions when the number of expired sessions is less than the defined batch size.
            Measured in seconds.
            Default value: 5
      -->
        <setting name="SessionExpirationProcessingInterval" value="5"/>
        <!--  SESSION EXPIRATION BATCH SIZE
            The number of expired sessions that are processed in a batch.
            Default value: 100
      -->
        <setting name="SessionExpirationBatchSize" value="100"/>
        <!--  RULES - MAX CACHED RULES
            Determines the size of the rules cache.
            Specify the value in bytes or append the value with KB, MB or GB
            A value of 0 (zero) disables the cache.
            Default value: 4MB
      -->
        <setting name="Rules.MaxCachedRules" value="4MB"/>
        <!--  RULES - ITEM EVENT HANDLERS - RUN DURING PUBLISHING
            Specifies whether the rule item handlers should be fired during publishing when an item is saved, deleted, or when an item
            version is removed.
            This setting only affects the instance that runs the publishing operation.
            To suppress rules execution on content delivery instances, use the Rules.ItemEventHandlers.SupportedDatabases setting.
            Default value: true
      -->
        <setting name="Rules.ItemEventHandlers.RunDuringPublishing" value="true"/>
        <!--  RULES - ITEM EVENT HANDLERS - SUPPORTED DATABASES
            Specifies a pipe-separated list of database names. For example: "core|master". 
            The rule item event handlers that normally fire when an item is saved, deleted, or an item version is removed, are only fired
            for the specified databases.
            For example, on content delivery instances, you can use this setting to disable the rule item event handlers in the web database
            to prevent performance degradation during publishing due to rules execution.
            If blank, the item event handlers are executed for every Sitecore database.
            Default value: ""
      -->
        <setting name="Rules.ItemEventHandlers.SupportedDatabases" value=""/>
        <!--  SERVER TIME ZONE
            This setting specifies the server time zone that is used by the server to convert UTC time to local time, for example "GMT Standard Time".
            The value must be parsable to a valid Time Zone ID. See http://msdn.microsoft.com/en-us/library/gg154758.aspx
            If blank, Sitecore uses the operating system time zone.
            Default value: "" (use the operating system time zone)
      -->
        <setting name="ServerTimeZone" value=""/>
        <!--  COLLECT RENDERING DATA
            Indicates if renderings statistics should be collected.
            Default value: true
      -->
        <setting name="Statistics.CollectRenderingData" value="true"/>
        <!--  TASKS - EMAIL REMINDER SUBJECT
            The subject to use for email reminders.
            Default value: Reminder from Sitecore
      -->
        <setting name="Tasks.EmailReminderSubject" value="Reminder from Sitecore"/>
        <!--  TASKS - EMAIL REMINDER STANDARD TEXT
            The leading text to use for email reminders. Custom text will be appended.
            Default value: This is a reminder from Sitecore regarding the item: '{item}' in the database '{database}'
      -->
        <setting name="Tasks.EmailReminderText" value="This is a reminder from Sitecore regarding the item: '{item}' in the database '{database}'"/>
        <!--  TEMP FOLDER
            Folder used for temporary files
      -->
        <setting name="TempFolder" value="$(tempFolder)"/>
        <!--  THUMBNAILS BACKGROUND COLOR
            The background color for thumbnails - must be on the form #RRGGBB.
      -->
        <setting name="ThumbnailsBackgroundColor" value="#FFFFFF"/>
        <!--  VALIDATORS.AUTOMATICUPDATE
            Indicating whether validators are automatically run in the content editor.
      -->
        <setting name="Validators.AutomaticUpdate" value="true"/>
        <!--  VALIDATORS.UPDATEDELAY
            The delay in ms after a key was press until a update request is send.
      -->
        <setting name="Validators.UpdateDelay" value="750"/>
        <!--  UI CALENDAR TIME OF DAY
            Defines the default time of day when the user user the calendar drop down
            to select a day. The drop down does not allow the user to set the time
            of day.
      -->
        <setting name="UI.CalendarTimeOfDay" value="12:00:00"/>
        <!--  UPLOAD CLASSIC
            Indicates if uploading runs in classic (no flash) mode.
            Default: false
      -->
        <setting name="Upload.Classic" value="false"/>
        <!--  SIMPLE UPLOAD OVERWRITING
            Indicates if simple upload dialog has overwriting on.
            Default: false
      -->
        <setting name="Upload.SimpleUploadOverwriting" value="false"/>
        <!--  REDIRECT URL PREFIXES
            Pipe-separated list of URL prefixes to redirect. 
            To support IIS authentication, configure redirection for all URLs secured with IIS authentication. Otherwise, 
            URLs containing embedded languages in the URL might be able to bypass IIS security, which could result in a
            vulnerability. 
            For example, under the default configuration, Sitecore redirects URLs such as "/en/sitecore" to "/sitecore?sc_lang=en" 
            to ensure that IIS authentication is enforced for such URLs.
            Default value: /sitecore
      -->
        <setting name="RedirectURLPrefixes" value="/sitecore"/>
        <!--  UNLOCK COPIED ITEMS
            A value indicating whether to unlock items after copying.
            Only the copies are unlocked. The original items stay locked.
            Default value: true.
      -->
        <setting name="UnlockAfterCopy" value="true"/>
        <!--  VERSION FILE PATH
            The path to the version file.
            Default value: /sitecore/shell/sitecore.version.xml
      -->
        <setting name="VersionFilePath" value="/sitecore/shell/sitecore.version.xml"/>
        <!--  VIEWSTATE STORE
          Specifies the type responsible for storing SheerUI viewstate. Must implement the IViewStateStore interface. 
          Possible values are "Sitecore.Data.DataProviders.DatabaseViewStateStore,Sitecore.Kernel" or 
          "Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel".
          Default value: Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel
    -->
        <setting name="ViewStateStore" value="Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel"/>
        <!--  WEB EDIT JQuery UI STYLESHEET
            The stylesheet to include in the page editor in WebEdit mode.
            Default value: /sitecore/shell/Controls/Lib/jQuery/jQueryUI/1.10.3/smoothness/jquery-ui-1.10.3.min.css
      -->
        <setting name="WebEdit.JQueryUIStylesheet" value="/sitecore/shell/Controls/Lib/jQuery/jQueryUI/1.10.3/smoothness/jquery-ui-1.10.3.min.css"/>
        <!--  WEB SITE STYLESHEET
            CSS file for HTML content of Sitecore database.
            The file pointed to by WebStylesheet setting is automatically included in Html and Rich Text fields.
            By using it, you can make the content of HTML fields look the same as the actual Web Site
      -->
        <setting name="WebStylesheet" value="/default.css"/>
        <!--  LOGIN MESSAGES
            These are the messages that are shown on the login page of the Sitecore
            client
      -->
        <setting name="WelcomeTitle" value="Welcome to Sitecore"/>
        <!--  WORKBOX - SINGLE COMMENT FOR BULK OPERATION
          Enables using a single comment for workflow bulk actions. 
          Default value: false
      -->
        <setting name="Workbox.SingleCommentForBulkOperation" value="false" />
        <!--  WORKBOX - STATE COMMAND FILTERING - ITEM THRESHOLD
          The maximum number of items allowed in a workflow state to perform command filtering for the state
          when rendered in the workbox. Command filtering per state may have a negative impact on performance
          for the workbox for large volumes of items in a single workflow state.
          Default value: 2000
      -->
        <setting name="Workbox.StateCommandFiltering.ItemThreshold" value="2000"/>
        <!--  WorldLingo.Enabled
            Indicates if WorldLingo is enabled.
      -->
        <setting name="WorldLingo.Enabled" value="false"/>
        <!--  WorldLingo.Url
            Specifies the Url of the the WorldLingo service.
      -->
        <setting name="WorldLingo.Url" value="http://www.worldlingo.com/S000.1/api"/>
        <!--  WorldLingo.Password
            Specifies the Password of the the WorldLingo service. When the password is
            "secret" the service runs in an evaluation mode - the output language is
            random and the phrase is limited to 25 words.
      -->
        <setting name="WorldLingo.Password" value="secret"/>
        <!--  XHTML SCHEMA FILE
            The file name of the schema file that validates XHTML.
            Default value: /sitecore/shell/schemas/Sitecore xhtml5.xsd
      -->
        <setting name="XHtmlSchemaFile" value="/sitecore/shell/schemas/Sitecore xhtml5.xsd"/>
        <!--  XmlControls.ThrowException
            Specifies if an exception is thrown when an Xml Control cannot be loaded.
            If true, it might prevent the Sitecore client from working, but it
            increases debugging. Any errors are written to the log.
      -->
        <setting name="XmlControls.ThrowException" value="false"/>
        <!--  XmlControls.OutputDebugFiles
            Specifies if the code for compiled XmlControls will be saved as *.cs file.
            If true, the *.cs files will be saved in to the debug folders associated with the XmlControls, 
            typically /sitecore/shell/applications/debug or /sitecore/shell/controls/debug.
            Default value: false
      -->
        <setting name="XmlControls.OutputDebugFiles" value="false"/>

        <!-- PREVIEW AS ANONYMOUS
           This setting specifies whether Sitecore will use the Anonymous user account when you preview an item.
           If true, Sitecore uses the Anonymous user account when you preview an item.
           If false, Sitecore uses the current user account when you preview an item.
           Default value: true
      -->
        <setting name="Preview.AsAnonymous" value="true" />

        <!-- Preview.DefaultSite
           Specifies name of the default site for WebEdit preview mode
      -->
        <setting name="Preview.DefaultSite" value="website"/>

        <!--  EmailValidation
            The regular expression used for e-mail validation
            Default: ^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$
      -->
        <setting name="EmailValidation" value="^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$" />
        <!--  HOST NAME VALIDATION
            Regular expression for validating Host Name
      -->
        <setting name="HostNameValidationPattern" value="^([a-zA-Z0-9]+)([a-zA-Z0-9-.]*)([a-zA-Z0-9]+)$"/>
        <!--  PROTECT FROM EXTERNAL LINK WITH BLANK TARGET
            Protects your website from a security vulnerability that exists when an external link contains target="_blank".
            See  https://dev.to/ben/the-targetblank-vulnerability-by-example
            If set to true, sitecore adds the rel="noopener noreferrer" attribute to the link.
            Default: true
    -->
        <setting name="ProtectExternalLinksWithBlankTarget" value="true" />

        <!--  Sitecore.CleanupBlobsBatchSize
            Defines the number of records in the Blobs table that are deleted in a single batch.
            Default: 1000
      -->
        <setting name="Sitecore.CleanupBlobsBatchSize" value="1000" />

    </settings>

    <tracking>
        <untrackedPages>
            <add path="/sitecore/default.aspx" />
            <add path="/sitecore/service/error.aspx" />
            <add path="/sitecore/service/Heartbeat.aspx" />
            <add path="/sitecore/service/keepalive.aspx" />
            <add path="/sitecore/service/nolicense.aspx" />
        </untrackedPages>
    </tracking>

    <serviceProviderBuilder type="Sitecore.DependencyInjection.DefaultServiceProviderBuilder, Sitecore.Kernel"/>

    <!-- Heartbeat -->
    <heartbeatConfiguration type="Sitecore.Services.HeartbeatConfiguration, Sitecore.Kernel">
        <!-- EXCLUDE
           Excludes connection string from being checked by heartbeat
      -->
        <exclude hint="list:AddExcludedConnection">
            <!-- Replace MyDemoString with the actual string you want to be excluded from heartbeat
          
          NOTE: the value of desc attribute should be unique so the node can be patched. Probably the connection string name.

          <connectionStringName desc="My desc">MyDemoString</connectionStringName> 
          -->
        </exclude>
    </heartbeatConfiguration>
</sitecore>
</originalfile><oldHashCode>ecJ7zGtbKrgUGfttSWMyaw==</oldHashCode><newHashCode>S4DEkqYIMvwhg2QZ9vWDbQ==</newHashCode></changeFile>
