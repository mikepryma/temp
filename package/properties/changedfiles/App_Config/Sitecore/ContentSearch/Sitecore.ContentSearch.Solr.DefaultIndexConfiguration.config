version=2.0
xml=<?xml version="1.0" encoding="utf-8"?><changeFile><collisionbehavior></collisionbehavior><path>App_Config\Sitecore\ContentSearch\Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config</path><id>App_Config\Sitecore\ContentSearch\Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config</id><parent></parent><file></file><originalfile>77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8Y29uZmlndXJhdGlvbiB4bWxuczpwYXRjaD0iaHR0cDovL3d3dy5zaXRlY29yZS5uZXQveG1sY29uZmlnLyIgeG1sbnM6cm9sZT0iaHR0cDovL3d3dy5zaXRlY29yZS5uZXQveG1sY29uZmlnL3JvbGUvIiB4bWxuczpzZWFyY2g9Imh0dHA6Ly93d3cuc2l0ZWNvcmUubmV0L3htbGNvbmZpZy9zZWFyY2gvIj4NCiAgPHNpdGVjb3JlIHJvbGU6cmVxdWlyZT0iU3RhbmRhbG9uZSBvciBDb250ZW50TWFuYWdlbWVudCBvciBDb250ZW50RGVsaXZlcnkiIHNlYXJjaDpyZXF1aXJlPSJzb2xyIj4NCiAgICA8Y29udGVudFNlYXJjaD4NCiAgICAgIDwhLS0gQ29uZmlndXJhdGlvbiBzZWN0aW9ucyBmb3IgaW5kZXhlcyAtLT4NCiAgICAgIDxpbmRleENvbmZpZ3VyYXRpb25zPg0KDQogICAgICAgIDwhLS0gSWYgYW4gaW5kZXggaGFzIG5vIGNvbmZpZ3VyYXRpb24gc3BlY2lmaWVkLCBpdCB3aWxsIHVzZSB0aGUgY29uZmlndXJhdGlvbiBiZWxvdy4gVGhlIGNvbmZpZ3VyYXRpb24gaXMgbm90IG1lcmdlZCBpZiB0aGUgaW5kZXggYWxzbyBoYXMNCiAgICAgICAgICAgICBjb25maWd1cmF0aW9uLCBpdCBpcyBlaXRoZXIgdGhpcyBjb25maWd1cmF0aW9uIG9yIHRoZSBpbmRleCBjb25maWd1cmF0aW9uLiAtLT4NCiAgICAgICAgPGRlZmF1bHRTb2xySW5kZXhDb25maWd1cmF0aW9uIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLlNvbHJJbmRleENvbmZpZ3VyYXRpb24sIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIj4NCiAgICAgICAgICA8IS0tIFNob3VsZCBpbmRleCBJbml0aWFsaXplKCkgbWV0aG9kIGJlIGNhbGxlZCBhcyBzb29uIGFzIHRoZSBpbmRleCBpcyBhZGRlZCBvciB3YWl0IGZvciBhbiBleHRlcm5hbCB0cmlnZ2VyIC0tPg0KICAgICAgICAgIDwhLS0gRm9yIFNvbHIgSW5pdGlhbGl6ZSgpIG5lZWRzIHRvIGJlIGNhbGxlZCBhZnRlciB0aGUgSU9DIGNvbnRhaW5lciBoYXMgZmlyZWQgdXAgLS0+DQogICAgICAgICAgPGluaXRpYWxpemVPbkFkZD5mYWxzZTwvaW5pdGlhbGl6ZU9uQWRkPg0KDQogICAgICAgICAgPCEtLSBERUZBVUxUIEZJRUxEIE1BUFBJTkcgDQogICAgICAgICAgICAgICBUaGlzIGZpZWxkIG1hcCBhbGxvd3MgeW91IHRvIHRha2UgZnVsbCBjb250cm9sIG92ZXIgaG93IHlvdXIgZGF0YSBpcyBzdG9yZWQgaW4gdGhlIGluZGV4LiBUaGlzIGNhbiBhZmZlY3QgdGhlIHdheSBkYXRhIGlzIHF1ZXJpZWQsIHBlcmZvcm1hbmNlIG9mIHNlYXJjaGluZyBhbmQgaG93IGRhdGEgaXMgcmV0cmlldmVkIGFuZCBjYXN0ZWQgdG8gYSBwcm9wZXIgdHlwZSBpbiB0aGUgQVBJLiANCiAgICAgICAgICAgIC0tPg0KICAgICAgICAgIDxmaWVsZE1hcCB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5Tb2xyRmllbGRNYXAsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIj4NCiAgICAgICAgICAgIDwhLS0gVGhpcyBlbGVtZW50IG11c3QgYmUgZmlyc3QgLS0+DQogICAgICAgICAgICA8dHlwZU1hdGNoZXMgaGludD0icmF3OkFkZFR5cGVNYXRjaCI+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9Imd1aWRDb2xsZWN0aW9uIiAgICAgdHlwZT0iU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdGAxW1N5c3RlbS5HdWlkXSIgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3NtIiAgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9InRleHRDb2xsZWN0aW9uIiAgICAgdHlwZT0iU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdGAxW1N5c3RlbS5TdHJpbmddIiAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3R4bSIgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9InN0cmluZ0NvbGxlY3Rpb24iICAgdHlwZT0iU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdGAxW1N5c3RlbS5TdHJpbmddIiAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3NtIiAgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImludENvbGxlY3Rpb24iICAgICAgdHlwZT0iU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdGAxW1N5c3RlbS5JbnQzMl0iICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X2ltIiAgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9Imd1aWQiICAgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLkd1aWQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3MiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImlkIiAgICAgICAgICAgICAgICAgdHlwZT0iU2l0ZWNvcmUuRGF0YS5JRCwgU2l0ZWNvcmUuS2VybmVsIiAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3MiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9InNob3J0aWQiICAgICAgICAgICAgdHlwZT0iU2l0ZWNvcmUuRGF0YS5TaG9ydElELCBTaXRlY29yZS5LZXJuZWwiICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3MiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9InN0cmluZyIgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLlN0cmluZyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3MiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9InRleHQiICAgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLlN0cmluZyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3QiICAgY3VsdHVyZUZvcm1hdD0iX3sxfSIgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImludCIgICAgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLkludDMyIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3RsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImJvb2wiICAgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLkJvb2xlYW4iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X2IiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImRhdGV0aW1lIiAgICAgICAgICAgdHlwZT0iU3lzdGVtLkRhdGVUaW1lIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3RkdCIgZm9ybWF0PSJ5eXl5LU1NLWRkJ1QnSEg6bW06c3MuRkZGJ1onIiBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImxvbmciICAgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLkludDY0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3RsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImZsb2F0IiAgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLlNpbmdsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3RmIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImRvdWJsZSIgICAgICAgICAgICAgdHlwZT0iU3lzdGVtLkRvdWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3RkIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9InN0cmluZ0FycmF5IiAgICAgICAgdHlwZT0iU3lzdGVtLlN0cmluZ1tdIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X3NtIiAgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImludEFycmF5IiAgICAgICAgICAgdHlwZT0iU3lzdGVtLkludDMyW10iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X2ltIiAgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImRhdGV0aW1lQXJyYXkiICAgICAgdHlwZT0iU3lzdGVtLkRhdGVUaW1lW10iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZUZvcm1hdD0iezB9X2R0bSIgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImRhdGV0aW1lQ29sbGVjdGlvbiIgdHlwZT0iU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdGAxW1N5c3RlbS5EYXRlVGltZV0iIGZpZWxkTmFtZUZvcm1hdD0iezB9X2R0bSIgbXVsdGlWYWx1ZWQ9InRydWUiICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICAgIDx0eXBlTWF0Y2ggdHlwZU5hbWU9ImNvb3JkaW5hdGUiICAgICAgICAgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5EYXRhLkNvb3JkaW5hdGUsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRGF0YSIgZmllbGROYW1lRm9ybWF0PSJ7MH1fcnB0IiAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuU29sclNlYXJjaEZpZWxkQ29uZmlndXJhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICAgICAgICA8L3R5cGVNYXRjaGVzPg0KDQogICAgICAgICAgICA8IS0tIFRoaXMgYWxsb3dzIHlvdSB0byBtYXAgYSBmaWVsZCBuYW1lIGluIFNpdGVjb3JlIHRvIHRoZSBpbmRleCBhbmQgc3RvcmUgaXQgaW4gdGhlIGFwcHJvcHJpYXRlIHdheSAtLT4NCiAgICAgICAgICAgIDwhLS0gQWRkIHNjaGVtYSBmaWVsZHMgaGVyZSB0byBlbmFibGUgbXVsdGktbGFuZ3VhZ2UgcHJvY2Vzc2luZyAtLT4NCiAgICAgICAgICAgIDxmaWVsZE5hbWVzIGhpbnQ9InJhdzpBZGRGaWVsZEJ5RmllbGROYW1lIj4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iX19jcmVhdGVkX2J5IiAgICAgICAgIHJldHVyblR5cGU9InN0cmluZyIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iX19zbWFsbGNyZWF0ZWRkYXRlIiAgIHJldHVyblR5cGU9ImRhdGV0aW1lIiBmb3JtYXQ9Inl5eXktTU0tZGQnVCdISFw6bW1cOnNzJ1onIiAvPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJfX3NtYWxsdXBkYXRlZGRhdGUiICAgcmV0dXJuVHlwZT0iZGF0ZXRpbWUiIGZvcm1hdD0ieXl5eS1NTS1kZCdUJ0hIXDptbVw6c3MnWiciIC8+DQogICAgICAgICAgICAgIDxmaWVsZCBmaWVsZE5hbWU9Il9fd29ya2Zsb3dfc3RhdGUiICAgICByZXR1cm5UeXBlPSJzdHJpbmciIC8+DQogICAgICAgICAgICAgIDxmaWVsZCBmaWVsZE5hbWU9ImV4dGVuc2lvbiIgICAgICAgICAgICByZXR1cm5UeXBlPSJ0ZXh0IiAvPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJ0aXRsZSIgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0idGV4dCIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0idHlwZSIgICAgICAgICAgICAgICAgIHJldHVyblR5cGU9InRleHQiIC8+DQogICAgICAgICAgICA8L2ZpZWxkTmFtZXM+DQoNCiAgICAgICAgICAgIDwhLS0gRklFTEQgVFlQRSBNQVBQSU5HDQogICAgICAgICAgICAgICAgIFRoaXMgYWxsb3dzIHlvdSB0byBtYXAgYSBmaWVsZCB0eXBlIGluIFNpdGVjb3JlIHRvIGEgdHlwZSBpbiB0aGUgaW5kZXguDQogICAgICAgICAgICAgICAgIFVTQUdFOiBXaGVuIHlvdSBhZGQgbmV3IGZpZWxkIHR5cGVzIHRvIFNpdGVjb3JlLCBhZGQgdGhlIG1hcHBpbmdzIGhlcmUgc28gdGhleSB3b3JrIHRocm91Z2ggdGhlIExpbnEgTGF5ZXIgDQogICAgICAgICAgICAgIC0tPg0KICAgICAgICAgICAgPGZpZWxkVHlwZXMgaGludD0icmF3OkFkZEZpZWxkQnlGaWVsZFR5cGVOYW1lIj4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJjaGVja2JveCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iYm9vbCIgICAgICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJkYXRlfGRhdGV0aW1lIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iZGF0ZXRpbWUiICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJodG1sfHJpY2ggdGV4dHxzaW5nbGUtbGluZSB0ZXh0fG11bHRpLWxpbmUgdGV4dHx0ZXh0fG1lbW98aW1hZ2V8cmVmZXJlbmNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0idGV4dCIgICAgICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJ3b3JkIGRvY3VtZW50IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0idGV4dCIgICAgICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJpbnRlZ2VyIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0ibG9uZyIgICAgICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJudW1iZXIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iZmxvYXQiICAgICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJpY29ufGRyb3BsaXN0fGdyb3VwZWQgZHJvcGxpc3QiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0ic3RyaW5nIiAgICAgICAgICAgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJjaGVja2xpc3R8bXVsdGlsaXN0fHRyZWVsaXN0fHRyZWUgbGlzdHx0cmVlbGlzdGV4fHRyZWUgbGlzdHxtdWx0aWxpc3Qgd2l0aCBzZWFyY2h8dHJlZWxpc3Qgd2l0aCBzZWFyY2giICAgcmV0dXJuVHlwZT0ic3RyaW5nQ29sbGVjdGlvbiIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJuYW1lIGxvb2t1cCB2YWx1ZSBsaXN0fG5hbWUgdmFsdWUgbGlzdCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0ic3RyaW5nQ29sbGVjdGlvbiIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkVHlwZSBmaWVsZFR5cGVOYW1lPSJkcm9wbGlua3xkcm9wdHJlZXxncm91cGVkIGRyb3BsaW5rfHRyZWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0ic3RyaW5nQ29sbGVjdGlvbiIgLz4NCiAgICAgICAgICAgIDwvZmllbGRUeXBlcz4NCiAgICAgICAgICA8L2ZpZWxkTWFwPg0KDQogICAgICAgICAgPGRvY3VtZW50T3B0aW9ucyB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5Tb2xyRG9jdW1lbnRCdWlsZGVyT3B0aW9ucywgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiPg0KICAgICAgICAgICAgPCEtLSBUaGlzIGZsYWcgd2lsbCBpbmRleCBhbGwgZmllbGRzIGJ5IGRlZmF1bHQuIFRoaXMgYWxsb3dzIG5ldyBmaWVsZHMgaW4geW91ciB0ZW1wbGF0ZXMgdG8gYXV0b21hdGljYWxseSBiZSBpbmNsdWRlZCBpbnRvIHRoZSBpbmRleC4NCiAgICAgICAgICAgICAgIFlvdSBoYXZlIHR3byBjaG9pY2VzIDogDQogICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgIDEpIFNldCB0aGlzIHRvIHRydWUgYW5kIHBsYWNlIGFsbCB0aGUgZmllbGRzIHlvdSB3b3VsZCBsaWtlIHRvIHJlbW92ZSBpbiB0aGUgJ0V4Y2x1ZGVGaWVsZCcgbGlzdCBiZWxvdy4NCiAgICAgICAgICAgICAgIDIpIFNldCB0byBmYWxzZSBhbmQgcGxhY2UgYWxsIGZpZWxkcyB5b3Ugd291bGQgbGlrZSB0byBiZSBpbmRleGVkIGluIHRoZSAnSW5jbHVkZUZpZWxkJyBsaXN0IGJlbG93Lg0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgICA8aW5kZXhBbGxGaWVsZHM+dHJ1ZTwvaW5kZXhBbGxGaWVsZHM+DQoNCiAgICAgICAgICAgIDwhLS0gR0xPQkFMTFkgRVhDTFVERSBURU1QTEFURVMgRlJPTSBCRUlORyBJTkRFWEVEDQogICAgICAgICAgICAgICAgIFRoaXMgc2V0dGluZyBhbGxvd3MgeW91IHRvIGV4Y2x1ZGUgaXRlbXMgdGhhdCBhcmUgYmFzZWQgb24gc3BlY2lmaWMgdGVtcGxhdGVzIGZyb20gdGhlIGluZGV4Lg0KICAgICAgICAgICAgICAgICBUZW1wbGF0ZSBpbmhlcml0YW5jZSB3aWxsIGJlIGNoZWNrZWQgaWYgY2hlY2tUZW1wbGF0ZUluaGVyaXRhbmNlIGlzIGVuYWJsZWQuDQogICAgICAgICAgICAtLT4NCiAgICAgICAgICAgIDxleGNsdWRlIGhpbnQ9Imxpc3Q6QWRkRXhjbHVkZWRUZW1wbGF0ZSI+DQogICAgICAgICAgICAgIDxCdWNrZXRGb2xkZXJUZW1wbGF0ZUlkPntBREI2Q0E0Ri0wM0VGLTRGNDctQjlBQy05Q0UyQkE1M0ZGOTd9PC9CdWNrZXRGb2xkZXJUZW1wbGF0ZUlkPg0KICAgICAgICAgICAgPC9leGNsdWRlPg0KDQogICAgICAgICAgICA8IS0tIEdMT0JBTExZIElOQ0xVREUgVEVNUExBVEVTIElOIElOREVYDQogICAgICAgICAgICAgICAgIFRoaXMgc2V0dGluZyBhbGxvd3MgeW91IHRvIG9ubHkgaW5jbHVkZSBpdGVtcyB0aGF0IGFyZSBiYXNlZCBvbiBzcGVjaWZpYyB0ZW1wbGF0ZXMgaW4gdGhlIGluZGV4LiBUZW1wbGF0ZSBpbmhlcml0YW5jZSB3aWxsIGJlDQogICAgICAgICAgICAgICAgIGNoZWNrZWQgaWYgY2hlY2tUZW1wbGF0ZUluaGVyaXRhbmNlIGlzIGVuYWJsZWQuDQogICAgICAgICAgICAgICAgIFdoZW4geW91IGVuYWJsZSB0aGlzIHNldHRpbmcsIGFsbCB0aGUgaXRlbXMgdGhhdCBhcmUgYmFzZWQgb24gb3RoZXIgdGVtcGxhdGVzIGFyZSBleGNsdWRlZCwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSB0ZW1wbGF0ZQ0KICAgICAgICAgICAgICAgICBpcyBzcGVjaWZpZWQgaW4gdGhlIEV4Y2x1ZGVUZW1wbGF0ZSBsaXN0IG9yIG5vdC4NCiAgICAgICAgICAgIC0tPg0KICAgICAgICAgICAgPCEtLQ0KICAgICAgICAgICAgPGluY2x1ZGUgaGludD0ibGlzdDpBZGRJbmNsdWRlZFRlbXBsYXRlIj4NCiAgICAgICAgICAgICAgPFN0YW5kYXJkVGVtcGxhdGU+ezE5MzBCQkVCLTc4MDUtNDcxQS1BM0JFLTQ4NThBQzdDRjY5Nn08L1N0YW5kYXJkVGVtcGxhdGU+DQogICAgICAgICAgICA8L2luY2x1ZGU+LS0+DQoNCiAgICAgICAgICAgIDwhLS0gVGhpcyBmbGFnIHdpbGwgZW5hYmxlIGNoZWNraW5nIHRlbXBsYXRlIGluaGVyaXRhbmNlIC8gYmFzZSB0ZW1wbGF0ZXMgd2hlbiBzcGVjaWZ5aW5nIHRlbXBsYXRlcyB0byBpbmNsdWRlDQogICAgICAgICAgICAgICAgIG9yIGV4Y2x1ZGUgZnJvbSB0aGUgaW5kZXguIFRoaXMgZWxpbWluYXRlcyB0aGUgbmVlZCB0byBleHBsaWNpdGx5IHNwZWNpZnkgYWxsIHRlbXBsYXRlcyB0byBpbmNsdWRlIG9yDQogICAgICAgICAgICAgICAgIGV4Y2x1ZGUsIGJ1dCBtYXkgYWZmZWN0IHBlcmZvcm1hbmNlLg0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgICA8Y2hlY2tUZW1wbGF0ZUluaGVyaXRhbmNlPnRydWU8L2NoZWNrVGVtcGxhdGVJbmhlcml0YW5jZT4NCg0KICAgICAgICAgICAgPCEtLSBHTE9CQUxMWSBJTkNMVURFIEZJRUxEUyBJTiBJTkRFWA0KICAgICAgICAgICAgICAgVGhpcyBzZXR0aW5nIGFsbG93cyB5b3UgdG8gc3BlY2lmeSB3aGljaCBmaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgaW5kZXggd2hlbiB0aGUgaW5kZXhBbGxGaWVsZHMgc2V0dGluZyBpcyBzZXQgdG8gZmFsc2UuDQogICAgICAgICAgICAtLT4NCiAgICAgICAgICAgIDwhLS08aW5jbHVkZSBoaW50PSJsaXN0OkFkZEluY2x1ZGVkRmllbGQiPg0KICAgICAgICAgICAgPGZpZWxkSWQ+ezhDREMzMzdFLUExMTItNDJGQi1CQkI0LTQxNDM3NTFFMTIzRn08L2ZpZWxkSWQ+DQogICAgICAgICAgICA8L2luY2x1ZGU+LS0+DQoNCiAgICAgICAgICAgIDwhLS0gR0xPQkFMTFkgRVhDTFVERSBGSUVMRFMgRlJPTSBCRUlORyBJTkRFWEVEDQogICAgICAgICAgICAgICBUaGlzIHNldHRpbmcgYWxsb3dzIHlvdSB0byBleGNsdWRlIGZpZWxkcyBmcm9tIHRoZSBpbmRleCB3aGVuIHRoZSBpbmRleEFsbEZpZWxkcyBzZXR0aW5nIGlzIHNldCB0byB0cnVlLg0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgICA8ZXhjbHVkZSBoaW50PSJsaXN0OkFkZEV4Y2x1ZGVkRmllbGQiPg0KICAgICAgICAgICAgICA8X19DcmVhdGVkPnsyNUJFRDc4Qy00OTU3LTQxNjUtOTk4QS1DQTFCNTJGNjc0OTd9PC9fX0NyZWF0ZWQ+DQogICAgICAgICAgICAgIDxfX0RlZmF1bHRXb3JrZmxvdz57Q0E5QjlGNTItNEZCMC00Rjg3LUE3OUYtMjRERUE2MkNEQTY1fTwvX19EZWZhdWx0V29ya2Zsb3c+DQogICAgICAgICAgICAgIDxfX0xvY2s+ezAwMUREMzkzLTk2QzUtNDkwQi05MjRBLUIwRjI1Q0Q5RUZEOH08L19fTG9jaz4NCiAgICAgICAgICAgICAgPF9fTG9uZ0Rlc2NyaXB0aW9uPns1NzdGMTY4OS03REU0LTRBRDItQTE1Ri03RkRDMTc1OTI4NUZ9PC9fX0xvbmdEZXNjcmlwdGlvbj4NCiAgICAgICAgICAgICAgPF9fT3JpZ2luYXRvcj57RjZEOEE2MUMtMkY4NC00NDAxLUJEMjQtNTJEMjA2ODE3MkJDfTwvX19PcmlnaW5hdG9yPg0KICAgICAgICAgICAgICA8X19Pd25lcj57NTI4MDc1OTUtMEY4Ri00QjIwLThEMkEtQ0I3MUQyOEM2MTAzfTwvX19Pd25lcj4NCiAgICAgICAgICAgICAgPF9fUmVhZE9ubHk+ezlDNjEwNkVBLTdBNUEtNDhFMi04Q0FELUYwRjY5M0IxRTJENH08L19fUmVhZE9ubHk+DQogICAgICAgICAgICAgIDxfX1JlbmRlcmluZ3M+e0YxQTFGRTlFLUE2MEMtNEREQi1BM0EwLUJCNUIyOUZFNzMyRX08L19fUmVuZGVyaW5ncz4NCiAgICAgICAgICAgICAgPF9fUmV2aXNpb24+ezhDREMzMzdFLUExMTItNDJGQi1CQkI0LTQxNDM3NTFFMTIzRn08L19fUmV2aXNpb24+DQogICAgICAgICAgICAgIDxfX1NlY3VyaXR5PntERUM4RDJENS1FM0NGLTQ4QjYtQTY1My04RTY5RTI3MTY2NDF9PC9fX1NlY3VyaXR5Pg0KICAgICAgICAgICAgICA8X19TaG9ydERlc2NyaXB0aW9uPns5NTQxRTY3RC1DRThDLTQyMjUtODAzRC0zM0Y3RjI5RjA5RUZ9PC9fX1Nob3J0RGVzY3JpcHRpb24+DQogICAgICAgICAgICAgIDxfX1NvcnRPcmRlcj57QkEzRjg2QTItNEExQy00RDc4LUI2M0QtOTFDMjc3OUMxQjVFfTwvX19Tb3J0T3JkZXI+DQogICAgICAgICAgICAgIDxfX1NvdXJjZT57MUI4NjY5N0QtNjBDQS00RDgwLTgzRkItNzU1NUEyRTZDRTFDfTwvX19Tb3VyY2U+DQogICAgICAgICAgICAgIDxfX1NvdXJjZUl0ZW0+ezE5QjU5N0QzLTJFREQtNEFFMi1BRUZFLTRBOTRDN0YxMEUzMX08L19fU291cmNlSXRlbT4NCiAgICAgICAgICAgICAgPF9fVXBkYXRlZD57RDlDRjE0QjEtRkExNi00QkE2LTkyODgtRThBMTc0RDRENTIyfTwvX19VcGRhdGVkPg0KICAgICAgICAgICAgICA8X19VcGRhdGVkQnk+e0JBREQ5Q0Y5LTUzRTAtNEQwQy1CQ0MwLTJENzg0QzI4MkY2QX08L19fVXBkYXRlZEJ5Pg0KICAgICAgICAgICAgICA8X19WYWxpZEZyb20+e0M4RjkzQUZFLUJGRDQtNEU4Ri05QzYxLTE1MjU1OTg1NDY2MX08L19fVmFsaWRGcm9tPg0KICAgICAgICAgICAgICA8X19Xb3JrZmxvdz57QTRGOTg1RDktOThCMy00QjUyLUFBQUYtNDM0NEY2RTc0N0M2fTwvX19Xb3JrZmxvdz4NCiAgICAgICAgICAgICAgPEFyY2hpdmVEYXRlPns1NkMxNUM2RC1GRDVBLTQwQ0EtQkIzNy02NENFRUM2QTlCRDV9PC9BcmNoaXZlRGF0ZT4NCiAgICAgICAgICAgICAgPEFyY2hpdmVWZXJzaW9uRGF0ZT57MUQ5OTAwNUUtNjVDQS00NUNBLTlEOUEtRkQ3MDE2RTIzRjFFfTwvQXJjaGl2ZVZlcnNpb25EYXRlPg0KICAgICAgICAgICAgICA8Qm9vc3Q+ezkzRDFCMjE3LUI4RjQtNDYyRS1CQUJGLTY4Mjk4QzlDRTY2N308L0Jvb3N0Pg0KICAgICAgICAgICAgICA8QnVja2V0UGFyZW50UmVmZXJlbmNlPns5REFGQ0ExRC1ENjE4LTQ2MTYtODZCOC1BOEFDRDZCMjhBNjN9PC9CdWNrZXRQYXJlbnRSZWZlcmVuY2U+DQogICAgICAgICAgICAgIDxDYWNoZWFibGU+ezNEMDhEQjQ2LTIyNjctNDFCMC1CQzUyLUJFNjlGRDYxODYzM308L0NhY2hlYWJsZT4NCiAgICAgICAgICAgICAgPENvbnRleHRNZW51PntEM0FFNzIyMi00MjVELTRCNzctOTVEOC1FRTMzQUMyQjY3MzB9PC9Db250ZXh0TWVudT4NCiAgICAgICAgICAgICAgPENvbnRyb2xsZXI+ezRDOTMxMkE1LTJFNEUtNDJGOC1BQjZGLUI4REI4QjgyQkYyMn08L0NvbnRyb2xsZXI+DQogICAgICAgICAgICAgIDxDb250cm9sbGVyQWN0aW9uPns5RkI3MzRDQy04OTUyLTQwNzItQTJENC00MEY4OTBFMTZGNTZ9PC9Db250cm9sbGVyQWN0aW9uPg0KICAgICAgICAgICAgICA8RGVmYXVsdEJ1Y2tldFF1ZXJ5PntBQzUxNDYyQy04QThELTQ5M0ItOTQ5Mi0zNEQxRjI2RjIwRjF9PC9EZWZhdWx0QnVja2V0UXVlcnk+DQogICAgICAgICAgICAgIDxEZWZhdWx0Vmlldz57MzYwN0Y5QzctRERBMy00M0MzLTk3MjAtMzlBN0E1QjNBNEMzfTwvRGVmYXVsdFZpZXc+DQogICAgICAgICAgICAgIDxFZGl0b3I+e0Q4NURCNEVDLUZGODktNEY5Qy05RTdDLUE5RTA2NTQ3OTdGQ308L0VkaXRvcj4NCiAgICAgICAgICAgICAgPEVkaXRvcnM+e0EwQ0IzOTY1LTg4ODQtNEM3QS04ODE1LUI2QjJFNUNFRDE2Mn08L0VkaXRvcnM+DQogICAgICAgICAgICAgIDxFbmFibGVkVmlld3M+e0YyREI4QkExLUU0NzctNDFGNS04RUY1LTIyRUVGQThEMkY2RX08L0VuYWJsZWRWaWV3cz4NCiAgICAgICAgICAgICAgPEZhY2V0cz57MjFGNzRGNkUtNDJENC00MkEyLUE0QjQtNENFRkJDRkJEMkJCfTwvRmFjZXRzPg0KICAgICAgICAgICAgICA8SGVscExpbms+ezU2Nzc2RURGLTI2MUMtNEFCQy05RkU3LTcwQzYxODc5NTIzOX08L0hlbHBMaW5rPg0KICAgICAgICAgICAgICA8SGlkZVZlcnNpb24+e0I4RjQyNzMyLTlDQjgtNDc4RC1BRTk1LTA3RTI1MzQ1RkIwRn08L0hpZGVWZXJzaW9uPg0KICAgICAgICAgICAgICA8SWNvbj57MDZENTI5NUMtRUQyRi00QTU0LTlCRjItMjYyMjhEMTEzMzE4fTwvSWNvbj4NCiAgICAgICAgICAgICAgPE1hc3RlcnM+ezExNzJGMjUxLURBRDQtNEVGQi1BMzI5LTBDNjM1MDBFNEYxRX08L01hc3RlcnM+DQogICAgICAgICAgICAgIDxOZXZlclB1Ymxpc2g+ezkxMzUyMDBBLTU2MjYtNEREOC1BQjlELUQ2NjVCOEMxMTc0OH08L05ldmVyUHVibGlzaD4NCiAgICAgICAgICAgICAgPFBlcnNpc3RlbnRGaWx0ZXI+e0M3ODE1RjYwLTk2RTEtNDBDQi1CQjA2LUI1RjgzM0Y3M0I2MX08L1BlcnNpc3RlbnRGaWx0ZXI+DQogICAgICAgICAgICAgIDxQcmV2aWV3Pns0MUM2Q0MwRS0zODlGLTRENTEtOTk5MC1GRTM1NDE3QjY2NjZ9PC9QcmV2aWV3Pg0KICAgICAgICAgICAgICA8UHVibGlzaD57ODZGRTRGNzctNEQ5QS00RUMzLTlFRDktMjYzRDAzQkQxOTY1fTwvUHVibGlzaD4NCiAgICAgICAgICAgICAgPFJlbWluZGVyRGF0ZT57QUJFNUQ1NEMtNTlENy00MUU2LThEM0YtQzFBM0U0RUM5QjlFfTwvUmVtaW5kZXJEYXRlPg0KICAgICAgICAgICAgICA8UmVtaW5kZXJUZXh0PntCQjZDODU0MC0xMThFLTRDNDktOTE1Ny04MzA1NzZENzM0NUF9PC9SZW1pbmRlclRleHQ+DQogICAgICAgICAgICAgIDxSZW5kZXJlcnM+e0IwMzU2OUIxLTE1MzQtNDNGMi04QzgzLUJEMDY0QjdENzgyQ308L1JlbmRlcmVycz4NCiAgICAgICAgICAgICAgPFJpYmJvbj57MEM4OTRBQUItOTYyQi00QTg0LUI5MjMtQ0IyNEIwNUU2MEQyfTwvUmliYm9uPg0KICAgICAgICAgICAgICA8U2tpbj57MDc5QUZDRkUtOEFDQS00ODYzLUJEQTctMDc4OTM1NDFFMkY1fTwvU2tpbj4NCiAgICAgICAgICAgICAgPFN0eWxlPntBNzkxRjA5NS0yNTIxLTRCNEQtQkVGOS0yMUREQTIyMUY2MDh9PC9TdHlsZT4NCiAgICAgICAgICAgICAgPFN1Ykl0ZW1Tb3J0aW5nPns2RkQ2OTVFNy03RjZELTRDQTUtOEI0OS1BODI5RTU5NTBBRTl9PC9TdWJJdGVtU29ydGluZz4NCiAgICAgICAgICAgICAgPFN1cHByZXNzZWRWYWxpZGF0aW9uUnVsZXM+e0Y0N0MwRDc4LTYxRjktNDc5Qy05NkRGLTExNTk3MjdEMzJDNn08L1N1cHByZXNzZWRWYWxpZGF0aW9uUnVsZXM+DQogICAgICAgICAgICAgIDxVblB1Ymxpc2g+ezdFQUQ2RkQ2LTZDRjEtNEFDQS1BQzZCLUIyMDBFN0JBRkU4OH08L1VuUHVibGlzaD4NCiAgICAgICAgICAgICAgPFVzZXJBZ2VudD57NEU2NzhGQzAtOEQzNS00QUI3LUJCNDktMTU2RjMzQzhCOTU1fTwvVXNlckFnZW50Pg0KICAgICAgICAgICAgICA8VmFsaWRUbz57NEMzNDY0NDItRTg1OS00RUZELTg5QjItNDRBRURGNDY3RDIxfTwvVmFsaWRUbz4NCiAgICAgICAgICAgICAgPFZhcnlCeURhdGE+ezhCNkQ1MzJCLTYxMjgtNDQ4Ni1BMDQ0LUNBMDZEOTA5NDhCQX08L1ZhcnlCeURhdGE+DQogICAgICAgICAgICAgIDxWYXJ5QnlEZXZpY2U+e0M5OENGOTY5LUJBNzEtNDJEQS04MzNELUIzRkMxMzY4QkEyN308L1ZhcnlCeURldmljZT4NCiAgICAgICAgICAgICAgPFZhcnlCeUxvZ2luPns4RDkyMzJCMC02MTNGLTQ0MEItQTJGQS1EQ0REODBGQkQzM0V9PC9WYXJ5QnlMb2dpbj4NCiAgICAgICAgICAgICAgPFZhcnlCeVBhcmFtPnszQUQyNTA2QS1EQzM5LTRCMUUtOTU5Ri05RDUyNEFEREJGNTB9PC9WYXJ5QnlQYXJhbT4NCiAgICAgICAgICAgICAgPFZhcnlCeVF1ZXJ5U3RyaW5nPnsxMDg0RDNEMi0wNDU3LTQ1NkEtQUJCQy1FQjRDQzA5NjYwNzJ9PC9WYXJ5QnlRdWVyeVN0cmluZz4NCiAgICAgICAgICAgICAgPFZhcnlCeVVzZXI+ezBFNTRBOERDLTcyQUQtNDM3Mi1BN0M3LUJCNDc3M0ZBRDQ0RH08L1ZhcnlCeVVzZXI+DQogICAgICAgICAgICAgIDxWYXJ5QnlJbmRleD57RjNFN0U1NTItRDdDOC00NjlCLUExNTAtNjlFNEUxNEFCMzVDfTwvVmFyeUJ5SW5kZXg+DQogICAgICAgICAgICA8L2V4Y2x1ZGU+DQoNCiAgICAgICAgICAgIDwhLS0gUkVNT1ZFIElOQlVJTFQgU0lURUNPUkUgRklFTERTDQogICAgICAgICAgICAgICBUaGlzIGFsbG93cyB5b3UgdG8gc3RvcmUgYSBmaWVsZCBpbiBkaWZmZXJlbnQgd2F5cyBpbiB0aGUgaW5kZXguIFlvdSBtYXkgd2FudCB0byBzdG9yZSBhIGZpZWxkIGFzIEFuYWx5emVkIGFuZCBOb3QgQW5hbHl6ZQ0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgICA8ZmllbGRzIGhpbnQ9InJhdzpBZGRFeGNsdWRlZFNwZWNpYWxGaWVsZCI+DQogICAgICAgICAgICAgIDxyZW1vdmUgdHlwZT0iYm90aCI+QWxsVGVtcGxhdGVzPC9yZW1vdmU+DQogICAgICAgICAgICAgIDxyZW1vdmUgdHlwZT0iYm90aCI+Q3JlYXRlZDwvcmVtb3ZlPg0KICAgICAgICAgICAgICA8cmVtb3ZlIHR5cGU9ImJvdGgiPkVkaXRvcjwvcmVtb3ZlPg0KICAgICAgICAgICAgICA8cmVtb3ZlIHR5cGU9ImJvdGgiPkhpZGRlbjwvcmVtb3ZlPg0KICAgICAgICAgICAgICA8cmVtb3ZlIHR5cGU9ImJvdGgiPkljb248L3JlbW92ZT4NCiAgICAgICAgICAgICAgPHJlbW92ZSB0eXBlPSJib3RoIj5MaW5rczwvcmVtb3ZlPg0KICAgICAgICAgICAgICA8cmVtb3ZlIHR5cGU9ImJvdGgiPlVwZGF0ZWQ8L3JlbW92ZT4NCiAgICAgICAgICAgIDwvZmllbGRzPg0KDQogICAgICAgICAgICA8IS0tIENPTVBVVEVEIElOREVYIEZJRUxEUyANCiAgICAgICAgICAgICAgIFRoaXMgc2V0dGluZyBhbGxvd3MgeW91IHRvIGFkZCBmaWVsZHMgdG8gdGhlIGluZGV4IHRoYXQgY29udGFpbiB2YWx1ZXMgdGhhdCBhcmUgY29tcHV0ZWQgZm9yIHRoZSBpdGVtIHRoYXQgaXMgYmVpbmcgaW5kZXhlZC4NCiAgICAgICAgICAgICAgIFlvdSBjYW4gc3BlY2lmeSB0aGUgc3RvcmFnZVR5cGUgYW5kIGluZGV4dHlwZSBmb3IgZWFjaCBjb21wdXRlZCBpbmRleCBmaWVsZCBpbiB0aGUgPGZpZWxkTWFwPjxmaWVsZE5hbWVzPiBzZWN0aW9uLg0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgICA8ZmllbGRzIGhpbnQ9InJhdzpBZGRDb21wdXRlZEluZGV4RmllbGQiPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJfX3NtYWxsY3JlYXRlZGRhdGUiICAgICAgICAgICAgIHJldHVyblR5cGU9InN0cmluZyIgICAgICAgICAgPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuQ3JlYXRlZERhdGUsU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+DQogICAgICAgICAgICAgIDxmaWVsZCBmaWVsZE5hbWU9Il9fc21hbGx1cGRhdGVkZGF0ZSIgICAgICAgICAgICAgcmV0dXJuVHlwZT0ic3RyaW5nIiAgICAgICAgICA+U2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db21wdXRlZEZpZWxkcy5VcGRhdGVkRGF0ZSxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iX2NvbnRlbnQiICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLk1lZGlhSXRlbUNvbnRlbnRFeHRyYWN0b3IsU2l0ZWNvcmUuQ29udGVudFNlYXJjaCI+DQogICAgICAgICAgICAgICAgPG1lZGlhSW5kZXhpbmcgcmVmPSJjb250ZW50U2VhcmNoL2luZGV4Q29uZmlndXJhdGlvbnMvZGVmYXVsdFNvbHJJbmRleENvbmZpZ3VyYXRpb24vbWVkaWFJbmRleGluZyIvPg0KICAgICAgICAgICAgICA8L2ZpZWxkPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJjYWxjdWxhdGVkZGltZW5zaW9uIiAgICAgICAgICAgIHJldHVyblR5cGU9InN0cmluZ0NvbGxlY3Rpb24iPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuQ2FsY3VsYXRlZERpbWVuc2lvbixTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iY3VsdHVyZSIgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLkN1bHR1cmUsU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+DQogICAgICAgICAgICAgIDxmaWVsZCBmaWVsZE5hbWU9Imhhc2NoaWxkcmVuIiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iYm9vbCIgICAgICAgICAgICA+U2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db21wdXRlZEZpZWxkcy5IYXNDaGlsZHJlbixTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iaXN0ZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJib29sIiAgICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLklzVGVtcGxhdGUsU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+DQogICAgICAgICAgICAgIDxmaWVsZCBmaWVsZE5hbWU9ImxvY2siICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iYm9vbCIgICAgICAgICAgICA+U2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db21wdXRlZEZpZWxkcy5Jc0xvY2tlZCxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0icGFyc2VkY3JlYXRlZGJ5IiAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLlBhcnNlZENyZWF0ZWRCeSxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0icGFyc2VkdXBkYXRlZGJ5IiAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLlBhcnNlZFVwZGF0ZWRCeSxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0icGFyc2VkbGFuZ3VhZ2UiICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLlBhcnNlZExhbmd1YWdlLFNpdGVjb3JlLkNvbnRlbnRTZWFyY2g8L2ZpZWxkPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJzaXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGU9InN0cmluZ0NvbGxlY3Rpb24iPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuU2l0ZSxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0ic2l6ZXJhbmdlIiAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLkZpbGVTaXplR3JvdXBpbmcsU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+DQogICAgICAgICAgICAgIDxmaWVsZCBmaWVsZE5hbWU9ImlzYnVja2V0X3RleHQiICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0ic3RyaW5nIiAgICAgICAgICA+U2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db21wdXRlZEZpZWxkcy5Jc0J1Y2tldCxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iX19sb2NrIiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJzdHJpbmciICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLlBhcnNlZExvY2tPd25lcixTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iaXNwb2ludG9maW50ZXJlc3QiICAgICAgICAgICAgICByZXR1cm5UeXBlPSJib29sIiAgICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLklzUG9pbnRPZkludGVyZXN0LCBTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iY29vcmRpbmF0ZSIgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJjb29yZGluYXRlIiAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5Db21wdXRlZEZpZWxkcy5Db29yZGluYXRlLCBTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlcjwvZmllbGQ+DQogICAgICAgICAgICAgIDwhLS0gRGlzYWJsZWQgZm9yIHNwZWVkIG9mIGluZGV4aW5nLiBFbmFibGUgaWYgeW91IHdvdWxkIGxpa2UgdG8gcXVlcnkgYnkgdGhlIGZpZWxkcyBiZWxvdyAtLT4NCiAgICAgICAgICAgICAgPCEtLTxmaWVsZCBmaWVsZE5hbWU9Il9pc2Nsb25lIiAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlPSJib29sIiAgICAgICAgICAgICA+U2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db21wdXRlZEZpZWxkcy5Jc0Nsb25lLFNpdGVjb3JlLkNvbnRlbnRTZWFyY2g8L2ZpZWxkPi0tPg0KICAgICAgICAgICAgICA8IS0tPGZpZWxkIGZpZWxkTmFtZT0iX2xpbmtzIiAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGU9InN0cmluZyIgICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLkl0ZW1MaW5rcywgU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+LS0+DQogICAgICAgICAgICAgIDwhLS08ZmllbGQgZmllbGROYW1lPSJfdGVtcGxhdGVzIiAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0ic3RyaW5nIiAgICAgIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuQWxsVGVtcGxhdGVzLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiBkZWVwPSJ0cnVlIiBpbmNsdWRlU3RhbmRhcmRUZW1wbGF0ZT0iZmFsc2UiIC8+LS0+DQogICAgICAgICAgICAgIDwhLS08ZmllbGQgZmllbGROYW1lPSJoYXNjbG9uZXMiICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iYm9vbCIgICAgICAgICAgICAgPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuSGFzQ2xvbmVzLFNpdGVjb3JlLkNvbnRlbnRTZWFyY2g8L2ZpZWxkPi0tPg0KICAgICAgICAgICAgICA8IS0tPGZpZWxkIGZpZWxkTmFtZT0iaGFzcHVibGlzaGluZ3Jlc3RyaWN0aW9ucyIgIHJldHVyblR5cGU9ImJvb2wiICAgICAgICAgICAgID5TaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbXB1dGVkRmllbGRzLkhhc1B1Ymxpc2hpbmdSZXN0cmljdGlvbnMsU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+LS0+DQogICAgICAgICAgICAgIDwhLS08ZmllbGQgZmllbGROYW1lPSJpc2lud29ya2Zsb3ciICAgICAgICAgICAgICAgcmV0dXJuVHlwZT0iYm9vbCIgICAgICAgICAgICAgPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuSXNJdGVtSW5Xb3JrZmxvdyxTaXRlY29yZS5Db250ZW50U2VhcmNoPC9maWVsZD4tLT4NCiAgICAgICAgICAgICAgPGZpZWxkIGZpZWxkTmFtZT0iX3JlYWRhY2Nlc3MiPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29tcHV0ZWRGaWVsZHMuUmVhZEFjY2VzcywgU2l0ZWNvcmUuQ29udGVudFNlYXJjaDwvZmllbGQ+DQogICAgICAgICAgICAgIDwhLS0gVGhlIGZvbGxvd2luZyBjb21wdXRlZCBmaWVsZHMgbXVzdCBhbHdheXMgYmUgZW5hYmxlZCBmb3IgdGhlIFNvbHIgcHJvdmlkZXIuIC0tPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJfX3NvbHJfbm9ybV9maWVsZF9uYW1lIiAgICAgICAgIHJldHVyblR5cGU9InN0cmluZyIgICAgICAgICAgPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLkZpZWxkTmFtZXMuVHlwZVJlc29sdmluZy5JbmRleC5Db21wdXRlZEZpZWxkcy5Ob3JtYWxpemVkVGVtcGxhdGVGaWVsZE5hbWUsU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXI8L2ZpZWxkPg0KICAgICAgICAgICAgICA8ZmllbGQgZmllbGROYW1lPSJfX3NvbHJfZmllbGRfdHlwZSIgICAgICAgICAgICAgIHJldHVyblR5cGU9InN0cmluZyIgICAgICAgICAgPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLkZpZWxkTmFtZXMuVHlwZVJlc29sdmluZy5JbmRleC5Db21wdXRlZEZpZWxkcy5UZW1wbGF0ZUZpZWxkVHlwZSxTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlcjwvZmllbGQ+DQogICAgICAgICAgICA8L2ZpZWxkcz4NCiAgICAgICAgICA8L2RvY3VtZW50T3B0aW9ucz4NCg0KICAgICAgICAgIDwhLS0gTUVESUEgSVRFTSBDT05URU5UIEVYVFJBQ1RPUiBGSUxFIE1BUFBJTkcgDQogICAgICAgICAgICAgICBUaGlzIG1hcCBhbGxvd3MgeW91IHRvIHNwZWNpZnkgdGhlIGV4dGVuc2lvbnMgYW5kIG1pbWV0eXBlcyB0aGF0IHdlIHdpbGwgcGFzcyB0aHJvdWdoIHRvIHRoZSBJRmlsdGVycyBvbiB5b3VyIG1hY2hpbmUgc28gdGhleSBjYW4gYmUgaW5kZXhlZC4NCiAgICAgICAgICAgICAgIFdlIGFsc28gYWxsb3cgeW91IHRvIGluY2x1ZGUgYWxsIGZpbGVzIG9yIGV4Y2x1ZGUgYWxsIGZpbGVzIGFuZCBsZWF2ZSBpdCB0byB0aGUgSUZpbHRlcnMgdG8gY29udHJvbCB3aGF0IGlzIGFuZCBpcyBub3QgaW5kZXhlZC4NCiAgICAgICAgICAtLT4NCiAgICAgICAgICA8bWVkaWFJbmRleGluZyBoaW50PSJza2lwIj4NCiAgICAgICAgICAgIDxtaW1lVHlwZXM+DQogICAgICAgICAgICAgIDxleGNsdWRlcz4NCiAgICAgICAgICAgICAgICA8bWltZVR5cGU+KjwvbWltZVR5cGU+DQogICAgICAgICAgICAgIDwvZXhjbHVkZXM+DQogICAgICAgICAgICAgIDxpbmNsdWRlcz4NCiAgICAgICAgICAgICAgICA8bWltZVR5cGU+YXBwbGljYXRpb24vcGRmPC9taW1lVHlwZT4NCiAgICAgICAgICAgICAgICA8bWltZVR5cGUgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db21wdXRlZEZpZWxkcy5NZWRpYUl0ZW1IdG1sVGV4dEV4dHJhY3RvciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCI+dGV4dC9odG1sPC9taW1lVHlwZT4NCiAgICAgICAgICAgICAgICA8bWltZVR5cGU+dGV4dC9wbGFpbjwvbWltZVR5cGU+DQogICAgICAgICAgICAgIDwvaW5jbHVkZXM+DQogICAgICAgICAgICA8L21pbWVUeXBlcz4NCiAgICAgICAgICAgIDxleHRlbnNpb25zPg0KICAgICAgICAgICAgICA8ZXhjbHVkZXM+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj4qPC9leHRlbnNpb24+DQogICAgICAgICAgICAgIDwvZXhjbHVkZXM+DQogICAgICAgICAgICAgIDxpbmNsdWRlcz4NCiAgICAgICAgICAgICAgICA8ZXh0ZW5zaW9uPnJ0ZjwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+b2R0PC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5kb2M8L2V4dGVuc2lvbj4NCiAgICAgICAgICAgICAgICA8ZXh0ZW5zaW9uPmRvdDwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+ZG9jeDwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+ZG90eDwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+ZG9jbTwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+ZG90bTwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+eGxzPC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj54bHQ8L2V4dGVuc2lvbj4NCiAgICAgICAgICAgICAgICA8ZXh0ZW5zaW9uPnhsYTwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+eGxzeDwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+eGxzbTwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+eGx0bTwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+eGxhbTwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+eGxzYjwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+cHB0PC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wb3Q8L2V4dGVuc2lvbj4NCiAgICAgICAgICAgICAgICA8ZXh0ZW5zaW9uPnBwczwvZXh0ZW5zaW9uPg0KICAgICAgICAgICAgICAgIDxleHRlbnNpb24+cHBhPC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wcHR4PC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wb3R4PC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wcHN4PC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wcGFtPC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wcHRtPC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wb3RtPC9leHRlbnNpb24+DQogICAgICAgICAgICAgICAgPGV4dGVuc2lvbj5wcHNtPC9leHRlbnNpb24+DQogICAgICAgICAgICAgIDwvaW5jbHVkZXM+DQogICAgICAgICAgICA8L2V4dGVuc2lvbnM+DQogICAgICAgICAgPC9tZWRpYUluZGV4aW5nPg0KDQogICAgICAgICAgPCEtLSBWSVJUVUFMIEZJRUxEUw0KICAgICAgICAgICAgICAgVmlydHVhbCBmaWVsZHMgY2FuIGJlIHVzZWQgdG8gdHJhbnNsYXRlIGEgZmllbGQgcXVlcnkgaW50byBhIGRpZmZlcmVudCBxdWVyeS4NCiAgICAgICAgICAgIC0tPg0KICAgICAgICAgIDx2aXJ0dWFsRmllbGRzIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guVmlydHVhbEZpZWxkUHJvY2Vzc29yTWFwLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIj4NCiAgICAgICAgICAgIDxwcm9jZXNzb3JzIGhpbnQ9InJhdzpBZGRGcm9tQ29uZmlndXJhdGlvbiI+DQogICAgICAgICAgICAgIDxhZGQgZmllbGROYW1lPSJkYXRlcmFuZ2UiIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guVmlydHVhbEZpZWxkcy5EYXRlUmFuZ2VGaWVsZFByb2Nlc3NvciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGFkZCBmaWVsZE5hbWU9Il9sYXN0ZXN0dmVyc2lvbiIgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5WaXJ0dWFsRmllbGRzLkxhdGVzdFZlcnNpb25GaWVsZFByb2Nlc3NvciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGFkZCBmaWVsZE5hbWU9InVwZGF0ZWRkYXRlcmFuZ2UiIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guVmlydHVhbEZpZWxkcy5VcGRhdGVkRGF0ZVJhbmdlRmllbGRQcm9jZXNzb3IsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICAgIDxhZGQgZmllbGROYW1lPSJfdXJsIiB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlZpcnR1YWxGaWVsZHMuVW5pcXVlSWRGaWVsZFByb2Nlc3NvciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGFkZCBmaWVsZE5hbWU9Il9mdWxscGF0aCIgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuVmlydHVhbEZpZWxkcy5GdWxsUGF0aEZpZWxkUHJvY2Vzc29yLCBTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlciIgLz4NCiAgICAgICAgICAgICAgPGFkZCBmaWVsZE5hbWU9InBhcnNlZGNyZWF0ZWRieV9zIiB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlZpcnR1YWxGaWVsZHMuQ3JlYXRlZEJ5RmllbGRQcm9jZXNzb3IsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICA8L3Byb2Nlc3NvcnM+DQogICAgICAgICAgPC92aXJ0dWFsRmllbGRzPg0KDQogICAgICAgICAgPCEtLSBTSVRFQ09SRSBGSUVMRFRZUEUgTUFQDQogICAgICAgICAgICAgICBUaGlzIG1hcHMgYSBmaWVsZCB0eXBlIGJ5IG5hbWUgdG8gYSBTdHJvbmdseSBUeXBlZCBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgZmllbGQgdHlwZSBlLmcuIGh0bWwgbWFwcyB0byBIVE1MRmllbGQNCiAgICAgICAgICAgIC0tPg0KICAgICAgICAgIDxmaWVsZFJlYWRlcnMgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5GaWVsZFJlYWRlcnMuRmllbGRSZWFkZXJNYXAsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giPg0KICAgICAgICAgICAgPHBhcmFtIGRlc2M9ImlkIj5kZWZhdWx0RmllbGRSZWFkZXJNYXA8L3BhcmFtPg0KICAgICAgICAgICAgPG1hcEZpZWxkQnlUeXBlTmFtZSBoaW50PSJyYXc6QWRkRmllbGRSZWFkZXJCeUZpZWxkVHlwZU5hbWUiPg0KICAgICAgICAgICAgICA8ZmllbGRSZWFkZXIgZmllbGRUeXBlTmFtZT0iY2hlY2tib3giICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRSZWFkZXJUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkZpZWxkUmVhZGVycy5DaGVja2JveEZpZWxkUmVhZGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8ZmllbGRSZWFkZXIgZmllbGRUeXBlTmFtZT0iZGF0ZXxkYXRldGltZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRSZWFkZXJUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkZpZWxkUmVhZGVycy5EYXRlRmllbGRSZWFkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICAgIDxmaWVsZFJlYWRlciBmaWVsZFR5cGVOYW1lPSJpbWFnZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFJlYWRlclR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRmllbGRSZWFkZXJzLkltYWdlRmllbGRSZWFkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICAgIDxmaWVsZFJlYWRlciBmaWVsZFR5cGVOYW1lPSJzaW5nbGUtbGluZSB0ZXh0fG11bHRpLWxpbmUgdGV4dHx0ZXh0fG1lbW8iICAgICAgICAgICBmaWVsZFJlYWRlclR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRmllbGRSZWFkZXJzLkRlZmF1bHRGaWVsZFJlYWRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkUmVhZGVyIGZpZWxkVHlwZU5hbWU9ImludGVnZXIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUmVhZGVyVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5GaWVsZFJlYWRlcnMuTnVtZXJpY0ZpZWxkUmVhZGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8ZmllbGRSZWFkZXIgZmllbGRUeXBlTmFtZT0ibnVtYmVyIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRSZWFkZXJUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkZpZWxkUmVhZGVycy5QcmVjaXNpb25OdW1lcmljRmllbGRSZWFkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICAgIDxmaWVsZFJlYWRlciBmaWVsZFR5cGVOYW1lPSJodG1sfHJpY2ggdGV4dCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFJlYWRlclR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRmllbGRSZWFkZXJzLlJpY2hUZXh0RmllbGRSZWFkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICAgIDxmaWVsZFJlYWRlciBmaWVsZFR5cGVOYW1lPSJtdWx0aWxpc3Qgd2l0aCBzZWFyY2h8dHJlZWxpc3Qgd2l0aCBzZWFyY2giICAgICAgICAgICBmaWVsZFJlYWRlclR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRmllbGRSZWFkZXJzLkRlbGltaXRlZExpc3RGaWVsZFJlYWRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkUmVhZGVyIGZpZWxkVHlwZU5hbWU9ImNoZWNrbGlzdHxtdWx0aWxpc3R8dHJlZWxpc3R8dHJlZWxpc3RleHx0cmVlIGxpc3QiICAgIGZpZWxkUmVhZGVyVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5GaWVsZFJlYWRlcnMuTXVsdGlMaXN0RmllbGRSZWFkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICAgIDxmaWVsZFJlYWRlciBmaWVsZFR5cGVOYW1lPSJpY29ufGRyb3BsaXN0fGdyb3VwZWQgZHJvcGxpc3QiICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFJlYWRlclR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRmllbGRSZWFkZXJzLkRlZmF1bHRGaWVsZFJlYWRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkUmVhZGVyIGZpZWxkVHlwZU5hbWU9Im5hbWUgbG9va3VwIHZhbHVlIGxpc3R8bmFtZSB2YWx1ZSBsaXN0IiAgICAgICAgICAgICAgIGZpZWxkUmVhZGVyVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5GaWVsZFJlYWRlcnMuTmFtZVZhbHVlTGlzdEZpZWxkUmVhZGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8ZmllbGRSZWFkZXIgZmllbGRUeXBlTmFtZT0iZHJvcGxpbmt8ZHJvcHRyZWV8Z3JvdXBlZCBkcm9wbGlua3x0cmVlfHJlZmVyZW5jZSIgICAgZmllbGRSZWFkZXJUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkZpZWxkUmVhZGVycy5Mb29rdXBGaWVsZFJlYWRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGZpZWxkUmVhZGVyIGZpZWxkVHlwZU5hbWU9ImF0dGFjaG1lbnR8ZnJhbWV8cnVsZXN8dHJhY2tpbmd8dGh1bWJuYWlsIiAgICAgICAgICAgIGZpZWxkUmVhZGVyVHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5GaWVsZFJlYWRlcnMuTnVsbEZpZWxkUmVhZGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8ZmllbGRSZWFkZXIgZmllbGRUeXBlTmFtZT0iZmlsZXxzZWN1cml0eXxzZXJ2ZXIgZmlsZXx0ZW1wbGF0ZSBmaWVsZCBzb3VyY2V8bGluayIgZmllbGRSZWFkZXJUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkZpZWxkUmVhZGVycy5OdWxsRmllbGRSZWFkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICA8L21hcEZpZWxkQnlUeXBlTmFtZT4NCiAgICAgICAgICA8L2ZpZWxkUmVhZGVycz4NCg0KICAgICAgICAgIDwhLS0gSU5ERVggRklFTEQgU1RPUkFHRSBNQVBQRVIgDQogICAgICAgICAgICAgICBNYWludGFpbnMgYSBjb2xsZWN0aW9uIG9mIGFsbCB0aGUgcG9zc2libGUgQ29udmVydG9ycyBmb3IgdGhlIHByb3ZpZGVyLg0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgPGluZGV4RmllbGRTdG9yYWdlVmFsdWVGb3JtYXR0ZXIgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuQ29udmVydGVycy5Tb2xySW5kZXhGaWVsZFN0b3JhZ2VWYWx1ZUZvcm1hdHRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiPg0KICAgICAgICAgICAgPGNvbnZlcnRlcnMgaGludD0icmF3OkFkZENvbnZlcnRlciI+DQogICAgICAgICAgICAgIDxjb252ZXJ0ZXIgaGFuZGxlc1R5cGU9IlN5c3RlbS5HdWlkIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29udmVydGVyPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbnZlcnRlcnMuSW5kZXhGaWVsZEd1aWRWYWx1ZUNvbnZlcnRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGNvbnZlcnRlciBoYW5kbGVzVHlwZT0iU2l0ZWNvcmUuRGF0YS5JRCwgU2l0ZWNvcmUuS2VybmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb252ZXJ0ZXI9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29udmVydGVycy5JbmRleEZpZWxkSURWYWx1ZUNvbnZlcnRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGNvbnZlcnRlciBoYW5kbGVzVHlwZT0iU2l0ZWNvcmUuRGF0YS5TaG9ydElELCBTaXRlY29yZS5LZXJuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb252ZXJ0ZXI9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29udmVydGVycy5JbmRleEZpZWxkU2hvcnRJRFZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTeXN0ZW0uRGF0ZVRpbWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGRVVENEYXRlVGltZVZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTeXN0ZW0uRGF0ZVRpbWVPZmZzZXQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGREYXRlVGltZU9mZnNldFZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTeXN0ZW0uVGltZVNwYW4iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGRUaW1lU3BhblZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNpdGVjb3JlSXRlbUlkLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAgICAgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGRTaXRlY29yZUl0ZW1JRFZhbHVlQ29udmVydG9yLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIj4NCiAgICAgICAgICAgICAgICA8cGFyYW0gdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGRJRFZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIi8+DQogICAgICAgICAgICAgIDwvY29udmVydGVyPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNpdGVjb3JlSXRlbVVuaXF1ZUlkLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuQ29udmVydGVycy5Tb2xySW5kZXhGaWVsZFNpdGVjb3JlSXRlbVVuaXF1ZUlEVmFsdWVDb252ZXJ0ZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIj4NCiAgICAgICAgICAgICAgICA8cGFyYW0gdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGRJdGVtVXJpVmFsdWVDb252ZXJ0ZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giLz4NCiAgICAgICAgICAgICAgPC9jb252ZXJ0ZXI+DQogICAgICAgICAgICAgIDxjb252ZXJ0ZXIgaGFuZGxlc1R5cGU9IlNpdGVjb3JlLkRhdGEuSXRlbVVyaSwgU2l0ZWNvcmUuS2VybmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29udmVydGVyPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkNvbnZlcnRlcnMuSW5kZXhGaWVsZEl0ZW1VcmlWYWx1ZUNvbnZlcnRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGNvbnZlcnRlciBoYW5kbGVzVHlwZT0iU2l0ZWNvcmUuR2xvYmFsaXphdGlvbi5MYW5ndWFnZSwgU2l0ZWNvcmUuS2VybmVsIiAgICAgICAgICAgICAgICAgICAgIHR5cGVDb252ZXJ0ZXI9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29udmVydGVycy5JbmRleEZpZWxkTGFuZ3VhZ2VWYWx1ZUNvbnZlcnRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGNvbnZlcnRlciBoYW5kbGVzVHlwZT0iU3lzdGVtLkdsb2JhbGl6YXRpb24uQ3VsdHVyZUluZm8iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb252ZXJ0ZXI9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29udmVydGVycy5JbmRleEZpZWxkQ3VsdHVyZUluZm9WYWx1ZUNvbnZlcnRlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgLz4NCiAgICAgICAgICAgICAgPGNvbnZlcnRlciBoYW5kbGVzVHlwZT0iU2l0ZWNvcmUuRGF0YS5WZXJzaW9uLCBTaXRlY29yZS5LZXJuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb252ZXJ0ZXI9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guQ29udmVydGVycy5JbmRleEZpZWxkVmVyc2lvblZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTaXRlY29yZS5EYXRhLkRhdGFiYXNlLCBTaXRlY29yZS5LZXJuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGREYXRhYmFzZVZhbHVlQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLklJbmRleGFibGVJZCwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgICAgICAgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4YWJsZUlkQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLklJbmRleGFibGVVbmlxdWVJZCwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCIgICAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4YWJsZVVuaXF1ZUlkQ29udmVydGVyLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIiAvPg0KICAgICAgICAgICAgICA8Y29udmVydGVyIGhhbmRsZXNUeXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkRhdGEuQ29vcmRpbmF0ZSwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5EYXRhIiAgdHlwZUNvbnZlcnRlcj0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Db252ZXJ0ZXJzLkluZGV4RmllbGRDb29yZGluYXRlVmFsdWVDb252ZXJ0ZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giIC8+DQogICAgICAgICAgICA8L2NvbnZlcnRlcnM+DQogICAgICAgICAgPC9pbmRleEZpZWxkU3RvcmFnZVZhbHVlRm9ybWF0dGVyPg0KDQogICAgICAgICAgPCEtLSBJTkRFWCBQUk9QRVJUWSBUTyBET0NVTUVOVCBNQVBQRVINCiAgICAgICAgICAgICAgIE1haW50YWlucyBhIGNvbGxlY3Rpb24gb2YgYWxsIHRoZSBwb3NzaWJsZSBDb252ZXJ0b3JzIGZvciB0aGUgcHJvdmlkZXIuDQogICAgICAgICAgICAtLT4NCiAgICAgICAgICA8aW5kZXhEb2N1bWVudFByb3BlcnR5TWFwcGVyIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLk1hcHBpbmcuU29sckRvY3VtZW50UHJvcGVydHlNYXBwZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIj4NCiAgICAgICAgICAgIDwhLS0gT0JKRUNUIEZBQ1RPUlkNCiAgICAgICAgICAgICAgICAgQ29uc3RydWN0cyBzZWFyY2ggcmVzdWx0IG9iamVjdHMgYmFzZWQgb24gdGhlIHR5cGUgdGhhdCBpcyBwYXNzZWQgaW4gLkdldFF1ZXJ5YWJsZTxUPigpIGFuZCB0aGUgcnVsZXMgZGVmaW5lZCBpbiB0aGlzIHNlY3Rpb24uDQogICAgICAgICAgICAtLT4NCiAgICAgICAgICAgIDxvYmplY3RGYWN0b3J5IHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRGVmYXVsdERvY3VtZW50TWFwcGVyT2JqZWN0RmFjdG9yeSwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaCI+DQogICAgICAgICAgICAgIDwhLS0gT0JKRUNUIEZBQ1RPUlkgUlVMRVMgDQoNCiAgICAgICAgICAgICAgICAgICBFeGFtcGxlczoNCg0KICAgICAgICAgICAgICAgICAgICA8cnVsZXMgaGludD0ibGlzdDpBZGRSdWxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgIFJ1bGUgdGhhdCBhcHBsaWVzIHRvIGl0ZW1zIHdpdGggdGVtcGxhdGUgIlNhbXBsZSBJdGVtIjoNCg0KICAgICAgICAgICAgICAgICAgICAgIDxydWxlIGZpZWxkTmFtZT0idGVtcGxhdGUiIGNvbXBhcmlzb249IkVxdWFsIiB2YWx1ZT0iezc2MDM2RjVFLUNCQ0UtNDZEMS1BRjBBLTQxNDNGOUI1NTdBQX0iIHZhbHVlVHlwZT0iU3lzdGVtLkd1aWQsIG1zY29ybGliIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0aW9uVHlwZT0iTXlTZWFyY2hUeXBlcy5TYW1wbGVJdGVtUmVzdWx0SXRlbSwgTXlTZWFyY2hUeXBlcyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVHlwZT0iTXlTZWFyY2hUeXBlcy5JTXlTZWFyY2hSZXN1bHRJdGVtLCBNeVNlYXJjaFR5cGVzIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRGVmYXVsdERvY3VtZW50TWFwcGVyRmFjdG9yeVNpbXBsZVJ1bGUsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHBhcmFtIGRlc2M9ImZpZWxkTmFtZSI+JChmaWVsZE5hbWUpPC9wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJjb21wYXJpc29uIj4kKGNvbXBhcmlzb24pPC9wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJ2YWx1ZSI+JCh2YWx1ZSk8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHBhcmFtIGRlc2M9InR5cGUiPiQodmFsdWVUeXBlKTwvcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICA8cGFyYW0gZGVzYz0iY3JlYXRpb25UeXBlIj4kKGNyZWF0aW9uVHlwZSk8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHBhcmFtIGRlc2M9ImJhc2VUeXBlIj4kKGJhc2VUeXBlKTwvcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgPC9ydWxlPg0KDQogICAgICAgICAgICAgICAgICAgICAgUnVsZSB0aGF0IGFwcGxpZXMgdG8gaXRlbXMgd2l0aCB0ZW1wbGF0ZSAiU2FtcGxlIEl0ZW0iIEFORCBoYXMgdGhlIHRpdGxlICJTYW1wbGUgSXRlbSI6DQoNCiAgICAgICAgICAgICAgICAgICAgICA8cnVsZSB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLkRlZmF1bHREb2N1bWVudE1hcHBlckZhY3RvcnlSdWxlLCBTaXRlY29yZS5Db250ZW50U2VhcmNoIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0aW9uVHlwZT0iTXlTZWFyY2hUeXBlcy5TYW1wbGVJdGVtUmVzdWx0SXRlbSwgTXlTZWFyY2hUeXBlcyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVHlwZT0iTXlTZWFyY2hUeXBlcy5JTXlTZWFyY2hSZXN1bHRJdGVtLCBNeVNlYXJjaFR5cGVzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJjcmVhdGlvblR5cGUiPiQoY3JlYXRpb25UeXBlKTwvcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICA8cGFyYW0gZGVzYz0iYmFzZVR5cGUiPiQoYmFzZVR5cGUpPC9wYXJhbT4NCiAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkQ29tcGFyaXNvbnMgaGludD0ibGlzdDpBZGRGaWVsZENvbXBhcmlzb24iPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZENvbXBhcmlzb24gZmllbGROYW1lPSJ0ZW1wbGF0ZSIgY29tcGFyaXNvbj0iRXF1YWwiIHZhbHVlPSJ7NzYwMzZGNUUtQ0JDRS00NkQxLUFGMEEtNDE0M0Y5QjU1N0FBfSIgdmFsdWVUeXBlPSJTeXN0ZW0uR3VpZCwgbXNjb3JsaWIiIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRGVmYXVsdERvY3VtZW50TWFwcGVyRmFjdG9yeVJ1bGVGaWVsZENvbXBhcmlzb24sIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJmaWVsZE5hbWUiPiQoZmllbGROYW1lKTwvcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcmFtIGRlc2M9ImNvbXBhcmlzb24iPiQoY29tcGFyaXNvbik8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJ2YWx1ZSI+JCh2YWx1ZSk8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJ0eXBlIj4kKHZhbHVlVHlwZSk8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkQ29tcGFyaXNvbj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRDb21wYXJpc29uIGZpZWxkTmFtZT0idGl0bGUiIGNvbXBhcmlzb249IkVxdWFsIiB2YWx1ZT0iU2FtcGxlIEl0ZW0iIHZhbHVlVHlwZT0iU3lzdGVtLlN0cmluZywgbXNjb3JsaWIiIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guRGVmYXVsdERvY3VtZW50TWFwcGVyRmFjdG9yeVJ1bGVGaWVsZENvbXBhcmlzb24sIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJmaWVsZE5hbWUiPiQoZmllbGROYW1lKTwvcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcmFtIGRlc2M9ImNvbXBhcmlzb24iPiQoY29tcGFyaXNvbik8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJ2YWx1ZSI+JCh2YWx1ZSk8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJhbSBkZXNjPSJ0eXBlIj4kKHZhbHVlVHlwZSk8L3BhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkQ29tcGFyaXNvbj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZENvbXBhcmlzb25zPg0KICAgICAgICAgICAgICAgICAgICAgIDwvcnVsZT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3J1bGVzPg0KICAgICAgICAgICAgICAtLT4NCiAgICAgICAgICAgIDwvb2JqZWN0RmFjdG9yeT4NCiAgICAgICAgICA8L2luZGV4RG9jdW1lbnRQcm9wZXJ0eU1hcHBlcj4NCg0KICAgICAgICAgIDwhLS0gRE9DVU1FTlQgQlVJTERFUg0KICAgICAgICAgICAgICAgQWxsb3dzIHlvdSB0byBvdmVycmlkZSB0aGUgZG9jdW1lbnQgYnVpbGRlci4gVGhlIGRvY3VtZW50IGJ1aWxkZXIgY2xhc3MgcHJvY2Vzc2VzIGFsbCB0aGUgZmllbGRzIGluIHRoZSBTaXRlY29yZSBpdGVtcyBhbmQgcHJlcGFyZXMNCiAgICAgICAgICAgICAgIHRoZSBkYXRhIGZvciBzdG9yYWdlIGluIHRoZSBpbmRleC4NCiAgICAgICAgICAgICAgIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGRvY3VtZW50IGJ1aWxkZXIgdG8gbW9kaWZ5IGhvdyB0aGUgZGF0YSBpcyBwcmVwYXJlZCwgYW5kIHRvIGFwcGx5IGFueSBhZGRpdGlvbmFsIGxvZ2ljIHRoYXQgeW91IG1heSByZXF1aXJlLg0KICAgICAgICAgIC0tPg0KICAgICAgICAgIDxkb2N1bWVudEJ1aWxkZXJUeXBlPlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLlNvbHJEb2N1bWVudEJ1aWxkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyPC9kb2N1bWVudEJ1aWxkZXJUeXBlPg0KDQogICAgICAgICAgPGRlZmF1bHRTZWFyY2hTZWN1cml0eU9wdGlvbiByZWY9ImNvbnRlbnRTZWFyY2gvaW5kZXhDb25maWd1cmF0aW9ucy9kZWZhdWx0U2VhcmNoU2VjdXJpdHlPcHRpb24iIC8+DQoNCiAgICAgICAgICA8ZW5hYmxlUmVhZEFjY2Vzc0luZGV4aW5nIHJlZj0iY29udGVudFNlYXJjaC9pbmRleENvbmZpZ3VyYXRpb25zL2VuYWJsZVJlYWRBY2Nlc3NJbmRleGluZyIgLz4NCiAgICAgICAgPC9kZWZhdWx0U29sckluZGV4Q29uZmlndXJhdGlvbj4NCiAgICAgIDwvaW5kZXhDb25maWd1cmF0aW9ucz4NCiAgICA8L2NvbnRlbnRTZWFyY2g+DQogICAgPHNlcnZpY2VzPg0KICAgICAgPCEtLSBFbmFibGVzIGhlYWx0aGNoZWNrcyBmb3IgU29sciBzZXJ2ZXIgLS0+DQogICAgICA8Y29uZmlndXJhdG9yIHR5cGU9ICJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5EZXBlbmRlbmN5SW5qZWN0aW9uLkNvbnRlbnRTZWFyY2hTZXJ2aWNlc0NvbmZpZ3VyYXRvciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiLz4NCiAgICA8L3NlcnZpY2VzPg0KICAgIDxwaXBlbGluZXM+DQogICAgICA8aW5pdGlhbGl6ZT4NCiAgICAgICAgPHByb2Nlc3NvciB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5QaXBlbGluZXMuTG9hZGVyLkluaXRpYWxpemVTb2xyUHJvdmlkZXIsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIiBwYXRjaDpiZWZvcmU9IipbQHR5cGU9J1NpdGVjb3JlLlBpcGVsaW5lcy5Mb2FkZXIuSW5pdGlhbGl6ZVNjaGVkdWxlciwgU2l0ZWNvcmUuS2VybmVsJ10iLz4NCiAgICAgIDwvaW5pdGlhbGl6ZT4NCiAgICAgIDxjb250ZW50U2VhcmNoLnRyYW5zbGF0ZVF1ZXJ5Pg0KICAgICAgICA8cHJvY2Vzc29yIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLlBpcGVsaW5lcy5UcmFuc2xhdGVRdWVyeS5BcHBseVNvbHJUcmFuc2xhdGlvbiwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIC8+DQogICAgICA8L2NvbnRlbnRTZWFyY2gudHJhbnNsYXRlUXVlcnk+DQogICAgICA8Y29udGVudFNlYXJjaC5mb3JtYXRRdWVyeUZpZWxkVmFsdWU+DQogICAgICAgIDxwcm9jZXNzb3IgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuUGlwZWxpbmVzLkZvcm1hdFF1ZXJ5RmllbGRWYWx1ZS5BcHBseUZpZWxkTWFwcGluZ1J1bGUsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIiAvPg0KICAgICAgPC9jb250ZW50U2VhcmNoLmZvcm1hdFF1ZXJ5RmllbGRWYWx1ZT4NCiAgICAgIDxjb250ZW50U2VhcmNoLlBvcHVsYXRlU29sclNjaGVtYT4NCiAgICAgICAgPHByb2Nlc3NvciB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5QaXBlbGluZXMuUG9wdWxhdGVTb2xyU2NoZW1hLlJlc29sdmVDb3JlTmFtZXMsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIiAvPg0KICAgICAgICA8cHJvY2Vzc29yIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLlBpcGVsaW5lcy5Qb3B1bGF0ZVNvbHJTY2hlbWEuUG9wdWxhdGVGaWVsZHMsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIj4NCiAgICAgICAgICA8cGFyYW0gdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuRmFjdG9yaWVzLkRlZmF1bHRQb3B1bGF0ZUhlbHBlckZhY3RvcnkiIC8+DQogICAgICAgIDwvcHJvY2Vzc29yPg0KICAgICAgICA8cHJvY2Vzc29yIHR5cGU9IlNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyLlBpcGVsaW5lcy5Qb3B1bGF0ZVNvbHJTY2hlbWEuUmVJbml0aWFsaXplSW5kZXgsIFNpdGVjb3JlLkNvbnRlbnRTZWFyY2guU29sclByb3ZpZGVyIiAvPg0KICAgICAgPC9jb250ZW50U2VhcmNoLlBvcHVsYXRlU29sclNjaGVtYT4NCiAgICA8L3BpcGVsaW5lcz4NCiAgICA8c2NoZWR1bGluZz4NCiAgICAgIDxhZ2VudCB0eXBlPSJTaXRlY29yZS5Db250ZW50U2VhcmNoLlNvbHJQcm92aWRlci5BZ2VudHMuSXNTb2xyQWxpdmVBZ2VudCwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIG1ldGhvZD0iUnVuIiBpbnRlcnZhbD0iMDA6MTA6MDAiIC8+DQogICAgICA8YWdlbnQgdHlwZT0iU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIuQWdlbnRzLkluZGV4aW5nU3RhdGVTd2l0Y2hlciwgU2l0ZWNvcmUuQ29udGVudFNlYXJjaC5Tb2xyUHJvdmlkZXIiIG1ldGhvZD0iUnVuIiBpbnRlcnZhbD0iMDA6MDE6MDAiIC8+DQogICAgPC9zY2hlZHVsaW5nPg0KICAgIDxzZXR0aW5ncz4NCiAgICAgIDwhLS0gREVGQVVMVCBJTkRFWCBDT05GSUdVUkFUSU9OIFBBVEggDQogICAgICAgICAgIFRoaXMgc2V0dGluZyBzcGVjaWZpZXMgYW4gWFBhdGggZXhwcmVzc2lvbiB0aGF0IHBvaW50cyB0byB0aGUgZGVmYXVsdCBpbmRleCBjb25maWd1cmF0aW9uLiBUaGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGlzIHVzZWQgZm9yDQogICAgICAgICAgIGV2ZXJ5IGluZGV4IHRoYXQgZG9lcyBub3QgaGF2ZSBhIHNwZWNpZmllZCBjb25maWd1cmF0aW9uLg0KICAgICAgLS0+DQogICAgICA8c2V0dGluZyBuYW1lPSJDb250ZW50U2VhcmNoLkRlZmF1bHRJbmRleENvbmZpZ3VyYXRpb25QYXRoIiB2YWx1ZT0iY29udGVudFNlYXJjaC9pbmRleENvbmZpZ3VyYXRpb25zL2RlZmF1bHRTb2xySW5kZXhDb25maWd1cmF0aW9uIiAvPg0KDQogICAgICA8IS0tICBDT05ORUNUSU9OIFRJTUVPVVQNCiAgICAgICAgICAgIFRoZSB0aW1lb3V0IGludGVydmFsIGZvciB0aGUgU29sciBzZXJ2ZXIgY29ubmVjdGlvbiBpbiBtaWxsaXNlY29uZHMuDQogICAgICAgICAgICBBIHZhbHVlIG9mIC0xIChtaW51cyBvbmUpIG1lYW5zIHRoYXQgdGhlIGRlZmF1bHQgU29sck5ldCB0aW1lb3V0IGludGVydmFsIGlzIHVzZWQuDQogICAgICAgICAgICBEZWZhdWx0IHZhbHVlOiAtMQ0KICAgICAgLS0+DQogICAgICA8c2V0dGluZyBuYW1lPSJDb250ZW50U2VhcmNoLlNvbHIuQ29ubmVjdGlvblRpbWVvdXQiIHZhbHVlPSItMSIgLz4NCg0KICAgICAgPCEtLSBTRU5EIFBPU1QgUkVRVUVTVFMgVE8gU09MUg0KICAgICAgICAgICBUaGlzIHNldHRpbmcgc3BlY2lmaWVkIHdoZXRoZXIgUE9TVCBtZXRob2QgaXMgYWx3YXlzIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCBTT0xSLiBJZiB2YWx1ZSBpcyBmYWxzZSwgR0VUIGNhbiBiZSB1c2VkIGZvciBzb21lIFNvbHIgY29tbWFuZHMuDQogICAgICAgICAgIFRoZSBzZXR0aW5nIGNhbiBiZSB1c2VmdWwgaWYgeW91IGZhY2UgaXNzdWVzIHJlbGF0ZWQgdG8gVVJJIGxlbmd0aCBsaW1pdGF0aW9uLiAgDQogICAgICAgICAgIERlZmF1bHQgdmFsdWU6IGZhbHNlDQogICAgICAtLT4NCiAgICAgIDxzZXR0aW5nIG5hbWU9IkNvbnRlbnRTZWFyY2guU29sci5TZW5kUG9zdFJlcXVlc3RzIiB2YWx1ZT0iZmFsc2UiIC8+DQoNCiAgICAgIDwhLS0gIEJBVENIIE1PREUNCiAgICAgICAgICAgIENvbW1pdHMgdG8gdGhlIGRhdGFiYXNlIGluIGJhdGNoZXMgKHRvIHJlZHVjZSB0cmlwcyB0byB0aGUgZGF0YWJhc2UgLyBzZXJ2ZXIpLg0KICAgICAgLS0+DQogICAgICA8c2V0dGluZyBuYW1lPSJDb250ZW50U2VhcmNoLlVwZGF0ZS5CYXRjaE1vZGVFbmFibGVkIiB2YWx1ZT0idHJ1ZSIgLz4NCg0KICAgICAgPCEtLSAgQkFUQ0ggU0laRQ0KICAgICAgICAgICAgVGhlIHNpemUgb2YgZG9jdW1lbnQgYmF0Y2ggYmVmb3JlIGZsdXNoaW5nIHRvIHRoZSBkYXRhYmFzZS4NCiAgICAgIC0tPg0KICAgICAgPHNldHRpbmcgbmFtZT0iQ29udGVudFNlYXJjaC5VcGRhdGUuQmF0Y2hTaXplIiB2YWx1ZT0iNTAwIiAvPg0KDQogICAgICA8IS0tICBQQVJBTExFTCBJTkRFWCBJTklUSUFMSVpBVElPTiBNQVggVEhSRUFEIExJTUlUDQogICAgICAgICAgICBUaGlzIHNldHRpbmcgYWxsb3dzIHlvdSB0byBsaW1pdCB0aGUgbnVtYmVyIG9mIHRocmVhZHMgdXNlZCBmb3IgcmVxdWVzdGluZyBkYXRhIGZyb20gU29sciBuZWVkZWQgZm9yIGluZGV4ZXMgaW5pdGlhbGl6YXRpb24uDQogICAgICAgICAgICBJZiB0aGUgdmFsdWUgaXMgc2V0IHRvIDAsIHRoZXJlIGlzIG5vIGxpbWl0IHRvIHRoZSBudW1iZXIgb2YgdGhyZWFkcy4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgRGVmYXVsdCB2YWx1ZTogNg0KICAgICAgLS0+DQogICAgICA8c2V0dGluZyBuYW1lPSJDb250ZW50U2VhcmNoLlNvbHIuUGFyYWxsZWxJbmRleEluaXRpYWxpemF0aW9uLk1heFRocmVhZExpbWl0IiB2YWx1ZT0iNiIgLz4NCg0KICAgICAgPCEtLSAgU1VHR0VTVCBIQU5ETEVSDQogICAgICAgIFRoZSBuYW1lIG9mIHN1Z2dlc3QgcmVxdWVzdCBoYW5kbGVyIGFzIGNvbmZpZ3VyZWQgaW4gc29sciAtLT4NCiAgICAgIDxzZXR0aW5nIG5hbWU9IkNvbnRlbnRTZWFyY2guU29sci5TdWdnZXN0SGFuZGxlciIgdmFsdWU9Ii9zdWdnZXN0IiAvPg0KDQogICAgICA8IS0tICBTUEVMTCBDSEVDSyBIQU5ETEVSDQogICAgICAgIFRoZSBuYW1lIG9mIHNwZWxsIGNoZWNrIHJlcXVlc3QgaGFuZGxlciBhcyBjb25maWd1cmVkIGluIHNvbHIgLS0+DQogICAgICA8c2V0dGluZyBuYW1lPSJDb250ZW50U2VhcmNoLlNvbHIuU3BlbGxDaGVja0hhbmRsZXIiIHZhbHVlPSIvc3BlbGwiIC8+DQoNCiAgICAgIDwhLS0gIFNPTFIgU0NIRU1BIENMQVNTDQogICAgICAgICAgICBTcGVjaWZpZXMgdGhlIHNjaGVtYSB0eXBlIHVzZWQgYnkgU29sci4gSWYgeW91IGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhpcyBzZXR0aW5nLCB5b3UgbXVzdCByZWJ1aWxkIGFsbCB0aGUgaW5kZXhlcy4NCiAgICAgICAgICAgIFBvc3NpYmxlIHZhbHVlcyBhcmUgIm1hbmFnZWQiIG9yICJjbGFzc2ljIi4NCiAgICAgICAgICAgIERlZmF1bHQgdmFsdWU6ICJtYW5hZ2VkIiAtLT4NCiAgICAgIDxzZXR0aW5nIG5hbWU9IkNvbnRlbnRTZWFyY2guU29sci5Tb2xyU2NoZW1hQ2xhc3MiIHZhbHVlPSJtYW5hZ2VkIiAvPg0KDQogICAgPC9zZXR0aW5ncz4NCiAgPC9zaXRlY29yZT4NCjwvY29uZmlndXJhdGlvbj4NCg==</originalfile><oldHashCode>bJImeqj6ImMfvbROhsMQvw==</oldHashCode><newHashCode>lOYLByklW1Ow6yAMwRCegQ==</newHashCode></changeFile>
