version=2.0
xml=<?xml version="1.0" encoding="utf-8"?><changeFile><collisionbehavior></collisionbehavior><path>App_Config\Sitecore\ContentSearch\Sitecore.ContentSearch.config</path><id>App_Config\Sitecore\ContentSearch\Sitecore.ContentSearch.config</id><parent></parent><file></file><originalfile></originalfile><oldHashCode>YaFYMdJ1cqrq+iK6jVTqqg==</oldHashCode><newHashCode>1KjohneaK+GOHi7cqgdCaA==</newHashCode></changeFile>
